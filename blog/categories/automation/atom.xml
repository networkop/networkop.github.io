<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Automation | Network-oriented programming]]></title>
  <link href="http://networkop.github.io/blog/categories/automation/atom.xml" rel="self"/>
  <link href="http://networkop.github.io/"/>
  <updated>2017-09-19T16:17:42+01:00</updated>
  <id>http://networkop.github.io/</id>
  <author>
    <name><![CDATA[Michael Kashin]]></name>
    <email><![CDATA[mmkashin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using YANG Models in Ansible to Configure and Verify State of IOS-XE and JUNOS Devices]]></title>
    <link href="http://networkop.github.io/blog/2017/04/04/ansible-yang/"/>
    <updated>2017-04-04T00:00:00+01:00</updated>
    <id>http://networkop.github.io/blog/2017/04/04/ansible-yang</id>
    <content type="html"><![CDATA[<p>In this post I will show how to use IETF, OpenConfig and vendor-specific YANG models in Ansible to configure BGP peering and verify state of physical interfaces between IOS-XE and JUNOS devices.</p>

<!--more-->


<p>The idea of using Ansible for <a href="http://networkop.co.uk/blog/2015/08/26/automating-network-build-p1/">configuration changes</a> and <a href="https://github.com/networktocode/ntc-ansible">state verification</a> is not new. However the approach I&rsquo;m going to demonstrate in this post, using YANG and NETCONF, will have a few notable differences:</p>

<ol>
<li>I will not use any templates and absolutely no XML/JSON for device config generation</li>
<li>All changes will be pushed through a single, vendor and model-independent Ansible module</li>
<li>State verification will be done with no pattern-matching or screen-scraping</li>
<li>All configuration and operational state will be based on a couple of YAML files</li>
<li>To demonstrate the model-agnostic behaviour I will use a mixture of vendor&rsquo;s native, IETF and OpenConfig YANG models</li>
</ol>


<p>I hope this promise is exciting enough so without further ado, let&rsquo;s get cracking.</p>

<h2>Environment setup</h2>

<p>The test environment will consist of a single instance of CSR1000v running IOS-XE version 16.4.1 and a single instance of vMX running JUNOS version 17.1R1.8. The VMs containing the two devices are deployed within a single hypervisor and connected with one interface to the management network and back-to-back with the second  pair of interfaces for BGP peering.</p>

<p>{% img center /images/ansible-yang.png %}</p>

<p>Each device contains some basic initial configuration to allow it be reachable from the Ansible server.</p>

<pre><code class="text IOS-XE initial configuration">interface GigabitEthernet1
ip address 192.168.145.51 255.255.255.0
!
netconf-yang
netconf-yang cisco-odm polling enable
netconf-yang cisco-odm actions parse Interfaces
</code></pre>

<p>vMX configuration is quite similar. Static MAC address is <a href="http://noshut.ru/2015/09/how-to-run-juniper-vmx-in-unetlab/">required</a> in order for <code>ge</code> interfaces to work.</p>

<pre><code class="text vMX initial configuration">set system login user admin class super password admin123
set system services netconf
set interface fxp0 unit 0 family inet address 192.168.145.53/24
set interface ge-0/0/0 mac 00:0c:29:fc:1a:b7
</code></pre>

<h2>Ansible playbook configuration</h2>

<p>My <a href="https://github.com/networkop/yang/tree/master/ansible-101">Ansible-101</a> repository contains two plays - one for configuration and one for state verification. The local inventory file contains details about the two devices along with the login credentials. All the work will be performed by a custom Ansible module stored in the <code>./library</code> directory. This module is a wrapper for a <code>ydk_yaml</code> module described in my <a href="/blog/2017/03/13/yaml-yang/">previous post</a>. I had to heavily modify the original <code>ydk_yaml</code> module to work around some Ansible limitations, like the lack of support for <strong>set</strong> data structures.<br/>
This custom Ansible module also relies on a number of <a href="/blog/2017/02/22/odl-ydk/">YDK</a> Python bindings to be pre-installed. Refer to my <a href="https://github.com/networkop/yang/tree/master/yaml-101">YAML</a>, <a href="https://github.com/networkop/yang/tree/master/oper-101">Operational</a> and <a href="https://github.com/networkop/yang/tree/master/junos-101">JUNOS</a> repositories for the instructions on how to install those modules.<br/>
The desired configuration and expected operational state are documented inside a couple of device-specific host variable files. For each device there is a configuration file <code>config.yaml</code>, describing the desired configuration state. For IOS-XE there is an additional file <code>verify.yaml</code>, describing the expected operational state using the IETF interface YANG model (I couldn&rsquo;t find how to get the IETF or OpenConfig state models to work on Juniper). <br/>
All of these files follow the same structure:</p>

<ul>
<li>Root container can be either <code>config</code> or <code>verify</code> and defines how the enclosed data is supposed to be used</li>
<li>First nested container has to match the top-most container of a YANG model. For example it could be <strong>bgp-state</strong> for <a href="https://github.com/YangModels/yang/blob/master/vendor/cisco/xe/1641/cisco-bgp-state.yang">cisco-bgp-state.yang</a> or <strong>openconfig-bgp</strong> for <a href="https://github.com/openconfig/public/blob/master/release/models/bgp/openconfig-bgp.yang">openconfig-bgp.yang</a> model</li>
<li>The remaining nested data has to follow the structure of the original YANG model as described in my <a href="/blog/2017/03/13/yaml-yang/">previous post</a>.</li>
</ul>


<p>Here&rsquo;s how IOS-XE will be configured, using IETF interfaca YANG models (to unshut the interface) and Cisco&rsquo;s native YANG model for interface IP and BGP settings:</p>

<h2>{% codeblock lang:yaml %}</h2>

<p>config:
  interfaces:
    interface:
      - name: GigabitEthernet3
        enabled: true
  native:
    interface:
      gigabitethernet:
        - name: &lsquo;3&rsquo;
          description: P2P link
          ip:
            address:
              primary:
                address: 12.12.12.1
                mask: 255.255.255.0
      loopback:
        - name: 0
          description: ROUTER ID
          ip:
            address:
              primary:
                address: 1.1.1.1
                mask: 255.255.255.255
    router:
      bgp:
        - id: 65111
          bgp:
            router_id: 1.1.1.1
          neighbor:
            - id: 12.12.12.2
              remote_as: 65222
          redistribute:
            connected:
              empty: empty
{% endcodeblock %}</p>

<p>For JUNOS configuration, instead of the default humongous native model, I&rsquo;ll use a set of much more light-weight OpenConfig YANG models to configure interfaces, BGP and redistribution policies:</p>

<h2>{% codeblock lang:yaml %}</h2>

<p>config:
  openconfig-interfaces:
    interface:
      - name: ge-0/0/0
        subinterfaces:
          subinterface:
            - index: 0
              ipv4:
                addresses:
                  address:
                    - ip: 12.12.12.2/24
                      config:
                        ip: 12.12.2.2
                        prefix_length: 24
      - name: lo0
        subinterfaces:
          subinterface:
            - index: 0
              ipv4:
                addresses:
                  address:
                    - ip: 2.2.2.2/32
                      config:
                        ip: 2.2.2.2
                        prefix_length: 32
  openconfig-policy:
    policy_definitions:
      policy_definition:
        - name: CONNECTED->BGP
          statements:
            statement:
              - name: Loopback0
                conditions:
                  match_interface:
                    config:
                      interface: lo0
                      subinterface: 0
                actions:
                  config:
                    accept_route: empty
  openconfig-bgp:
    global<em>:
      config:
        as</em>: 65222
    neighbors:
      neighbor:
        - neighbor_address: 12.12.12.1
          config:
            peer_group: YANG
            peer_as: 65111
    peer_groups:
      peer_group:
        - peer_group_name: YANG
          config:
            peer_as: 65111
          apply_policy:
            config:
              export_policy:
                - CONNECTED->BGP
{% endcodeblock %}</p>

<h2>Configuration</h2>

<p>Both devices now can be configured with just a single command:</p>

<p>{% codeblock lang:bash %}
ansible-playbook config.yaml
{% endcodeblock  %}</p>

<p>Behind the scenes, Ansible calls my custom <code>ydk_module</code> and passes to it the full configuration state and device credentials. This module then constructs an empty YDK binding based on the name of a YANG model and <a href="/blog/2017/03/13/yaml-yang/">populates it recursively</a> with the data from the <code>config</code> container. Finally, it pushes the data to the device with the help of YDK NETCONF service provider.</p>

<h2>Verification</h2>

<p>There&rsquo;s one side to YANG which I have carefully avoided until now and it&rsquo;s operational state models. These YANG models are built similarly to configuration models, but with a different goal - to extract the running state from a device. The reason why I&rsquo;ve avoided them is that, unlike the configuration models, the current support for state models is limited and somewhat brittle.<br/>
For example, JUNOS natively only supports state models as RPCs, where each RPC represents a certain <code>show</code> command which, I assume, when passed to the devices gets evaluated, its output parsed and result returned back to the client. With IOX-XE things are a little better with a few of the operational models available in the current 16.4 release. You can check out my <a href="https://github.com/networkop/yang/tree/master/oper-101">Github repo</a> for some examples of how to check the interface and BGP neighbor state between the two IOS-XE devices. However, most of the models are still missing (I&rsquo;m not counting the MIB-mapped YANG models) in the current release. The next few releases, though, are promised to come with an improved state model support, including some OpenConfig models, which is going to be super cool.<br/>
So in this post, since I couldn&rsquo;t get JUNOS OpenConfig models report any state and my IOS-XE BGP state model wouldn&rsquo;t return any output unless the BGP peering was with another Cisco device or in the <strong>Idle</strong> state, I&rsquo;m going to have to resort to simply checking the state of physical interfaces. This is how a sample operational state file would look like (question marks are YAML&rsquo;s special notation for sets which is how I decided to encode Enum data type):</p>

<h2>{% codeblock lang:yaml %}</h2>

<p>verify:
  interfaces-state:
    interface:
      - name: GigabitEthernet3
        oper_status:
          ? up
      - name: Loopback0
        oper_status:
          ? up
      - name: GigabitEthernet2
        oper_status:
          ? down
{% endcodeblock  %}</p>

<p>Once again, all expected state can be verified with a single command:</p>

<p>{% codeblock lang:bash %}
ansible-playbook verify.yaml
{% endcodeblock %}</p>

<p>If the state defined in that YAML file matches the data returned by the IOS-XE device, the playbook completes successfully. You can check that it works by shutting down one of the <code>GigabitEthernet3</code> or <code>Loopback0</code> interfaces and observing how Ansible module returns an error.</p>

<h2>Outro</h2>

<p>Now that I&rsquo;ve come to the end of my YANG series of posts I feel like I need to provide some concise and critical summary of everything I&rsquo;ve been through. However, if there&rsquo;s one thing I&rsquo;ve learned in the last couple of months about YANG, it&rsquo;s that things are changing very rapidly. Both Cisco and Juniper are working hard introducing new models and improving support for the existing ones. So one thing to keep in mind, if you&rsquo;re reading this post a few months after it was published (April 2017), is that some or most of the above limitations may not exist and it&rsquo;s always worth checking what the latest software release has to offer.</p>

<p>Finally, I wanted to say that I&rsquo;m a strong believer that YANG models are the way forward for network device configuration and state verification, despite the timid scepticism of the networking industry. I think that there are two things that may improve the industry&rsquo;s perception of YANG and help increase its adoption:</p>

<ol>
<li><p>Support from networking vendors - we&rsquo;ve already seen Cisco changing by introducing YANG support on IOS-XE instead of producing another dubious One-PK clone. So big thanks to them and I hope that other vendors will follow suit.</p></li>
<li><p>Tools - this part, IMHO, is the most crucial. In order for people to start using YANG models we have to have the right tools that would be versatile enough to allow network engineers to be limited only by their imagination and at the same time be as robust as the CLI. So I wanted to give a big shout out to all the people contributing to open-source projects like <strong>pyang</strong>, <strong>YDK</strong> and many others that I have missed or don&rsquo;t know about. You&rsquo;re doing a great job guys, don&rsquo;s stop.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Cisco IOS XE With YANG-based YAML Files]]></title>
    <link href="http://networkop.github.io/blog/2017/03/13/yaml-yang/"/>
    <updated>2017-03-13T00:00:00+00:00</updated>
    <id>http://networkop.github.io/blog/2017/03/13/yaml-yang</id>
    <content type="html"><![CDATA[<p>One thing that puts a lot of network engineers off NETCONF and YANG is the complexity of the device configuration process. Even the simplest change involves multiple tools and requires some knowledge of XML. In this post I will show how to use simple, human-readable YAML configuration files to instantiate YANG models and push them down to network devices using a single command.</p>

<!--more-->


<hr />

<p>XML, just like many more structured data formats, was not designed to be human-friendly. That&rsquo;s why many network engineers lose interest in YANG as soon as the conversation gets to the XML part. JSON is a much more human-readable alternative, however very few devices support RESTCONF, and the ones that do may have <a href="https://github.com/CiscoDevNet/openconfig-getting-started/issues/4">buggy implementations</a>. At the same time, a lot of network engineers have happily embraced Ansible, which extensively uses YAML. That&rsquo;s why I&rsquo;ve decided to write a Python module that would program network devices using YANG and NETCONF according to configuration data described in a YAML format.</p>

<p>In the <a href="blog/2017/02/22/odl-ydk/">previous post</a> I have introduced a new open-source tool called YDK, designed to create API bindings for YANG models and interact with network devices using NETCONF or RESTCONF protocols. I have also mentioned that I would still prefer to use <a href="https://github.com/robshakir/pyangbind">pyangbind</a> along with other open-source tools to achieve the same functionality. Now, two weeks later, I must admin I have been converted. Initially, I was planning to write a simple REST API client to interact with RESTCONF interface of IOS XE, create an API binding with <strong>pyangbind</strong>, use it to produce the JSON output, convert it to XML and send it to the device, similar to what I&rsquo;ve described in my <a href="/blog/2017/01/25/netconf-intro/">netconf</a> and <a href="blog/2017/02/15/restconf-yang/">restconf</a> posts. However, I&rsquo;ve realised that YDK can already do all what I need with just a few function calls. All what I&rsquo;ve got left to do is create a wrapper module to consume the YAML data and use it to automatically populate YDK bindings.</p>

<p>This post will be mostly about the internal structure of this wrapper module I call <code>ydk_yaml.py</code>, which will serve as a base library for a YANG Ansible module, which I will describe in my next post. This post will be very programming-oriented, I&rsquo;ll start with a quick overview of some of the programming concepts being used by the module and then move on to the details of module implementation. Those who are not interested in technical details can jump straight to the <strong>examples</strong> sections at the end of this post for a quick demonstration of how it works.</p>

<h2>Recursion</h2>

<p>One of the main tasks of <code>ydk_yaml.py</code> module is to be able parse a YAML data structure. This data structure, when loaded into Python, is stored as a collection of Python objects like dictionaries, lists and primitive data types like strings, integers and booleans. One key property of YAML data structures is that they can be represented as trees and parsing trees is a very well-known programming problem.</p>

<p>After having completed <a href="https://www.coursera.org/learn/programming-languages">this programming course</a> I fell in love with functional programming and recursions. Every problem I see, I try to solve with a recursive function. Recursions are very interesting in a way that they are very difficult to understand but relatively easy to write. Any recursive function will consist of a number of <code>if/then/else</code> conditional statements. The first one (or few) <code>if</code> statements are called the base of a recursion - this is where recursion stops and the value is returned to the outer function. The remaining few <code>if</code> statements will implement the recursion by calling the same function with a <strong>reduced input</strong>. You can find a much better explanation of recursive functions <a href="http://composingprograms.com/pages/17-recursive-functions.html">here</a>. For now, let&rsquo;s consider the problem of parsing the following tree-like data structure:</p>

<p>{% codeblock lang:python %}
{ &lsquo;parent&rsquo;: {
    &lsquo;child_1&rsquo;: {
      &lsquo;leaf_1&rsquo;: &lsquo;value_1&rsquo;
    },
    &lsquo;child_1&rsquo;: &lsquo;value_2&rsquo;
    }
}
{% endcodeblock  %}</p>

<p>Recursive function to parse this data structure written in a pseudo-language will look something like this:</p>

<p>{% codeblock lang:python %}
def recursion(input_key, input_value):
  if input_value is String:
    return process(input_value)
  elif input_value is Dictonary:
    for key, value in input_value.keys_and_values():
      return recursion(key, value)
{% endcodeblock  %}</p>

<p>The beauty of recursive functions is that they are capable parsing data structures of arbitrary complexity. That means if we had 1000 randomly nested child elements in the parent data structure, they all could have been parsed by the same 6-line function.</p>

<h2>Introspection</h2>

<p><a href="http://zetcode.com/lang/python/introspection/">Introspection</a> refers to the ability of Python to examine objects at runtime. It can be useful when dealing with object of arbitrary structure, e.g. a YAML document. Introspection is used whenever there is a need for a function to behave differently based on the runtime data. In the above pseudo-language example, the two conditional statements are the examples of introspection. Whenever we need to determine the type of an object in Python we can either use a built-in function <code>type(obj)</code> which returns the type of an object or <code>isinstance(obj, type)</code> which checks if the <strong>object</strong> is an <em>instance</em> or a <em>descendant</em> of a particular <strong>type</strong>. This is how we can re-write the above two conditional statements using real Python:</p>

<p>{% codeblock lang:python %}
if isinstance(input_value, str):
  print(&lsquo;input value is a string&rsquo;)
elif isinstance(input_value, dict):
  print(&lsquo;intput value is a dictionary&rsquo;)
{% endcodeblock  %}</p>

<h2>Metaprogramming</h2>

<p>Another programming concept used in my Python module is <a href="http://chase-seibert.github.io/blog/2013/04/12/getattr-setattr.html">metaprogramming</a>. Metaprogramming, in general, refers to an ability of programs to write themselves. This is what compilers normally do when they read the program written in a higher-level language and translate it to a lower-level language, like assembler. What I&rsquo;ve used in my module is the simplest version of metaprogramming - dynamic getting and setting of object attributes. For example, this is how we would configure BGP using YDK Python binding, as described in my <a href="blog/2017/02/22/odl-ydk/">previous post</a>:</p>

<p>{% codeblock lang:python %}
bgp.id = 100
n = bgp.Neighbor()
n.id = &lsquo;2.2.2.2&rsquo;
n.remote_as = 65100
bgp.neighbor.append(n)
{% endcodeblock  %}</p>

<p>The same code could be re-written using the <code>getattr</code> and <code>setattr</code> method calls:</p>

<p>{% codeblock lang:python %}
setattr(bgp, &lsquo;id&rsquo;, 100)
n = getattr(bgp, &lsquo;Neighbor&rsquo;)()
setattr(n, &lsquo;id&rsquo;, &lsquo;2.2.2.2&rsquo;)
setattr(n, &lsquo;remote_as&rsquo;, 65100)
getattr(bgp, &lsquo;neighbor&rsquo;).append(n)
{% endcodeblock  %}</p>

<p>This is also very useful when working with arbitrary data structures and objects. In my case the goal was to write a module that would be completely independent of the structure of a particular YANG model, which means that I can <strong>not know</strong> the structure of the Python binding generated by YDK. However, I can &ldquo;guess&rdquo; the name of the attributes if I assume that my YAML document is structured <strong>exactly</strong> like the YANG model. This simple assumption allows me to implement YAML mapping for <strong>all</strong> possible YANG models with just a single function.</p>

<h2>YANG mapping to YAML</h2>

<p>As I&rsquo;ve mentioned in my <a href="/blog/2017/01/25/netconf-intro/">previous post</a>, YANG is simply a way to define the structure of an XML document. At the same time, it is known that YANG-based XML can be mapped to JSON as described in <a href="https://tools.ietf.org/html/draft-ietf-netmod-yang-json-10">this RFC</a>. Since YAML is a superset of JSON, it&rsquo;s easy to come up with a similar XML-to-YAML mapping convention. The following table contains the mapping between some of the most common YAML and YANG data structures and types:</p>

<table>
<thead>
<tr>
<th> YANG data </th>
<th> YAML representation</th>
</tr>
</thead>
<tbody>
<tr>
<td> container </td>
<td> dictionary </td>
</tr>
<tr>
<td> container name </td>
<td> dictionary key </td>
</tr>
<tr>
<td> leaf name </td>
<td> dictionary key </td>
</tr>
<tr>
<td> leaf </td>
<td> dictionary value </td>
</tr>
<tr>
<td> list </td>
<td> list </td>
</tr>
<tr>
<td> string, bool, integer </td>
<td> string, bool, integer </td>
</tr>
<tr>
<td> empty </td>
<td> null </td>
</tr>
</tbody>
</table>


<p>Using this table, it&rsquo;s easy to map the YANG data model to a YAML document. Let me demonstrate it on IOS XE&rsquo;s native OSPF data model. First, I&rsquo;ve generated a tree representation of an OSPF data model using <strong>pyang</strong>:</p>

<p>{% codeblock lang:bash %}
pyang -f tree &ndash;tree-path &ldquo;/native/router/ospf&rdquo; ~/ydk-gen/gen-api/.cache/models/cisco_ios_xe@0.1.0/ned.yang -o ospf.tree
{% endcodeblock  %}</p>

<p>Next, I&rsquo;ve trimmed it down to only contain the options that I would like to set and created a YAML document based on the model&rsquo;s tree structure:</p>

<p>{% img center /images/yang-yaml.png %}</p>

<p>With the right knowledge of <a href="blog/2017/02/15/restconf-yang/">YANG model&rsquo;s structure</a>, it&rsquo;s fairly easy to generate similar YAML configuration files for other configuration objects, like <a href="https://github.com/networkop/yang/blob/master/yaml-101/interface.yaml">interface</a> and <a href="https://github.com/networkop/yang/blob/master/yaml-101/bgp.yaml">BGP</a>.</p>

<h2>YANG instantiating function</h2>

<p>At the heart of the <code>ydk_yaml</code> module is a single recursive function that traverses the input YAML data structure and uses it to instantiate the YDK-generated Python binding. Here is a simple, abridged version of the function that demonstrates the main logic.</p>

<p>{% codeblock lang:python %}
def instantiate(binding, model_key, model_value):
    if any(isinstance(model_value, x) for x in [str, bool, int]):
        setattr(binding, model_key, model_value)
    elif isinstance(model_value, list):
        for el in model_value:
            getattr(binding, model_key).append(instantiate(binding, model_key, el))
    elif isinstance(model_value, dict):
        container_instance = getattr(binding, model_key)()
        for k, v in model_value.iteritems():
            instantiate(container_instance, k, v)
        setattr(binding, model_key, container_instance)
{% endcodeblock  %}</p>

<p>Most of it should already make sense based on what I&rsquo;ve covered above. The first conditional statement is the base of the recursion and performs the action of setting the value of a YANG Leaf element. The second conditional statement takes care of a YANG List by traversing all its elements, instantiating them recursively, and appends the result to a YDK binding. The last <code>elif</code> statement creates a class instance for a YANG container, recursively populates its values and saves the final result inside a YDK binding.</p>

<p>The full version of this function covers a few extra corner cases and can be found <a href="https://github.com/networkop/yang/blob/master/yaml-101/ydk_yaml.py">here</a>.</p>

<h2>The YDK module wrapper</h2>

<p>The final step is to write a wrapper class that would consume the YDK model binding along with the YAML data, and both instantiate and push the configuration down to the network device.</p>

<p>{% codeblock lang:python %}
class YdkModel:</p>

<pre><code>def __init__(self, model, data):
    self.model = model
    self.data = data
    from ydk.models.cisco_ios_xe.ned import Native
    self.binding = Native()
    for k,v in self.data.iteritems():
        instantiate(self.binding, k, v)

def action(self, crud_action, device):
    from ydk.services import CRUDService
    from ydk.providers import NetconfServiceProvider
    provider = NetconfServiceProvider(address=device['hostname'],
                                      port=device['port'],
                                      username=device['username'],
                                      password=device['password'],
                                      protocol='ssh')
    crud = CRUDService()
    crud_instance = getattr(crud, crud_action)
    crud_instance(provider, self.binding)
    provider.close()
    return
</code></pre>

<p>{% endcodeblock  %}</p>

<p>The structure of this class is pretty simple. The constructor instantiates a YDK native data model and calls the recursive instantiation function to populate the binding. The <strong>action</strong> method implements standard CRUD actions using the YDK&rsquo;s NETCONF provider. The full version of this Python module can be found <a href="https://github.com/networkop/yang/blob/master/yaml-101/ydk_yaml.py">here</a>.</p>

<h2>Configuration examples</h2>

<p>In my <a href="https://github.com/networkop/yang/tree/master/yaml-101">Github repo</a>, I&rsquo;ve included a few examples of how to configure Interface, OSPF and BGP settings of IOS XE device. A helper Python script <code>1_send_yaml.py</code> accepts the YANG model name and the name of the YAML configuration file as the input. It then instantiates the <code>YdkModel</code> class and calls the <code>create</code> action to push the configuration to the device. Let&rsquo;s assume that we have the following YAML configuration data saved in a <code>bgp.yaml</code> file:</p>

<h2>{% codeblock lang:yaml %}</h2>

<p>router:
  bgp:
    - id: 100
      bgp:
        router_id: 1.1.1.1
        fast_external_fallover: null
        update_delay: 15
      neighbor:
        - id: 2.2.2.2
          remote_as: 200
        - id: 3.3.3.3
          remote_as: 300
      redistribute:
        connected: {}
{% endcodeblock  %}</p>

<p>To push this BGP configuration to the device all what I need to do is run the following command:</p>

<p>{% codeblock lang:bash %}
./1_send_yaml.py bgp bgp.yaml
{% endcodeblock  %}</p>

<p>The resulting configuration on IOS XE device would look like this:</p>

<p>{% codeblock lang:text  %}
router bgp 100
 bgp router-id 1.1.1.1
 bgp log-neighbor-changes
 bgp update-delay 15
 redistribute connected
 neighbor 2.2.2.2 remote-as 200
 neighbor 3.3.3.3 remote-as 300
{% endcodeblock  %}</p>

<p>To see more example, follow <a href="https://github.com/networkop/yang/tree/master/yaml-101">this link</a> to my Github repo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Cisco IOS XE With YDK and OpenDaylight]]></title>
    <link href="http://networkop.github.io/blog/2017/02/22/odl-ydk/"/>
    <updated>2017-02-22T00:00:00+00:00</updated>
    <id>http://networkop.github.io/blog/2017/02/22/odl-ydk</id>
    <content type="html"><![CDATA[<p>Now it&rsquo;s time to turn our gaze to the godfather of YANG models and one of the most famous open-source SDN controllers, OpenDaylight. In this post I&rsquo;ll show how to connect Cisco IOS XE device to ODL and use Yang Development Kit to push a simple BGP configuration through ODL&rsquo;s RESTCONF interface.</p>

<!--more-->


<hr />

<p>In the previous posts about <a href="/blog/2017/01/25/netconf-intro/">NETCONF</a> and <a href="/blog/2017/02/15/restconf-yang/">RESTCONF</a> I&rsquo;ve demonstrated how to interact with Cisco IOS XE device directly from the Linux shell of my development VM. This approach works fine in some cases, e.g. whenever I setup a new DC fabric, I would make calls directly to the devices I&rsquo;m configuring. However, it becomes impractical in the Ops world where change is constant and involves a large number of devices. This is where centralised service orchestrators come to the fore. The prime examples of such platforms are Network Services Orchestrator from Tail-f/Cisco and open-source project OpenDaylight. In this post we&rsquo;ll concentrate on ODL and how to make it work with Cisco IOS XE. Additionally, I&rsquo;ll show how to use an open-source tool <a href="https://developer.cisco.com/site/ydk/">YDK</a> to generate Python bindings for native YANG models and how it compares with <strong>pyangbind</strong>.</p>

<h2>OpenDaylight primer</h2>

<p>OpenDaylight is a swiss army knife of SDN controllers. At the moment it is comprised of dozens of projects implementing all possible sorts of SDN functionality starting from Openflow controller all the way up to L3VPN orchestrator. ODL speaks most of the modern Southbound protocols like Openflow, SNMP, NETCONF and BGP. The brain of the controller is in the Service Abstraction Layer, a framework to model all network-related characteristics and properties. All logic inside SAL is modelled in YANG which is why I called it the godfather of YANG models. Towards the end users ODL exposes Java function calls for applications running on the same host and REST API for application running remotely.</p>

<p>{% img center /images/odl-sal.jpg %}</p>

<p>OpenDaylight has several commercial offerings from companies involved in its development. Most notable ones are from Brocade and Cisco. Here I will allow myself a bit of a rant, feel free to skip it to go straight to the technical stuff.</p>

<p>One thing I find interesting is that Cisco are being so secretive about their Open SDN Controller, perhaps due to the earlier market pressure to come up with a single SDN story, but still have a very large number of contributors to this open-source project. It could be the case of having an egg in each basket, but the number of Cisco&rsquo;s employees involved in ODL development is substantial. I wonder if, now that the use cases for ACI and ODL have finally formed and ACI still not showing the uptake originally expected, Cisco will change their strategy and start promoting ODL more aggressively, or at least stop hiding it deep in the bowels of <a href="cisco.com">cisco.com</a>. Or, perhaps, it will always stay in the shade of Tail-f&rsquo;s NSC and Insieme&rsquo;s ACI and will be used only for customer with unique requirements, e.g. to have both OpenStack and network devices managed through the same controller.</p>

<h2>Environment setup</h2>

<p>We&rsquo;ll use the same environment we&rsquo;ve setup in the <a href="/blog/2017/01/25/netconf-intro/">previous posts</a>, consisting of a CSR1K and a Linux VM connected to the same network inside my hypervisor. IOS XE device needs to have <code>netconf-yang</code> configured in order to enable the northbound NETCONF interface.</p>

<p>On the same Linux VM, I&rsquo;ve downloaded and launched the latest version of ODL (Boron-SR2), and enabled NETCONF and RESTCONF plugins.</p>

<p>{% codeblock lang:bash %}
unzip distribution-karaf-0.5.2-Boron-SR2.zip
mv distribution-karaf-0.5.2-Boron-SR2 odl-0.5.2
cd odl-0.5.2/
./bin/karaf
opendaylight-user@root>feature:install odl-netconf-connector-all
opendaylight-user@root>feature:install odl-restconf-all
{% endcodeblock  %}</p>

<p>We&rsquo;ll use NETCONF to connect to Cisco IOS XE device and RESTCONF to interact with ODL from a Linux shell.</p>

<p>{% img center /images/odl-ydk.png %}</p>

<p>It might be useful to turn on logging in karaf console to catch any errors we might encounter later:</p>

<p>{% codeblock lang:bash %}
opendaylight-user@root>log:tail
{% endcodeblock  %}</p>

<h2>Connecting IOS XE to ODL</h2>

<p>According to ODL <a href="http://docs.opendaylight.org/en/stable-boron/user-guide/netconf-user-guide.html">NETCONF</a> user guide, in order to connect a new device to the controller, we need to create an XML document which will include the IP, port and user credentials of the IOS XE device. Here&rsquo;s the excerpt from the <a href="https://github.com/networkop/yang/blob/master/odl-101/new_device.xml.1">full XML document</a>:</p>

<p>{% codeblock lang:xml %}
<module xmlns="urn:opendaylight:params:xml:ns:yang:controller:config">
  <type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">prefix:sal-netconf-connector</type>
  <name>CSR1K</name>
  <address xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">192.168.145.51</address>
  <port xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">830</port>
  <username xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">admin</username>
  <password xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">admin</password>
{% endcodeblock  %}</p>

<p>Assuming this XML is saved in a file called <a href="https://github.com/networkop/yang/blob/master/odl-101/new_device.xml.1">new_device.xml.1</a>, we can use <code>curl</code> to send it to ODL&rsquo;s netconf-connector plugin:</p>

<p>{% codeblock lang:bash %}
curl -v -k -u admin:admin -H &ldquo;Content-Type: application/xml&rdquo; -X POST \
 <a href="http://localhost:8181/restconf/config/network-topology:network-topology%0A">http://localhost:8181/restconf/config/network-topology:network-topology
</a> /topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules\
  -d @new_device.xml.1
{% endcodeblock  %}</p>

<p>When the controller gets this information it will try to connect to the device via NETCONF and do the following three things:</p>

<ul>
<li>Discover device capabilities advertised in the Hello message</li>
<li>Download all YANG models advertised by the device into the <code>./cache/schema</code> directory</li>
<li>Go through all of the imports in each model and verify that they can be satisfied</li>
</ul>


<p>After ODL downloads all of the 260 available models (can take up to 20 minutes) we will see the following errors in the karaf console:</p>

<p>{% codeblock lang:bash %}
Netconf device does not provide all yang models reported in hello message capabilities
Unable to build schema context, unsatisfied imports
Initialization in sal failed, disconnecting from device
No more sources for schema context
{% endcodeblock  %}</p>

<p>Due to inconsistencies between the advertised and the available models, ODL fails to build the full device YANG schema context, which ultimately results in inability to connect the device to the controller. However, we won&rsquo;t need all of the 260 models advertised by the device. In fact, most of the configuration can be done through a single Cisco native YANG model, <code>ned</code>. With ODL it is possible to override the default capabilities advertised in the Hello message and &ldquo;pin&rdquo; only the ones that are going to be used. Assuming that ODL has downloaded most of the models at the previous step, we can simply tell it use the selected few with the following additions to the <a href="https://github.com/networkop/yang/blob/master/odl-101/new_device.xml.2">XML document</a>:</p>

<p>{% codeblock lang:xml %}
<yang-module-capabilities xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">
    <override>true</override>
    <capability xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">
      urn:ietf:params:xml:ns:yang:ietf-inet-types?module=ietf-inet-types&amp;revision=2013-07-15
    </capability>
    <capability xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">
      <a href="http://cisco.com/ns/yang/ned/ios?module=ned&amp;amp;revision=2016-10-24">http://cisco.com/ns/yang/ned/ios?module=ned&amp;amp;revision=2016-10-24</a>
    </capability>
{% endcodeblock  %}</p>

<p>Assuming the updated XML is saved in <a href="https://github.com/networkop/yang/blob/master/odl-101/new_device.xml.2">new_device.xml.2</a> file, the following command will update the current configuration of <strong>CSR1K</strong> device:</p>

<p>{% codeblock lang:bash %}
curl -v -k -u admin:admin -H &ldquo;Content-Type: application/xml&rdquo; -X PUT \
<a href="http://localhost:8181/restconf/config/network-topology:network-topology%0A/topology/topology-netconf/node/controller-config%0A/yang-ext:mount/config:modules/module%0A/odl-sal-netconf-connector-cfg:sal-netconf-connector%0A/CSR1K">http://localhost:8181/restconf/config/network-topology:network-topology
/topology/topology-netconf/node/controller-config
/yang-ext:mount/config:modules/module
/odl-sal-netconf-connector-cfg:sal-netconf-connector
/CSR1K</a> -d @new_device.xml.2
{% endcodeblock  %}</p>

<p>We can then verify that the device has been successfully mounted to the controller:</p>

<p>{% codeblock lang:bash %}
curl -v -k -u admin:admin <a href="http://localhost:8181/restconf/operational%0A/network-topology:network-topology/">http://localhost:8181/restconf/operational
/network-topology:network-topology/</a> | python -m json.tool
{% endcodeblock  %}</p>

<p>The output should look similar to the following with the connection-status set to <code>connected</code> and no detected <code>unavailable-capabilities</code>:</p>

<p>{% codeblock lang:json %}
&ldquo;netconf-node-topology:connection-status&rdquo;: &ldquo;connected&rdquo;,
&ldquo;netconf-node-topology:host&rdquo;: &ldquo;192.168.145.51&rdquo;,
&ldquo;netconf-node-topology:port&rdquo;: 830,
&ldquo;netconf-node-topology:unavailable-capabilities&rdquo;: {},
&ldquo;node-id&rdquo;: &ldquo;CSR1K&rdquo;
{% endcodeblock  %}</p>

<p>At this point we should be able to interact with IOS XE&rsquo;s native YANG model through ODL&rsquo;s RESTCONF interface using the following URL</p>

<p>{% codeblock lang:bash %}
 <a href="http://localhost:8181/restconf/config/network-topology:network-topology%0A">http://localhost:8181/restconf/config/network-topology:network-topology
</a> /topology/topology-netconf/node/CSR1K/yang-ext:mount/ned:native
{% endcodeblock  %}</p>

<p>The only thing that&rsquo;s missing is the actual configuration data. To generate it, I&rsquo;ll use a new open-source tool called YDK.</p>

<h2>YDK primer</h2>

<p>Yang Development Kit is a suite of tools to work with NETCONF/RESTCONF interfaces of a network device. The way I see it, YDK accomplishes two things:</p>

<ul>
<li>Generates API bindings for programming languages (Python and C++) from YANG models</li>
<li>Creates an abstraction layer to interact with southbound protocols (NETCONF or RESTCONF) in a uniform way</li>
</ul>


<p>There&rsquo;s a lot of overlap between the tools that we&rsquo;ve used <a href="/blog/2017/02/15/restconf-yang/">before</a> and YDK. Effectively YDK combines in itself the functions of a NETCONF client, a REST client, pyangbind and pyang(the latter is used internally for model verification). Since one of the main functions of YDK is API generation I thought it&rsquo;d be interesting to know how it compares to Rob Shakir&rsquo;s <strong>pyangbind</strong> plugin. The following information is what I&rsquo;ve managed to find on the Internet and from the comment of Santiago Alvarez below:</p>

<table>
<thead>
<tr>
<th> Feature </th>
<th> Pyangbind </th>
<th> YDK </th>
</tr>
</thead>
<tbody>
<tr>
<td> PL support </td>
<td> Python </td>
<td> Python, C++ with Ruby and Go in the pipeline </td>
</tr>
<tr>
<td> Serialization </td>
<td> JSON, XML </td>
<td> only XML <a href="https://github.com/CiscoDevNet/ydk-gen/blob/master/sdk/python/core/ydk/providers/codec_provider.py#L53">at this stage</a> with JSON coming up in a few weeks </td>
</tr>
<tr>
<td> Southbound interfaces   </td>
<td> N/A </td>
<td> NETCONF, RESTCONF with ODL coming up in a few weeks </td>
</tr>
<tr>
<td> Support </td>
<td> Cisco&rsquo;s devnet team </td>
<td> Rob Shakir </td>
</tr>
</tbody>
</table>


<p>So it looks like YDK is a very promising alternative to <strong>pyangbind</strong>, however I, personally, would still prefer to use <strong>pyangbind</strong> due to familiarity, simplicity and the fact that I don&rsquo;t need the above extra features offered by YDK right now. However, given that YDK has been able to achieve so much in just under one year of its existence, I don&rsquo;t discount the possibility that I may switch to YDK as it becomes more mature and feature-rich.</p>

<h2>Python binding generation with YDK-GEN</h2>

<p>One of the first things we need to do is install YDK-GEN, the tools responsible for API bindings generation, and it&rsquo;s core Python packages on the local machine. The following few commands are my version of the official <a href="https://github.com/CiscoDevNet/ydk-gen">installation procedure</a>:</p>

<p>{% codeblock lang:bash %}
git clone <a href="https://github.com/CiscoDevNet/ydk-gen.git">https://github.com/CiscoDevNet/ydk-gen.git</a> ~/ydk-gen
pip install -r ~/ydk-gen/requirements.txt
export YDKGEN_HOME=~/ydk-gen/
~/ydk-gen/generate.py &ndash;python &ndash;core
pip install ~/ydk-gen/gen-api/python/ydk/dist/ydk*.tar.gz
{% endcodeblock  %}</p>

<p>YDK-GEN generates Python bindings based on the so-called <strong>bundle profile</strong>. This is a simple JSON document which lists all YANG models to include in the output package. In our case we&rsquo;d need to include a <code>ned</code> model along with all its imports. The sample below shows only the model specification. Refer to my <a href="https://github.com/networkop/yang/blob/master/odl-101/cisco-ios-xe_0_1_0.json">Github repo</a> for a complete bundle profile for Cisco IOS XE native YANG model.</p>

<p>{% codeblock lang:json %}
{&ldquo;models&rdquo;:{&ldquo;git&rdquo;:[{&ldquo;url&rdquo;:&ldquo;<a href="https://github.com/YangModels/yang.git">https://github.com/YangModels/yang.git</a>&rdquo;,
  &ldquo;commits&rdquo;:[{&ldquo;commitid&rdquo;:&ldquo;6f4a025431103f8cbbf3405ce01bdc61d0811b1d&rdquo;,
    &ldquo;file&rdquo;:[&ldquo;vendor/cisco/xe/1641/ned.yang&rdquo;,
      &ldquo;vendor/cisco/xe/1641/tailf-common.yang&rdquo;,
      &ldquo;vendor/cisco/xe/1641/tailf-meta-extensions.yang&rdquo;,
      &ldquo;vendor/cisco/xe/1641/tailf-cli-extensions.yang&rdquo;,
      &ldquo;standard/ietf/RFC/ietf-inet-types.yang&rdquo;,
      &ldquo;standard/ietf/RFC/ietf-yang-types.yang&rdquo;]
      }]}]}}
{% endcodeblock  %}</p>

<p>Assuming that the IOS XE bundle profile is saved in a file called <a href="https://github.com/networkop/yang/blob/master/odl-101/cisco-ios-xe_0_1_0.json">cisco-ios-xe_0_1_0.json</a>, we can use YDK to generate and install the Python binding package:</p>

<p>{% codeblock lang:bash %}
~/ydk-gen/generate.py &ndash;python &ndash;bundle cisco-ios-xe_0_1_0.json -v
pip install ~/ydk-gen/gen-api/python/cisco_ios_xe-bundle/dist/ydk*.tar.gz
{% endcodeblock  %}</p>

<h2>Configuring BGP with YDK</h2>

<p>Now we can start configuring BGP using our newly generated Python package. First, we need to create an instance of BGP configuration data:</p>

<p>{% codeblock lang:python %}
from ydk.models.cisco_ios_xe.ned import Native
bgp = Native().router.Bgp()
{% endcodeblock  %}</p>

<p>The configuration will follow the pattern defined in the original model, which is why it&rsquo;s important to understand <a href="/blog/2017/02/15/restconf-yang/">the internal structure</a> of a YANG model. YANG leafs are represented as simple instance attributes. All YANG containers need to be explicitly instantiated, just like the <code>Native</code> and <code>Bgp</code> classes in the example above. Presence containers (<code>router</code> in the above example) will be instantiated at the same time as its parent container, inside the <code>__init__</code> function of the <code>Native</code> class. Don&rsquo;t worry if this doesn&rsquo;t make sense, use <strong>iPython</strong> or any IDE with autocompletion and after a few tries, you&rsquo;ll get the hang of it.</p>

<p>Let&rsquo;s see how we can set the local BGP AS number and add a new BGP peer to the neighbor list.</p>

<p>{% codeblock lang:python %}
bgp.id = 100
new_neighbor = bgp.Neighbor()
new_neighbor.id = &lsquo;2.2.2.2&rsquo;
new_neighbor.remote_as = 65100
bgp.neighbor.append(new_neighbor)
{% endcodeblock  %}</p>

<p>At this point of time all data is stored inside the instance of a <code>Bgp</code> class. In order to get an XML representation of it, we need to use YDK&rsquo;s XML provider and encoding service:</p>

<p>{% codeblock lang:python %}
from ydk.providers import CodecServiceProvider
from ydk.services import CodecService
provider = CodecServiceProvider(type=&ldquo;xml&rdquo;)
codec = CodecService()
xml_string = codec.encode(provider, bgp)
print xml_string
{% endcodeblock  %}</p>

<p>All what we&rsquo;ve got left now is to send the data to ODL:</p>

<p>{% codeblock lang:python %}
import requests
url = (&ldquo;<a href="http://localhost:8181/restconf">http://localhost:8181/restconf</a>&rdquo;
       &ldquo;/config/network-topology:network-topology&rdquo;
       &ldquo;/topology/topology-netconf/node&rdquo;
       &ldquo;/CSR1K/yang-ext:mount/ned:native&rdquo;
       &ldquo;/router&rdquo;)
headers = {&lsquo;Content-Type&rsquo;: &lsquo;application/xml&rsquo;}
result = requests.post(url, auth=(&lsquo;admin&rsquo;, &lsquo;admin&rsquo;), headers=headers, data=xml_string)
print result.status_code
{% endcodeblock  %}</p>

<p>The controller should have returned the status code <code>204 No Content</code>, meaning that configuration has been changed successfully.</p>

<h2>Verification</h2>

<p>Back at the IOS XE CLI we can see the new BGP configuration that has been pushed down from the controller.</p>

<p>{% codeblock lang:text %}
TEST#sh run | i router
router bgp 100
 bgp log-neighbor-changes
 neighbor 2.2.2.2 remote-as 65100
{% endcodeblock  %}</p>

<h2>More examples</h2>

<p>You can find a shorter version of the above procedure in my <a href="https://github.com/networkop/yang/tree/master/odl-101">ODL 101 repo</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to YANG Programming and RESTCONF on Cisco IOS XE]]></title>
    <link href="http://networkop.github.io/blog/2017/02/15/restconf-yang/"/>
    <updated>2017-02-15T00:00:00+00:00</updated>
    <id>http://networkop.github.io/blog/2017/02/15/restconf-yang</id>
    <content type="html"><![CDATA[<p>The sheer size of some of the YANG models can scare away even the bravest of network engineers. However, as it is with any programming language, the complexity is built out of a finite set of simple concepts. In this post we&rsquo;ll learn some of these concepts by building our own YANG model to program static IP routes on Cisco IOS XE.</p>

<!--more-->


<hr />

<p>  In the <a href="/blog/2017/01/25/netconf-intro/">previous post</a> I have demonstrated how to make changes to interface configuration of Cisco IOS XE device using the standard <strong>IETF</strong> model. In this post I&rsquo;ll show how to use Cisco&rsquo;s <strong>native</strong> YANG model to modify static IP routes. To make things even more interesting I&rsquo;ll use RESTCONF, an HTTP-based sibling of NETCONF.</p>

<h2>RESTCONF primer</h2>

<p><a href="https://www.rfc-editor.org/rfc/rfc8040.txt">RESTCONF</a> is a very close functional equivalent of NETCONF. Instead of SSH, RESTCONF relies on HTTP to interact with configuration data and operational state of the network device and encodes all exchanged data in either XML or JSON. RESTCONF borrows the idea of Create-Read-Update-Delete operations on resources from <a href="/blog/2016/01/01/rest-for-neteng/">REST</a> and maps them to YANG models and datastores. There is a direct relationship between NETCONF operations and RESTCONF HTTP verbs:</p>

<table>
<thead>
<tr>
<th> HTTP VERB </th>
<th> NETCONF OPERATION </th>
</tr>
</thead>
<tbody>
<tr>
<td> POST      </td>
<td> create            </td>
</tr>
<tr>
<td> PUT       </td>
<td> replace           </td>
</tr>
<tr>
<td> PATCH     </td>
<td> merge             </td>
</tr>
<tr>
<td> DELETE    </td>
<td> delete            </td>
</tr>
<tr>
<td> GET       </td>
<td> get/get-config    </td>
</tr>
</tbody>
</table>


<p>Both RESTfullness and the ability to encode data as JSON make RESTCONF a very attractive choice for application developers. In this post, for the sake of simplicity, we&rsquo;ll use Python CLI and <code>curl</code> to interact with RESTCONF API. In the upcoming posts I&rsquo;ll show how to implement the same functionality inside a simple Python library.</p>

<h2>Environment setup</h2>

<p>We&rsquo;ll pick up from where we left our environment in the <a href="/blog/2017/01/25/netconf-intro/">previous post</a> right after we&rsquo;ve configured a network interface. The following IOS CLI command enables RESTCONF&rsquo;s root URL at <code>http://192.168.145.51/restconf/api/</code></p>

<p>{% codeblock lang:text %}
CSR1k(config)#restconf
{% endcodeblock  %}</p>

<p>You can start exploring the structure of RESTCONF interface starting at the root URL by specifying resource names separated by &ldquo;/&rdquo;. For example, the following command will return all configuration from Cisco&rsquo;s native datastore.</p>

<p>{% codeblock lang:text %}
curl -v -k admin:admin <a href="http://192.168.145.51/restconfi/api/config/native?deep">http://192.168.145.51/restconfi/api/config/native?deep</a>
{% endcodeblock  %}</p>

<p>In order to get JSON instead of the default XML output the client should specify JSON media type <code>application/vnd.yang.datastore+json</code> and pass it in the <code>Accept</code> header.</p>

<h2>Writing a YANG model</h2>

<p><a href="/blog/2017/01/25/netconf-intro/">Normally</a>, you would expect to download the YANG model from the device itself. However IOS XE&rsquo;s NETCONF and RESTCONF support is so new that not all of the models are available. Specifically, Cisco&rsquo;s native YANG model for static routing cannot be found in either <a href="https://github.com/YangModels">Yang Github Repo</a> or the device itself (via <code>get_schema</code> RPC), which makes it a very good candidate for this post.</p>

<blockquote><p><strong>Update 13-02-2017</strong>: As it turned out, the model was right under my nose the whole time. It&rsquo;s called <code>ned</code> and encapsulates the whole of Cisco&rsquo;s native datastore. So think of everything that&rsquo;s to follow as a simple learning exercise, however the point I raise in the closing paragraph still stands.</p></blockquote>

<p>The first thing we need to do is get an understanding of the structure and naming convention of the YANG model. The simplest way to do that would be to make a change on the CLI and observe the result via RESTCONF.</p>

<h3>Retrieving running configuration data</h3>

<p>Let&rsquo;s start by adding the following static route to the IOS XE device:</p>

<p>{% codeblock lang:text %}
ip route 2.2.2.2 255.255.255.255 GigabitEthernet2
{% endcodeblock  %}</p>

<p>Now we can view the configured static route via RESTCONF:</p>

<p>{% codeblock lang:bash %}
curl -v -k -u admin:admin -H &ldquo;Accept: application/vnd.yang.data+json&rdquo; \
 <a href="http://192.168.145.51/restconf/api/config/native/ip/route?deep">http://192.168.145.51/restconf/api/config/native/ip/route?deep</a>
{% endcodeblock  %}</p>

<p>The returned output should look something like this:</p>

<p>{% codeblock lang:json %}
{ &ldquo;ned:route&rdquo;: {
    &ldquo;ip-route-interface-forwarding-list&rdquo;: [
      { &ldquo;prefix&rdquo;: &ldquo;2.2.2.2&rdquo;,
        &ldquo;mask&rdquo;: &ldquo;255.255.255.255&rdquo;,
        &ldquo;fwd-list&rdquo;: [ { &ldquo;fwd&rdquo;: &ldquo;GigabitEthernet2&rdquo; } ]
      }
    ]
  }
}
{% endcodeblock  %}</p>

<p>This JSON object gives us a good understanding of how the YANG model should look like. The root element <code>route</code> contains a list of IP prefixes, called <code>ip-route-interface-forwarding-list</code>. Each element of this list contains values for IP network and mask as well as the list of next-hops called <code>fwd-list</code>. Let&rsquo;s see how we can map this to YANG model concepts.</p>

<h3>Building a simple YANG model</h3>

<p>YANG <a href="https://tools.ietf.org/html/rfc6020">RFC</a> defines a number of data structures to model an XML tree. Let&rsquo;s first concentrate on the three most fundamental data structures that constitute the biggest part of any YANG model:</p>

<ul>
<li><strong>Container</strong> is a node of a tree with a unique name which encloses a set of child elements. In JSON it is mapped to a name/object pair <code>'name': {...}</code></li>
<li><strong>Leaf</strong> is a node which contains a value and does not contain any child elements. In JSON leaf is mapped to a single key/value pair <code>'name': 'value'</code></li>
<li><strong>List</strong> can be thought of as a table that contains a set rows (list entries). Each list entry can contain Leafs, Containers and other elements and can be uniquely identified by at least one Leaf element called a <code>key</code>. In JSON lists are encoded as name/arrays pairs containing JSON objects <code>'name': [{...}, {...}]</code></li>
</ul>


<p>Now let&rsquo;s see how we can describe the received data in terms of the above data structures:</p>

<ul>
<li>The value of the topmost <code>route</code> element is a JSON object, therefore it can only be mapped to a YANG container.</li>
<li>The value of <code>ip-route-interface-forwarding-list</code> is an array of JSON objects, therefore it must be a list.</li>
<li>The only entry of this list contains <code>prefix</code> and <code>mask</code> key/value pairs. Since they don&rsquo;t contain any child elements and their values are strings they can only be mapped to YANG leafs.</li>
<li>The third element, <code>fwd-list</code>, is another YANG list and so far contains a single next-hop value inside a YANG leaf called <code>fwd</code>.</li>
<li>Finally, since <code>fwd</code> is the only leaf in the <code>fwd-list</code> list, it must be that lists' key. The <code>ip-route-interface-forwarding-list</code> list will have both <code>prefix</code> and <code>mask</code> as its key values since their combination represents a unique IP destination.</li>
</ul>


<p>With all that in mind, this is how a skeleton of our YANG model will look like:</p>

<p>{% codeblock lang:json %}
module cisco-route-static {
  namespace &ldquo;<a href="http://cisco.com/ns/yang/ned/ios">http://cisco.com/ns/yang/ned/ios</a>&rdquo;;
  prefix ned;
  container route {
    list ip-route-interface-forwarding-list {
      key &ldquo;prefix mask&rdquo;;
      leaf prefix { type string; }
      leaf mask { type string; }
      list fwd-list {
        key &ldquo;fwd&rdquo;;
        leaf fwd { type string; }
      }
    }
  }
}
{% endcodeblock  %}</p>

<p>YANG&rsquo;s syntax is pretty light-weight and looks very similar to JSON. The topmost <code>module</code> defines the model&rsquo;s name and encloses all other elements. The first two statements are used to define XML namespace and prefix that I&rsquo;ve described in my <a href="/blog/2017/01/25/netconf-intro/">previous post</a>.</p>

<h3>Refactoring a YANG model</h3>

<p>At this stage the model can already be instantiated by <strong>pyang</strong> and <strong>pyangbind</strong>, however there&rsquo;s a couple of very important changes and additions that I wanted to make to demonstrate some of the other features of YANG.</p>

<p>The first of them is common IETF data types. So far in our model we&rsquo;ve assumed that prefix and mask can take <strong>any</strong> value in string format. But what if we wanted to check that the values we use are, in fact, the correctly-formatted IPv4 addresses and netmasks before sending them to the device? That is where IETF common data types come to the rescue. All what we need to do is add an import statement to define which model to use and we can start referencing them in our type definitions:</p>

<p>{% codeblock lang:json %}
&hellip;
import ietf-yang-types { prefix &ldquo;yang&rdquo;; }
import ietf-inet-types { prefix &ldquo;inet&rdquo;; }
&hellip;
leaf prefix { type inet:ipv4-address; }
leaf mask { type yang:dotted-quad; }
{% endcodeblock  %}</p>

<p>This solves the problem for the prefix part of a static route but how about its next-hop? Next-hops can be defined as either strings (representing an interface name) or IPv4 addresses. To make sure we can use either of these two types in the <code>fwd</code> leaf node we can define its type as a <code>union</code>. This built-in type is literally a union, a logical OR, of all its member elements. This is how we can change the <code>fwd</code> leaf definition:</p>

<p>{% codeblock lang:json %}
&hellip;
typedef ip-next-hop {
  type union {
    type inet:ipv4-address;
    type string;
  }
}
&hellip;
leaf fwd { type ip-next-hop; }
{% endcodeblock  %}</p>

<p>So far we&rsquo;ve been concentrating on the simplest form of a static route, which doesn&rsquo;t include any of the optional arguments. Let&rsquo;s add the leaf nodes for name, AD, tag, track and permanent options of the static route:</p>

<p>{% codeblock lang:json %}
&hellip;
leaf metric { type uint8; }
leaf name { type string; }
leaf tag { type uint8; }
leaf track { type uint8; }
leaf permanent { type empty; }
&hellip;
{% endcodeblock  %}</p>

<p>Since <strong>track</strong> and <strong>permanent</strong> options are mutually exclusive they should not appear in the configuration at the same time. To model that we can use the <code>choice</code> YANG statement. Let&rsquo;s remove the <strong>track</strong> and <strong>permanent</strong> leafs from the model and replace them with this:</p>

<p>{% codeblock lang:json %}
choice track-or-perm {
  leaf track { type uint8; }
  leaf permanent { type empty; }
}
{% endcodeblock  %}</p>

<p>And finally, we need to add an options for VRF. When VRF is defined the whole <code>ip-route-interface-forwarding-list</code> gets encapsulated inside a list called <code>vrf</code>. This list has just one more leaf element <code>name</code> which plays the role of this lists' key. In order to model this we can use another oft-used YANG concept called <code>grouping</code>. I like to think of it as a Python function, a reusable part of code that can be referenced multiple times by its name. Here are the final changes to our model to include the VRF support:</p>

<p>{% codeblock lang:json %}
grouping ip-route-list {
  list ip-route-interface-forwarding-list {
      &hellip;
  }
}
grouping vrf-grouping {
  list vrf {
    key &ldquo;name&rdquo;;
    leaf name { type string; }
    uses ip-route-list;
  }
}
container route {
  uses vrf-grouping;
  uses ip-route-list;
}
{% endcodeblock  %}</p>

<p>Each element in a YANG model is optional by default, which means that the <code>route</code> container can include any number of VRF and non-VRF routes. The full YANG model can be found <a href="https://github.com/networkop/yang/blob/master/yang-101/cisco-route-static.yang">here</a>.</p>

<h2>Modifying static route configuration</h2>

<p>Now let me demonstrate how to use our newly built YANG model to change the next-hop of an existing static route. Using <a href="https://github.com/mbj4668/pyang">pyang</a> we need to generate a Python module based on the YANG model.</p>

<p>{% codeblock lang:bash %}
pyang &ndash;plugindir $PYBINDPLUGIN -f pybind -o binding.py cisco-route-static.yang
{% endcodeblock  %}</p>

<p>From a Python shell, download the current static IP route configuration:</p>

<p>{% codeblock lang:python %}
import requests
url = &ldquo;<a href="http://">http://</a>{h}:{p}/restconf/api/config/native/ip/route?deep&rdquo;.format(h=&lsquo;192.168.145.51&rsquo;, p=&lsquo;80&rsquo;)
headers = {&lsquo;accept&rsquo;: &lsquo;application/vnd.yang.data+json&rsquo;}
result = requests.get(url, auth=(&lsquo;admin&rsquo;, &lsquo;admin&rsquo;), headers=headers)
current_json = result.text
{% endcodeblock  %}</p>

<p>Import the downloaded JSON into a YANG model instance:</p>

<p>{% codeblock lang:python %}
import binding
import pyangbind.lib.pybindJSON as pybindJSON
model = pybindJSON.loads_ietf(current_json, binding, &ldquo;cisco_route_static&rdquo;)
{% endcodeblock  %}</p>

<p>Delete the old next-hop and replace it with <strong>12.12.12.2</strong>:</p>

<p>{% codeblock lang:python %}
route = model.route.ip_route_interface_forwarding_list[&ldquo;2.2.2.2 255.255.255.255&rdquo;]
route.fwd_list.delete(&ldquo;GigabitEthernet2&rdquo;)
route.fwd_list.add(&ldquo;12.12.12.2&rdquo;)
{% endcodeblock  %}</p>

<p>Save the updated model in a JSON file with the help of a <a href="https://github.com/networkop/yang/blob/master/yang-101/helpers.py">write_file</a> function:</p>

<p>{% codeblock lang:python %}
json_data = pybindJSON.dumps(model, mode=&lsquo;ietf&rsquo;)
write_file(&lsquo;new_conf.json&rsquo;, json_data)
{% endcodeblock  %}</p>

<h2>Updating running configuration</h2>

<p>If we tried sending the <code>new_conf.json</code> file now, the device would have responded with an error:</p>

<p>{% codeblock lang:text %}
missing element: prefix in /ios:native/ios:ip/ios:route/ios:ip-route-interface-forwarding-list
{% endcodeblock  %}</p>

<p>In our JSON file the order of elements inside a JSON object can be different from what was defined in the YANG model. This is expected since one of the fundamental principles of JSON is that an object is an <strong>unordered</strong> collection of name/value pairs. However it looks like behind the scenes IOS XE converts JSON to XML before processing and expects all elements to come in a strict, predefined order. Fortunately, this <a href="https://github.com/CiscoDevNet/openconfig-getting-started/issues/4">bug</a> is already known and we can hope that Cisco will implement the fix for IOS XE soon. In the meantime, we&rsquo;re gonna have to resort to sending XML.</p>

<p>Following the procedure described in my <a href="/blog/2017/01/25/netconf-intro/">previous post</a>, we can use <strong>json2xml</strong> tool to convert our instance into an XML document. Here we hit another issue. Since <strong>json2xml</strong> was designed to produce a NETCONF-compliant XML, it wraps the payload inside a <strong>data</strong> or a <strong>config</strong> element. Thankfully, <strong>json2xml</strong> is a Python script and can be easily patched to produce a RESTCONF-compliant XML. The following is a diff between the original and the patched files</p>

<p>{% codeblock lang:text %}
408c409</p>

<h2>&lt;     if args.target not in [&ldquo;data&rdquo;, &ldquo;config&rdquo;]:</h2>

<blockquote><pre><code>if args.target not in ["data", "config", "restconf"]:
</code></pre>

<p>437c438,442</p>

<h2>&lt;     ET.ElementTree(root_el).write(outfile, encoding=&ldquo;utf-8&rdquo;, xml_declaration=True)</h2>

<pre><code>if args.target != 'restconf':
    ET.ElementTree(root_el).write(outfile, encoding="utf-8", xml_declaration=True)
else:
    ET.ElementTree(list(root_el)[0]).write(outfile, encoding="utf-8", xml_declaration=True)
</code></pre>

<p>{% endcodeblock  %}</p></blockquote>

<p>Instead of patching the original file, I&rsquo;ve applied the above changes to a local copy of the file. Once patched, the following commands should produce the needed XML.</p>

<p>{% codeblock lang:bash %}
pyang -f jtox -o static-route.jtox cisco-route-static.yang
./json2xml -t restconf -o new_conf.xml static-route.jtox new_conf.json
{% endcodeblock  %}</p>

<p>The final step would be to send the generated XML to the IOS XE device. Since we are replacing the old static IP route configuration we&rsquo;re gonna have to use HTTP PUT to overwrite the old data.</p>

<p>{% codeblock lang:bash %}
curl -v -k -u admin:admin -H &ldquo;Content-Type: application/vnd.yang.data+xml&rdquo; \
 -X PUT <a href="http://192.168.145.51/restconf/api/config/native/ip/route/">http://192.168.145.51/restconf/api/config/native/ip/route/</a> -d @new_conf.xml
{% endcodeblock  %}</p>

<h2>Verification</h2>

<p>Back at the IOS XE CLI we can see the new static IP route installed.
{% codeblock lang:text %}
TEST#sh run | i ip route
ip route 2.2.2.2 255.255.255.255 12.12.12.2
{% endcodeblock  %}</p>

<h2>More examples</h2>

<p>As always there are more examples available in my <a href="https://github.com/networkop/yang/tree/master/yang-101">YANG 101 repo</a></p>

<hr />

<p>The exercise we&rsquo;ve done in this post, though useful from a learning perspective, can come in very handy when dealing with vendors who forget or simply don&rsquo;t want to share their YANG models with their customers (I know of at least one vendor that would only publish tree representations of their YANG models). In the upcoming posts I&rsquo;ll show how to create a simple Python library to program static routes via RESTCONF and finally how to build an Ansible module to do that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With NETCONF and YANG on Cisco IOS XE]]></title>
    <link href="http://networkop.github.io/blog/2017/01/25/netconf-intro/"/>
    <updated>2017-01-25T00:00:00+00:00</updated>
    <id>http://networkop.github.io/blog/2017/01/25/netconf-intro</id>
    <content type="html"><![CDATA[<p>Everyone who has any interest in network automation inevitably comes across NETCONF and YANG. These technologies have mostly been implemented for and adopted by big telcos and service providers, while support in the enterprise/DC gear has been virtually non-existent. Things are starting to change now as NETCONF/YANG support has been introduced in the latest IOS XE software train. That&rsquo;s why I think it&rsquo;s high time I started another series of posts dedicated to YANG, NETCONF, RESTCONF and various open-source tools to interact with those interfaces.</p>

<!--more-->


<hr />

<p>To kick things off I will show how to use <a href="http://ncclient.readthedocs.io/en/latest/">ncclient</a> and <a href="https://github.com/mbj4668/pyang">pyang</a> to configure interfaces on Cisco IOS XE device. In order to make sure everyone is on the same page and to provide some reference points for the remaining parts of the post, I would first need to cover some basic theory about NETCONF, XML and YANG.</p>

<h2>NETCONF primer</h2>

<p>NETCONF is a network management protocol that runs over a secure transport (SSH, TLS etc.). It defines a set of commands (<abbr title="Remote Procedure Call">RPCs</abbr>) to change the state of a network device, however it does not define the structure of the exchanged information. The only requirement is for the payload to be a well-formed XML document. Effectively NETCONF provides a way for a network device to expose its API and in that sense it is very similar to <a href="/blog/2016/01/01/rest-for-neteng/">REST</a>. Here are some basic NETCONF operations that will be used later in this post:</p>

<ul>
<li><strong>hello</strong> - messages exchanged when the NETCONF session is being established, used to advertise the list of supported capabilities.</li>
<li><strong>get-config</strong> - used by clients to retrieve the configuration from a network device.</li>
<li><strong>edit-config</strong> - used by clients to edit the configuration of a network device.</li>
<li><strong>close-session</strong> - used by clients to gracefully close the NETCONF session.</li>
</ul>


<p>All of these standard NETCONF operations are implemented in <a href="http://ncclient.readthedocs.io/en/latest/">ncclient</a> Python library which is what we&rsquo;re going to use to talk to CSR1k.</p>

<h2>XML primer</h2>

<p>There are several ways to exchange structured data over the network. HTML, YAML, JSON and XML are all examples of structured data formats. XML encodes data elements in tags and nests them inside one another to create complex tree-like data structures. Thankfully we are not going to spend much time dealing with XML in this post, however there are a few basic concepts that might be useful for the overall understanding:</p>

<ul>
<li><strong>Root</strong> - Every XML document has one root element containing one or more child elements.</li>
<li><strong>Path</strong> - is a way of addressing a particular element inside a tree.</li>
<li><strong>Namespaces</strong> - provide name isolation for potentially duplicate elements. As we&rsquo;ll see later, the resulting XML document may be built from several YANG models and namespaces are required to make sure there are no naming conflicts between elements.</li>
</ul>


<p>The first two concepts are similar to paths in a Linux filesystem where all of the files are laid out in a tree-like structure with root partition at its top. Namespace is somewhat similar to a unique URL identifying a particular server on the network. Using namespaces you can address multiple unique <code>/etc/hosts</code> files by prepending the host address to the path.</p>

<p>As with other structured data formats, XML by itself does not define the structure of the document. We still need something to organise a set of XML tags, specify what is mandatory and what is optional and what are the value constraints for the elements. This is exactly what YANG is used for.</p>

<h2>YANG primer</h2>

<p>YANG was conceived as a human-readable way to model the structure of an XML document. Similar to a programming language it has some primitive data types (integers, boolean, strings), several basic data structures (containers, lists, leafs) and allows users to define their own data types. The goal is to be able to formally model any network device configuration.</p>

<p>Anyone who has ever used Ansible to <a href="http://networkop.co.uk/blog/2015/08/26/automating-network-build-p1/">generate text network configuration files</a> is familiar with network modelling. Coming up with a naming conventions for variables, deciding how to split them into different files, creating data structures for variables representing different parts of configuration are all a part of network modelling. YANG is similar to that kind of modelling, only this time the models are already created for you. There are three main sources of YANG models today:</p>

<ol>
<li><strong>Equipment Vendors</strong> create their own &ldquo;native&rdquo; models to interact with their devices.</li>
<li><strong>Standards bodies</strong> (e.g. IETF and IEEE) were supposed to be the driving force of model creation. However in reality they have managed to produce only a few models that cover basic functionality like interface configuration and routing. Half of these models are still in the &ldquo;DRAFT&rdquo; stage.</li>
<li><strong>OpenConfig</strong> working group was formed by major telcos and SPs to fill the gap left by IETF. OpenConfig has produced the most number of models so far ranging from LLDP and VLAN to segment routing and BGP configurations. Unfortunately these models are only supported by high-end SP gear and we can only hope that they will find their way into the lower-end part of the market.</li>
</ol>


<p>Be sure to check of these and many other YANG models on <a href="https://github.com/YangModels/yang">YangModels</a> Github repo.</p>

<h2>Environment setup</h2>

<p>My test environment consists of a single instance of Cisco CSR1k running IOS XE 16.04.01. For the sake of simplicity I&rsquo;m not using any network emulator and simply run it as a stand-alone VM inside VMWare Workstation. CSR1k has the following configuration applied:
{% codeblock lang:text %}
username admin privilege 15 secret admin
!
interface GigabitEthernet1
  ip address 192.168.145.51 255.255.255.0
  no shutdown
!
netconf-yang
{% endcodeblock  %}</p>

<p>The last command is all what&rsquo;s required to enable NETCONF/YANG support.</p>

<p>On the same hypervisor I have my development CentOS7 VM, which is connected to the same network as the first interface of CSR1k. My VM is able to ping and ssh into the CSR1k. We will need the following additional packages installed:</p>

<p>{% codeblock lang:bash %}
yum install openssl-devel python-devel python-pip gcc
pip install ncclient pyang pyangbind ipython
{% endcodeblock  %}</p>

<h2>Device configuration workflow</h2>

<p>The following workflow will be performed in both interactive Python shell (e.g. iPython) and Linux bash shell. The best way to follow along is to have two sessions opened, one with each of the shells. This will save you from having to rerun import statements every time you re-open a python shell.</p>

<h3>1. Discovering device capabilities</h3>

<p>The first thing you have to do with any NETCONF-capable device is discover its capabilities. We&rsquo;ll use ncclient&rsquo;s <a href="http://ncclient.readthedocs.io/en/latest/manager.html">manager</a> module to establish a session to CSR1k. Method <code>.connect()</code> of the manager object takes device IP, port and login credentials as input and returns a reference to a NETCONF session established with the device.</p>

<p>{% codeblock lang:python %}
from ncclient import manager</p>

<p>m = manager.connect(host=&lsquo;192.168.145.51&rsquo;, port=830, username=&lsquo;admin&rsquo;,
                    password=&lsquo;admin&rsquo;, device_params={&lsquo;name&rsquo;: &lsquo;csr&rsquo;})</p>

<p>print m.server_capabilities
{% endcodeblock  %}</p>

<p>When the session is established, server capabilities advertised in the <strong>hello</strong> message get saved in the <code>server_capabilities</code> variable. Last command should print a long list of all capabilities and supported YANG models.</p>

<h3>2. Obtaining YANG models</h3>

<p>The task we have set for ourselves is to configure an interface. CSR1k supports both native (Cisco-specific) and IETF-standard ways of doing it. In this post I&rsquo;ll show how to use the IETF models to do that. First we need to identify which model to use. Based on the discovered capabilities we can guess that <strong>ietf-ip</strong> could be used to configure IP addresses, so let&rsquo;s get this model first. One way to get a YANG model is to search for it on the Internet, and since its an IETF model, it most likely can be found in of the <a href="https://tools.ietf.org/html/rfc7277">RFCs</a>.
Another way to get it is to download it from the device itself. All devices supporting <a href="https://tools.ietf.org/html/rfc6022">RFC6022</a> must be able to send the requested model in response to the <code>get_schema</code> call. Let&rsquo;s see how we can download the <strong>ietf-ip</strong> YANG model:</p>

<p>{% codeblock lang:python %}
schema = m.get_schema(&lsquo;ietf-ip&rsquo;)
print schema
{% endcodeblock  %}</p>

<p>At this stage the model is embedded in the XML response and we still need to extract it and save it in a file. To do that we&rsquo;ll use python <code>lxml</code> library to parse the received XML document, pick the first child from the root of the tree (<strong>data</strong> element) and save it into a variable. A helper function <a href="https://github.com/networkop/yang/blob/master/helpers.py">write_file</a> simply saves the Python string contained in the <code>yang_text</code> variable in a file.</p>

<p>{% codeblock lang:python %}
import xml.etree.ElementTree as ET
root = ET.fromstring(schema.xml)
yang_text = list(root)[0].text
write_file(&lsquo;ietf-ip.yang&rsquo;, yang_text)
{% endcodeblock  %}</p>

<p>Back at the Linux shell we can now start using pyang. The most basic function of pyang is to convert the YANG model into one of the <a href="https://github.com/mbj4668/pyang#features">many supported formats</a>. For example, tree format can be very helpful for high-level understanding of the structure of a YANG model. It produces a tree-like representation of a YANG model and annotates element types and constraints using syntax described in <a href="https://tools.ietf.org/html/rfc7277#section-1.2">this RFC</a>.</p>

<p>{% codeblock lang:bash %}
$ pyang -f tree ietf-ip.yang | head -
module: ietf-ip
  augment /if:interfaces/if:interface:
    +&ndash;rw ipv4!
    |  +&ndash;rw enabled?      boolean
    |  +&ndash;rw forwarding?   boolean
    |  +&ndash;rw mtu?          uint16
    |  +&ndash;rw address* [ip]
    |  |  +&ndash;rw ip               inet:ipv4-address-no-zone
    |  |  +&ndash;rw (subnet)
    |  |     +&ndash;:(prefix-length)
{% endcodeblock  %}</p>

<p>From the output above we can see the <strong>ietf-ip</strong> augments or extends the <strong>interface</strong> model. It adds new configurable (rw) containers with a list of IP prefixes to be assigned to an interface. Another thing we can see is that this model cannot be used on its own, since it doesn&rsquo;t specify the name of the interface it augments. This model can only be used together with <code>ietf-interfaces</code> YANG model which models the basic interface properties like MTU, state and description. In fact <code>ietf-ip</code> relies on a number of YANG models which are specified as imports at the beginning of the model definition.</p>

<p>{% codeblock lang:text %}
module ietf-ip {
 namespace &ldquo;urn:ietf:params:xml:ns:yang:ietf-ip&rdquo;;
 prefix ip;
 import ietf-interfaces {
   prefix if;
 }
 import ietf-inet-types {
   prefix inet;
 }
 import ietf-yang-types {
   prefix yang;
 }
{% endcodeblock  %}</p>

<p>Each import statement specifies the model and the prefix by which it will be referred later in the document. These prefixes create a clear separation between namespaces of different models.</p>

<p>We would need to download all of these models and use them together with the <strong>ietf-ip</strong> throughout the rest of this post. Use the procedure described above to download the <strong>ietf-interfaces</strong>, <strong>ietf-inet-types</strong> and <strong>ietf-yang-types</strong> models.</p>

<h3>3. Instantiating YANG models</h3>

<p>Now we can use <a href="https://github.com/robshakir/pyangbind">pyangbind</a>, an extension to pyang, to build a Python module based on the downloaded YANG models and start building interface configuration. Make sure your <code>$PYBINDPLUGIN</code> variable is set like its described <a href="https://github.com/robshakir/pyangbind">here</a>.</p>

<p>{% codeblock lang:bash %}
pyang &ndash;plugindir $PYBINDPLUGIN -f pybind -o ietf_ip_binding.py ietf-ip.yang ietf-interfaces.yang ietf-inet-types.yang ietf-inet-types.yang
{% endcodeblock  %}</p>

<p>The resulting <code>ietf_ip_binding.py</code> is now ready for use inside the Python shell. Note that we import <code>ietf_interfaces</code> as this is the parent object for <code>ietf_ip</code>. The details about how to work with generated Python binding can be found on pyangbind&rsquo;s <a href="https://github.com/robshakir/pyangbind">Github page</a>.</p>

<p>{% codeblock lang:python %}
from ietf_ip_binding import ietf_interfaces
model = ietf_interfaces()
model.get()
{&lsquo;interfaces&rsquo;: {&lsquo;interface&rsquo;: {}}, &lsquo;interfaces-state&rsquo;: {&lsquo;interface&rsquo;: {}}}
{% endcodeblock  %}</p>

<p>To setup an IP address, we first need to create a model of an interface we&rsquo;re planning to manipulate. We can then use <code>.get()</code> on the model&rsquo;s instance to see the list of all configurable parameters and their defaults.</p>

<p>{% codeblock lang:python %}
new_interface = model.interfaces.interface.add(&lsquo;GigabitEthernet2&rsquo;)
new_interface.get()
{&lsquo;description&rsquo;: u'&lsquo;,
 'enabled&rsquo;: True,
 &lsquo;ipv4&rsquo;: {&lsquo;address&rsquo;: {},
  &lsquo;enabled&rsquo;: True,
  &lsquo;forwarding&rsquo;: False,
  &lsquo;mtu&rsquo;: 0,
  &lsquo;neighbor&rsquo;: {}},
 &lsquo;ipv6&rsquo;: {&lsquo;address&rsquo;: {},
  &lsquo;autoconf&rsquo;: {&lsquo;create-global-addresses&rsquo;: True,
   &lsquo;create-temporary-addresses&rsquo;: False,
   &lsquo;temporary-preferred-lifetime&rsquo;: 86400L,
   &lsquo;temporary-valid-lifetime&rsquo;: 604800L},
  &lsquo;dup-addr-detect-transmits&rsquo;: 1L,
  &lsquo;enabled&rsquo;: True,
  &lsquo;forwarding&rsquo;: False,
  &lsquo;mtu&rsquo;: 0L,
  &lsquo;neighbor&rsquo;: {}},
 &lsquo;link-up-down-trap-enable&rsquo;: u'&lsquo;,
 'name&rsquo;: u'GigabitEthernet2',
 &lsquo;type&rsquo;: u'&lsquo;}
{% endcodeblock  %}</p>

<p>The simples thing we can do is modify the interface description.</p>

<p>{% codeblock lang:python %}
new_interface.description = &lsquo;NETCONF-CONFIGURED PORT&rsquo;
new_interface.get()[&lsquo;description&rsquo;]
{% endcodeblock  %}</p>

<p>New objects are added by calling <code>.add()</code> on the parent object and passing unique key as an argument.</p>

<p>{% codeblock lang:python %}
ipv4_addr = new_interface.ipv4.address.add(&lsquo;12.12.12.2&rsquo;)
ipv4_addr.get()
{&lsquo;ip&rsquo;: u'12.12.12.2', &lsquo;netmask&rsquo;: u'&lsquo;, 'prefix-length&rsquo;: 0}
ipv4_addr.netmask = &lsquo;255.255.255.0&rsquo;
{% endcodeblock  %}</p>

<p>At the time of writing pyangbind only supported serialisation into JSON format which means we have to do a couple of extra steps to get the required XML. For now let&rsquo;s dump the contents of our interface model instance into a file.</p>

<p>{% codeblock lang:python %}
import pyangbind.lib.pybindJSON as pybindJSON
json_data = pybindJSON.dumps(model, mode=&lsquo;ietf&rsquo;)
write_file(&lsquo;new_interface.json&rsquo;,json_data)
print json_data
{% endcodeblock  %}</p>

<h3>4. Applying configuration changes</h3>

<p>Even though pyanbind does not support XML, it is possible to use <a href="https://github.com/mbj4668/pyang/wiki/XmlJson">other pyang plugins</a> to generate XML from JSON.</p>

<p>{% codeblock lang:bash %}
pyang -f jtox -o interface.jtox ietf-ip.yang ietf-interfaces.yang ietf-inet-types.yang ietf-yang-types.yang
json2xml -t config -o interface.xml interface.jtox interface.json
{% endcodeblock  %}</p>

<p>The resulting <code>interface.xml</code> file contains the XML document ready to be sent to the device. I&rsquo;ll use <a href="https://github.com/networkop/yang/blob/master/helpers.py">read_file</a> helper function to read its contents and save it into a variable. We should still have a NETCONF session opened from one of the previous steps and we&rsquo;ll use the <a href="https://tools.ietf.org/html/rfc6241#section-7.2">edit-config</a> RPC call to apply our changes to the running configuration of CSR1k.</p>

<p>{% codeblock lang:bash %}
xml = read_file(&lsquo;interface.xml&rsquo;)
reply = m.edit_config(target=&lsquo;running&rsquo;, config=xml)
print(&ldquo;Success? {}&rdquo;.format(reply.ok))
m.close_session()
{% endcodeblock  %}</p>

<p>If the change was applied successfully <code>reply.ok</code> should return <code>True</code> and we can close the session to the device.</p>

<h3>Verifying changes</h3>

<p>Going back to the CSR1k&rsquo;s CLI we should see our changes reflected in the running configuration:</p>

<p>{% codeblock lang:text %}
Router#sh run int gi 2
Building configuration&hellip;</p>

<p>Current configuration : 126 bytes
!
interface GigabitEthernet2
 description NETCONF-CONFIGURED PORT
 ip address 12.12.12.2 255.255.255.0
 negotiation auto
end
{% endcodeblock  %}</p>

<h3>All-in-one scripts</h3>

<p>Checkout <a href="https://github.com/networkop/yang">this</a> Github page for Python scripts that implement the above workflow in a more organised way.</p>

<hr />

<p>In this post I have merely scratched the surface of YANG modelling and network device programming. In the following posts I am planning to take a closer look at the RESTCONF interface, internal structure of a YANG model, Ansible integration and other YANG-related topics until I run out of interest. So until that happens&hellip; stay tuned.</p>
]]></content>
  </entry>
  
</feed>
