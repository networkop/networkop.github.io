<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sdn | Network-oriented programming]]></title>
  <link href="http://networkop.github.io/blog/categories/sdn/atom.xml" rel="self"/>
  <link href="http://networkop.github.io/"/>
  <updated>2018-01-02T13:28:01+00:00</updated>
  <id>http://networkop.github.io/</id>
  <author>
    <name><![CDATA[Michael Kashin]]></name>
    <email><![CDATA[mmkashin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Openstack SDN - OpenContrail With BGP VPN]]></title>
    <link href="http://networkop.github.io/blog/2018/01/02/os-contrail/"/>
    <updated>2018-01-02T00:00:00+00:00</updated>
    <id>http://networkop.github.io/blog/2018/01/02/os-contrail</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll show how to build a dockerized OpenStack and OpenContrail lab, integrate it with Juniper MX80 DC-GW and demonstrate one of Contrail&rsquo;s most interesting and unique features called BGP-as-a-Service.</p>

<!--more-->


<hr />

<p>Continuing on the trend started in my <a href="/blog/2017/12/15/os-odl-netvirt/">previous post about OpenDaylight</a>, I&rsquo;ll move on to the next open-source product that uses BGP VPNs for optimal North-South traffic forwarding. OpenContrail is one of the most popular SDN solutions for OpenStack. It was one of the first hybrid SDN solutions, offering both pure overlay and overlay/underlay integration. It is the default SDN platform of choice for Mirantis Cloud Platform, it has multiple large-scale deployments in companies like Workday and AT&amp;T. I, personally, don&rsquo;t have any production experience with OpenContrail, however my impression, based on what I&rsquo;ve heard and seen in the last 2-3 years that I&rsquo;ve been following Telco SDN space, is that OpenContrail is the most mature SDN platform for Telco NFVs not least because of its unique feature set.</p>

<p>During the time of production deployment at AT&amp;T, Contrail has added a lot of features required by Telco NFVs like QoS, VLAN trunking and BGP-as-a-service. My first acquaintance with BGPaaS took place when I started working on Telco DCs and I remember being genuinely shocked when I first saw the requirement for dynamic routing exchange with VNFs. To me this seemed to break one of the main rules of cloud networking - a VM is not to have any knowledge or interaction with the underlay. I gradually went though all stages of grief, all the way to acceptance and although it still feels &ldquo;wrong&rdquo; now, I can at least understand why it&rsquo;s needed and what are the pros/cons of different BGPaaS solutions.</p>

<h2>BGP-as-a-Service</h2>

<p>There&rsquo;s a certain range of VNFs that may require to advertise a set of IP addresses into the existing VPNs inside Telco network. The most notable example is PGW inside EPC. I won&rsquo;t pretend to be an expert in this field, but based on my limited understanding PGW needs to advertise IP networks into various customer VPNs, for example to connect private APNs to existing customer L3VPNs. Obviously, when this kind of network function gets virtualised, it still retains this requirement which now needs to be fulfilled by DC SDN.</p>

<p>This requirement catches a lot of big SDN vendors off guard and the best they come up with is connecting those VNFs, through VLANs, directly to underlay TOR switches. Although this solution is easy to implement, it has an incredible amount of drawbacks since a single VNF can now affect the stability of the whole POD or even the whole DC network. Some VNFs vendors also require BFD to monitor liveliness of those BGP sessions which, in case a L3 boundary is higher than the TOR, may create even a bigger number of issues on a POD spine.</p>

<p>There&rsquo;s a small range of SDN platforms that run a full routing stack on each compute node (e.g. Cumulus, Calico). These solutions are the best fit for this kind of scenarios since they allow BGP sessions to be established over a single hop (VNF <-> virtual switch). However they represent a small fraction of total SDN solutions space with majority of vendors implementing a much simpler OpenFlow or XMPP-based flow push model.</p>

<p>OpenContrail, as far as I know, is the only SDN controller that doesn&rsquo;t run a full routing stack on compute nodes but still fulfills this requirement in a very elegant way. When <a href="https://www.juniper.net/documentation/en_US/contrail3.2/topics/concept/bgp-as-a-service-overview.html">BGPaaS</a> is enabled for a particular VM&rsquo;s interface, controller programs vRouter to proxy BGP TCP connections coming to virtual network&rsquo;s default gateway IP and forward them to the controller. This way VNF thinks it peers with a next hop IP, however all BGP state and path computations still happen on the controller.</p>

<p>The diagram below depicts a sample implementation of BGPaaS using OpenContrail. VNF is connected to a vRouter using a dot1Q trunk interface (to allow multiple VRFs over a single vEth link). Each VRF has its own BGPaaS session setup to advertise network ranges (NET1-3) into customer VPNs. These BGP sessions get proxied to the controller which injects those prefixes into their respective VPNs. These updates are then sent to DC gateways using either a VPNv4/6 or EVPN and the traffic is forwarded through DC underlay with VPN segregation preserved by either an MPLS tag (for MPLSoGRE or MPLSoUDL encapsulation) or a VXLAN VNI.</p>

<p><img class="center" src="/images/contrail-bgpaas.png"></p>

<p>Now let me briefly go over the lab that I&rsquo;ve built to showcase the BGPaaS and DC-GW integration features.</p>

<h2>Lab setup overview</h2>

<p>OpenContrail follows a familiar pattern of DC SDN architecture with central controller orchestrating the work of multiple virtual switches. In case of OpenContrail, these switches are called vRouters and they communicate with controller using XMPP-based extension of BGP as described in <a href="https://www.ietf.org/archive/id/draft-ietf-l3vpn-end-system-06.txt">this RFC draft</a>. A very detailed description of its internal architecture is available on <a href="http://www.opencontrail.org/opencontrail-architecture-documentation/">OpenContrail&rsquo;s website</a> so it would be pointless to repeat all of this information here. That&rsquo;s why I&rsquo;ll concentrate on how to get things done rather then on the architectural aspects. However to get things started, I always like to have a clear picture of what I&rsquo;m trying to achieve. The below diagram depicts a high-level architecture of my lab setup. Although OpenContrail supports BGP VPNv4/6 with multiple dataplane encapsulations, in this post I&rsquo;ll use EVPN as the only control plane protocol to communicate with MX80 and use VXLAN encapsulation in the dataplane.</p>

<p><img class="center" src="/images/contrail-lab.png"></p>

<p>EVPN as a DC-GW integration protocol is relatively new to OpenContrail and comes with a few limitations. One of them is the absence of EVPN type-5 routes, which means I can&rsquo;t use it in the same way I did in <a href="/blog/2017/12/15/os-odl-netvirt/">OpenDaylight&rsquo;s case</a>. Instead I&rsquo;ll demonstrate a DC-GW IRB scenario, which extends the existing virtual network to a DC-GW and makes IRB/SVI interface on that DC-GW act as a default gateway for this network. This is a very common scenario for L2 DCI and active-active DC deployment models. To demonstrate this scenario I&rsquo;m going to setup a single OpenStack virtual network with a couple of VMs whose gateway will reside on MX80. Since I only have a single OpenStack instance and a single MX80, I&rsquo;ll setup one half of L2 DCI and setup a mutual redistribution to make our overlay network reachable from MX80&rsquo;s global routing table.</p>

<p><img class="center" src="/images/contrail-overlay.png"></p>

<h2>All-in-one VM setup</h2>

<p>Physically, my lab will consist of a single hypervisor running an all-in-one VM with <a href="https://docs.openstack.org/kolla/latest/">kolla-openstack</a> and <a href="https://github.com/Juniper/contrail-docker/wiki/OpenContrail-Kolla">kolla-contrail</a> and a physical Juniper MX80 playing the role of a DC-GW.</p>

<p><img class="center" src="/images/contrail-setup.png"></p>

<p>OpenContrail&rsquo;s <a href="https://github.com/Juniper/contrail-docker/wiki/OpenContrail-Kolla">kolla github page</a> contains a set of instructions to setup the environment. As usual, I have automated all of these steps which can be setup from a hypervisor with the following commands:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/networkop/kolla-odl-bgpvpn&quot;</span>&gt;https://github.com/networkop/kolla-odl-bgpvpn&lt;/a&gt; <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="nb">cd </span>kolla-odl-bgpvpn
</span><span class='line'>./1-create.sh <span class="k">do</span>
</span><span class='line'>./2-contrail.sh <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>OpenStack setup</h2>

<p>Once installation is complete and all docker containers are up and running, we can setup the OpenStack side of our test environment. The script below will do the following:</p>

<ol>
<li>Download cirros and CumulusVX images and upload them to Glance</li>
<li>Create a virtual network</li>
<li>Update security rules to allow inbound ICMP and SSH connections</li>
<li>Create a pair of VMs - one based on cirros and one based on CumulusVX image</li>
</ol>


<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -L -o ./cirros &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img&quot;</span>&gt;http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img&lt;/a&gt;
</span><span class='line'>curl -L -o ./cumulusVX &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://cumulusfiles.s3.amazonaws.com/cumulus-linux-3.5.0-vx-amd64.qcow2&quot;</span>&gt;http://cumulusfiles.s3.amazonaws.com/cumulus-linux-3.5.0-vx-amd64.qcow2&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;openstack image create <span class="p">&amp;</span>ndash<span class="p">;</span>disk-format qcow2 <span class="p">&amp;</span>ndash<span class="p">;</span>container-format bare <span class="p">&amp;</span>ndash<span class="p">;</span>public <span class="se">\</span>
</span><span class='line'><span class="p">&amp;</span>ndash<span class="p">;</span>property <span class="nv">os_type</span><span class="o">=</span>linux <span class="p">&amp;</span>ndash<span class="p">;</span>file ./cirros cirros
</span><span class='line'>rm ./cirros&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;openstack image create <span class="p">&amp;</span>ndash<span class="p">;</span>disk-format qcow2 <span class="p">&amp;</span>ndash<span class="p">;</span>container-format bare <span class="p">&amp;</span>ndash<span class="p">;</span>public <span class="se">\</span>
</span><span class='line'><span class="p">&amp;</span>ndash<span class="p">;</span>property <span class="nv">os_type</span><span class="o">=</span>linux <span class="p">&amp;</span>ndash<span class="p">;</span>file ./cumulusVX cumulus
</span><span class='line'>rm ./cumulusVX&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;openstack network create <span class="p">&amp;</span>ndash<span class="p">;</span>provider-network-type vxlan irb-net&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;openstack subnet create <span class="p">&amp;</span>ndash<span class="p">;</span>subnet-range 10.0.100.160/27 <span class="p">&amp;</span>ndash<span class="p">;</span>network irb-net <span class="se">\</span>
</span><span class='line'>      <span class="p">&amp;</span>ndash<span class="p">;</span>host-route <span class="nv">destination</span><span class="o">=</span>0.0.0.0/0,gateway<span class="o">=</span>10.0.100.190 <span class="se">\</span>
</span><span class='line'>      <span class="p">&amp;</span>ndash<span class="p">;</span>gateway 10.0.100.161 <span class="p">&amp;</span>ndash<span class="p">;</span>dns-nameserver 8.8.8.8 irb-subnet&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;openstack flavor create <span class="p">&amp;</span>ndash<span class="p">;</span>id <span class="m">1</span> <span class="p">&amp;</span>ndash<span class="p">;</span>ram <span class="m">256</span> <span class="p">&amp;</span>ndash<span class="p">;</span>disk <span class="m">1</span> <span class="p">&amp;</span>ndash<span class="p">;</span>vcpus <span class="m">1</span> m1.nano
</span><span class='line'>openstack flavor create <span class="p">&amp;</span>ndash<span class="p">;</span>id <span class="m">2</span> <span class="p">&amp;</span>ndash<span class="p">;</span>ram <span class="m">512</span> <span class="p">&amp;</span>ndash<span class="p">;</span>disk <span class="m">10</span> <span class="p">&amp;</span>ndash<span class="p">;</span>vcpus <span class="m">1</span> m1.tiny&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ADMIN_PROJECT_ID<span class="o">=</span><span class="k">$(</span>openstack project show <span class="p">&amp;</span>lsquo<span class="p">;</span>admin<span class="p">&amp;</span>rsquo<span class="p">;</span> -f value -c id<span class="k">)</span>
</span><span class='line'><span class="nv">ADMIN_SEC_GROUP</span><span class="o">=</span><span class="k">$(</span>openstack security group list <span class="p">&amp;</span>ndash<span class="p">;</span>project <span class="k">${</span><span class="nv">ADMIN_PROJECT_ID</span><span class="k">}</span> <span class="p">|</span> awk <span class="p">&amp;</span>lsquo<span class="p">;</span>/ default / <span class="o">{</span>print <span class="nv">$2</span><span class="o">}</span><span class="p">&amp;</span>rsquo<span class="p">;</span><span class="k">)</span>
</span><span class='line'>openstack security group rule create <span class="p">&amp;</span>ndash<span class="p">;</span>ingress <span class="p">&amp;</span>ndash<span class="p">;</span>ethertype IPv4 <span class="se">\</span>
</span><span class='line'>    <span class="p">&amp;</span>ndash<span class="p">;</span>protocol icmp <span class="k">${</span><span class="nv">ADMIN_SEC_GROUP</span><span class="k">}</span>
</span><span class='line'>openstack security group rule create <span class="p">&amp;</span>ndash<span class="p">;</span>ingress <span class="p">&amp;</span>ndash<span class="p">;</span>ethertype IPv4 <span class="se">\</span>
</span><span class='line'>    <span class="p">&amp;</span>ndash<span class="p">;</span>protocol tcp <span class="p">&amp;</span>ndash<span class="p">;</span>dst-port <span class="m">22</span> <span class="k">${</span><span class="nv">ADMIN_SEC_GROUP</span><span class="k">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;openstack server create <span class="p">&amp;</span>ndash<span class="p">;</span>image cirros <span class="p">&amp;</span>ndash<span class="p">;</span>flavor m1.nano <span class="p">&amp;</span>ndash<span class="p">;</span>net irb-net VM1
</span><span class='line'>openstack server create <span class="p">&amp;</span>ndash<span class="p">;</span>image cumulus <span class="p">&amp;</span>ndash<span class="p">;</span>flavor m1.tiny <span class="p">&amp;</span>ndash<span class="p">;</span>net irb-net VR1
</span></code></pre></td></tr></table></div></figure></p>

<p>The only thing worth noting in the above script is that a default gateway <code>10.0.100.161</code> gets overridden by a default host route pointing to <code>10.0.100.190</code>. Normally, to demonstrate DC-GW IRB scenario, I would have setup a gateway-less L2 only subnet, however in that case I wouldn&rsquo;t have been able to demonstrate BGPaaS on the same network, since this feature relies on having a gateway IP setup (which later acts as a BGP session termination endpoint). So instead of setting up two separate networks I&rsquo;ve decided to implement this hack to minimise the required configuration.</p>

<h2>EVPN integration with MX80</h2>

<p>DC-GW integration procedure is very simple and requires only a few simple steps:</p>

<ol>
<li>Make sure VXLAN VNI is matched on both ends</li>
<li>Configure import/export route targets</li>
<li>Setup BGP peering with DC-GW</li>
</ol>


<p>All of these steps can be done very easily through OpenContrail&rsquo;s GUI. However as I&rsquo;ve mentioned before, I always prefer to use API when I have a chance and in this case I even have a python library for OpenContrail&rsquo;s REST API available on Juniper&rsquo;s <a href="https://github.com/Juniper/contrail-python-api">github page</a>, which I&rsquo;m going to use below to implement the above three steps.</p>

<h3>Configuration</h3>

<p>Before we can begin working with OpenContrail&rsquo;s API, we need to authenticate with the controller and get a REST API connection handler.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pycontrail.client</span> <span class="kn">as</span> <span class="nn">client</span>
</span><span class='line'><span class="n">CONTRAIL_API</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://10.0.100.140:8082&quot;</span><span class="o">&gt;</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="mf">10.0</span><span class="o">.</span><span class="mf">100.140</span><span class="p">:</span><span class="mi">8082</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">AUTH_URL</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://10.0.100.140:5000/v2.0&quot;</span><span class="o">&gt;</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="mf">10.0</span><span class="o">.</span><span class="mf">100.140</span><span class="p">:</span><span class="mi">5000</span><span class="o">/</span><span class="n">v2</span><span class="o">.</span><span class="mi">0</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">AUTH_PARAMS</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nb">type</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">keystone</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">username</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">admin</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">password</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">mypassword</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">tenant_name</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">admin</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">auth_url</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="n">AUTH_URL</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">conn</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">CONTRAIL_API</span><span class="p">,</span><span class="n">auth_params</span><span class="o">=</span><span class="n">AUTH_PARAMS</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The first thing I&rsquo;m going to do is override the default VNI setup by OpenContrail for <code>irb-net</code> to a pre-defined value of <code>5001</code>. To do that I first need to get a handler for <code>irb-net</code> object and extract the <code>virtual_network_properties</code> object containing a <code>vxlan_network_identifier</code> property. Once it&rsquo;s overridden, I just need to update the parent <code>irb-net</code> object to apply the change to the running configuration on the controller.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">irb_net</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">virtual_network_read</span><span class="p">(</span><span class="n">fq_name</span> <span class="o">=</span> <span class="p">[</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">default</span><span class="o">-</span><span class="n">domain</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">admin</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="p">,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">irb</span><span class="o">-</span><span class="n">net</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span> <span class="p">)</span>
</span><span class='line'><span class="n">vni_props</span><span class="o">=</span><span class="n">irb_net</span><span class="o">.</span><span class="n">get_virtual_network_properties</span><span class="p">()</span>
</span><span class='line'><span class="n">vni_props</span><span class="o">.</span><span class="n">set_vxlan_network_identifier</span><span class="p">(</span><span class="mi">5001</span><span class="p">)</span>
</span><span class='line'><span class="n">irb_net</span><span class="o">.</span><span class="n">set_virtual_network_properties</span><span class="p">(</span><span class="n">vni_props</span><span class="p">)</span>
</span><span class='line'><span class="n">conn</span><span class="o">.</span><span class="n">virtual_network_update</span><span class="p">(</span><span class="n">irb_net</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The next thing I need to do is explicitly set the import/export route-target properties for the <code>irb-net</code> object. This will require a new <code>RouteTargetList</code> object which then gets referenced by a <code>route_target_list</code> property of the <code>irb-net</code> object.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pycontrail</span> <span class="kn">import</span> <span class="n">types</span> <span class="k">as</span> <span class="n">t</span>
</span><span class='line'><span class="n">new_rtl</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">RouteTargetList</span><span class="p">([</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">target</span><span class="p">:</span><span class="mi">200</span><span class="p">:</span><span class="mi">200</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;])</span>
</span><span class='line'><span class="n">irb_net</span><span class="o">.</span><span class="n">set_route_target_list</span><span class="p">(</span><span class="n">new_rtl</span><span class="p">)</span>
</span><span class='line'><span class="n">conn</span><span class="o">.</span><span class="n">virtual_network_update</span><span class="p">(</span><span class="n">irb_net</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The final step is setting up a peering with MX80. The main object that needs to be created is <code>BgpRouter</code>, which contains a pointer to BGP session parameters object with session-specific values like ASN and remote peer IP. BGP router is defined in a global context (default domain and default project) which will make it available to all configured virtual networks.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pycontrail</span> <span class="kn">import</span> <span class="n">types</span> <span class="k">as</span> <span class="n">t</span>
</span><span class='line'><span class="n">ctx</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">default</span><span class="o">-</span><span class="n">domain</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">default</span><span class="o">-</span><span class="n">project</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">ip</span><span class="o">-</span><span class="n">fabric</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">default</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">rsquo</span><span class="p">;]</span>
</span><span class='line'><span class="n">af</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">AddressFamilies</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">inet</span><span class="o">-</span><span class="n">vpn</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">e</span><span class="o">-</span><span class="n">vpn</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;])</span>
</span><span class='line'><span class="n">bgp_params</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">BgpRouterParams</span><span class="p">(</span><span class="n">vendor</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Juniper</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> \
</span><span class='line'>                               <span class="n">autonomous_system</span><span class="o">=</span><span class="mi">65411</span><span class="p">,</span> \
</span><span class='line'>                               <span class="n">address</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mf">10.0</span><span class="o">.</span><span class="mf">101.15</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> \
</span><span class='line'>                               <span class="n">address_families</span><span class="o">=</span><span class="n">af</span><span class="p">)</span>
</span><span class='line'><span class="n">vrf</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">routing_instance_read</span><span class="p">(</span><span class="n">fq_name</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">)</span>
</span><span class='line'><span class="n">bgp_router</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">BgpRouter</span><span class="p">(</span><span class="n">name</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">MX80</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">display_name</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">MX80</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> \
</span><span class='line'>                         <span class="n">bgp_router_parameters</span><span class="o">=</span><span class="n">bgp_params</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">parent_obj</span><span class="o">=</span><span class="n">vrf</span><span class="p">)</span>
</span><span class='line'><span class="n">contrail</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">bgp_router_read</span><span class="p">(</span><span class="n">fq_name</span> <span class="o">=</span> <span class="n">ctx</span> <span class="o">+</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">controller</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;])</span>
</span><span class='line'><span class="n">bgp_router</span><span class="o">.</span><span class="n">set_bgp_router</span><span class="p">(</span><span class="n">contrail</span><span class="p">,</span><span class="n">t</span><span class="o">.</span><span class="n">BgpPeeringAttributes</span><span class="p">())</span>
</span><span class='line'><span class="n">conn</span><span class="o">.</span><span class="n">bgp_router_create</span><span class="p">(</span><span class="n">bgp_router</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>For the sake of brevity, I will not cover MX80&rsquo;s configuration in details and simply include it here for reference with some minor explanatory comments.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Interface and global settings configuration&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;set interfaces irb unit <span class="m">5001</span> family inet address 10.0.100.190/27
</span><span class='line'><span class="nb">set </span>interfaces lo0 unit <span class="m">0</span> family inet address 10.0.101.15/32
</span><span class='line'><span class="nb">set </span>routing-options router-id 10.0.101.15
</span><span class='line'><span class="nb">set </span>routing-options autonomous-system 65411&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Setup BGP peering with OpenContrail&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;set protocols bgp group CONTRAIL multihop
</span><span class='line'><span class="nb">set </span>protocols bgp group CONTRAIL <span class="nb">local</span>-address 10.0.101.15
</span><span class='line'><span class="nb">set </span>protocols bgp group CONTRAIL family inet-vpn unicast
</span><span class='line'><span class="nb">set </span>protocols bgp group CONTRAIL family evpn signaling
</span><span class='line'><span class="nb">set </span>protocols bgp group CONTRAIL peer-as 64512
</span><span class='line'><span class="nb">set </span>protocols bgp group CONTRAIL neighbor 10.0.100.140&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Setup EVPN instance <span class="nb">type </span>with IRB interface and matching RT and VNI&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;set routing-instances EVPN-L2-IRB vtep-source-interface lo0.0
</span><span class='line'><span class="nb">set </span>routing-instances EVPN-L2-IRB instance-type evpn
</span><span class='line'><span class="nb">set </span>routing-instances EVPN-L2-IRB vlan-id 501
</span><span class='line'><span class="nb">set </span>routing-instances EVPN-L2-IRB routing-interface irb.5001
</span><span class='line'><span class="nb">set </span>routing-instances EVPN-L2-IRB vxlan vni 5001
</span><span class='line'><span class="nb">set </span>routing-instances EVPN-L2-IRB route-distinguisher 200:200
</span><span class='line'><span class="nb">set </span>routing-instances EVPN-L2-IRB vrf-target target:200:200
</span><span class='line'><span class="nb">set </span>routing-instances EVPN-L2-IRB protocols evpn encapsulation vxlan&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Setup VRF instance with IRB interface&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;set routing-instances EVPN-L3-IRB instance-type vrf
</span><span class='line'><span class="nb">set </span>routing-instances EVPN-L3-IRB interface irb.5001
</span><span class='line'><span class="nb">set </span>routing-instances EVPN-L3-IRB route-distinguisher 201:200
</span><span class='line'><span class="nb">set </span>routing-instances EVPN-L3-IRB vrf-target target:200:200&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Setup route redistribution between EVPN and Global VRFs&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;set routing-options rib-groups CONTRAIL-TO-GLOBAL import-rib EVPN-L3-IRB.inet.0
</span><span class='line'><span class="nb">set </span>routing-options rib-groups CONTRAIL-TO-GLOBAL import-rib inet.0
</span><span class='line'><span class="nb">set </span>routing-options rib-groups GLOBAL-TO-CONTRAIL import-rib inet.0
</span><span class='line'><span class="nb">set </span>routing-options rib-groups GLOBAL-TO-CONTRAIL import-rib EVPN-L3-IRB.inet.0
</span><span class='line'><span class="nb">set </span>routing-options interface-routes rib-group inet CONTRAIL-TO-GLOBAL
</span><span class='line'><span class="nb">set </span>routing-instances EVPN-L3-IRB routing-options interface-routes rib-group inet CONTRAIL-TO-GLOBAL
</span><span class='line'><span class="nb">set </span>protocols bgp group EXTERNAL-BGP family inet unicast rib-group GLOBAL-TO-CONTRAIL
</span></code></pre></td></tr></table></div></figure></p>

<h3>Verification</h3>

<p>The easiest way to verify that BGP peering has been established is to query OpenContrail&rsquo;s introspection API:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl  -s &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://10.0.100.140:8083/Snh_BgpNeighborReq?ip_address=10.0.101.15&quot;</span>&gt;http://10.0.100.140:8083/Snh_BgpNeighborReq?ip_address<span class="o">=</span>10.0.101.15&lt;/a&gt; <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>  xmllint <span class="p">&amp;</span>ndash<span class="p">;</span>xpath <span class="p">&amp;</span>lsquo<span class="p">;</span>/BgpNeighborListResp/neighbors<span class="o">[</span>1<span class="o">]</span>/list/BgpNeighborResp/state<span class="p">&amp;</span>rsquo<span class="p">;</span> -
</span><span class='line'>&lt;state <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;string&quot;</span> <span class="nv">identifier</span><span class="o">=</span><span class="s2">&quot;8&quot;</span>&gt;Established&lt;/state&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>Datapath verification can be done from either side, in this case I&rsquo;m showing a ping from MX80&rsquo;s global VRF towards one of the OpenStack VMs:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>admin@MX80&gt; ping 10.0.100.164 count 2
</span><span class='line'>PING 10.0.100.164 <span class="o">(</span>10.0.100.164<span class="o">)</span>: <span class="m">56</span> data bytes
</span><span class='line'><span class="m">64</span> bytes from 10.0.100.164: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nb">time</span><span class="o">=</span>3.836 ms
</span><span class='line'><span class="m">64</span> bytes from 10.0.100.164: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nb">time</span><span class="o">=</span>3.907 ms&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="p">&amp;</span>mdash<span class="p">;</span> 10.0.100.164 ping statistics <span class="p">&amp;</span>mdash<span class="p">;</span>
</span><span class='line'><span class="m">2</span> packets transmitted, <span class="m">2</span> packets received, 0% packet loss
</span><span class='line'>round-trip min/avg/max/stddev <span class="o">=</span> 3.836/3.872/3.907/0.035 ms
</span></code></pre></td></tr></table></div></figure></p>

<h2>BGP-as-a-Service</h2>

<p>To keep things simple I will not use multiple dot1Q interfaces and setup a BGP peering with CumulusVX over a normal, non-trunk interface. From CumulusVX I will inject a loopback IP <code>1.1.1.1/32</code> into the <code>irb-net</code> network. Since REST API python library I&rsquo;ve used above is two major releases behind the current version of OpenContrail, it cannot be used to setup BGPaaS feature. Instead I will demonstrate how to use REST API directly from the command line of all-in-one VM using cURL.</p>

<h3>Configuration</h3>

<p>In order to start working with OpenContrail&rsquo;s API, I first need to obtain an authentication token from OpenStack&rsquo;s keystone. With that token I can now query the list of IPs assigned to all OpenStack instances and pick the one assigned to CumulusVX. I need the UUID of that particular IP address in order to extract the ID of the VM interface this IP is assigned to.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> /etc/kolla/admin-openrc.sh
</span><span class='line'><span class="nv">TOKEN</span><span class="o">=</span><span class="k">$(</span>openstack token issue -f value -c id<span class="k">)</span>
</span><span class='line'><span class="nv">CONTRAIL_AUTH</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>X-AUTH-TOKEN: <span class="nv">$TOKEN</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="nv">CTYPE</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>Content-Type: application/json<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>UTF-8<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>curl -H <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$CONTRAIL_AUTH</span><span class="p">&amp;</span>rdquo<span class="p">;</span> &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://10.0.100.140:8082/instance-ips&quot;</span>&gt;http://10.0.100.140:8082/instance-ips&lt;/a&gt; <span class="p">|</span> jq
</span><span class='line'><span class="nv">VMI_ID</span><span class="o">=</span><span class="k">$(</span>curl -H <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$CONTRAIL_AUTH</span><span class="p">&amp;</span>rdquo<span class="p">;</span> &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://10.0.100.140:8082/instance-ip/2e7987be-3f53-4296-905a-0c64793307a9&quot;</span>&gt;http://10.0.100.140:8082/instance-ip/2e7987be-3f53-4296-905a-0c64793307a9&lt;/a&gt; <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>         jq <span class="p">&amp;</span>lsquo<span class="p">;</span>.<span class="o">[</span><span class="p">&amp;</span>ldquo<span class="p">;</span>instance-ip<span class="p">&amp;</span>rdquo<span class="p">;</span><span class="o">]</span> .virtual_machine_interface_refs<span class="o">[</span>0<span class="o">]</span>.uuid<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="k">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>With VM interface ID saved in a <code>VMI_ID</code> variable I can create a BGPaaS service and link it to that particular VM interface.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat <span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;</span> EOF &gt; ./bgpaas.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>bgp-as-a-service<span class="p">&amp;</span>rdquo<span class="p">;</span>:
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>fq_name<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">[</span><span class="p">&amp;</span>ldquo<span class="p">;</span>default-domain<span class="p">&amp;</span>rdquo<span class="p">;</span>, <span class="p">&amp;</span>ldquo<span class="p">;</span>admin<span class="p">&amp;</span>rdquo<span class="p">;</span>, <span class="p">&amp;</span>ldquo<span class="p">;</span>cumulusVX-bgp<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">]</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>autonomous_system<span class="p">&amp;</span>rdquo<span class="p">;</span>: 321,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>bgpaas_session_attributes<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>address_families<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{</span><span class="p">&amp;</span>ldquo<span class="p">;</span>family<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">[</span><span class="p">&amp;</span>ldquo<span class="p">;</span>inet<span class="p">&amp;</span>rdquo<span class="p">;</span><span class="o">]</span> <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>parent_type<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>project<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>virtual_machine_interface_refs<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">[{</span>
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>attr<span class="p">&amp;</span>rdquo<span class="p">;</span>: null,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>to<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">[</span><span class="p">&amp;</span>ldquo<span class="p">;</span>default-domain<span class="p">&amp;</span>rdquo<span class="p">;</span>, <span class="p">&amp;</span>ldquo<span class="p">;</span>admin<span class="p">&amp;</span>rdquo<span class="p">;</span>, <span class="k">${</span><span class="nv">VMI_ID</span><span class="k">}</span><span class="o">]</span>
</span><span class='line'>            <span class="o">}]</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>bgpaas-shared<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="nb">false</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>bgpaas-ip-address<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>10.0.100.164<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>EOF&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;curl -X POST -H <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$CONTRAIL_AUTH</span><span class="p">&amp;</span>rdquo<span class="p">;</span> -H <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$CTYPE</span><span class="p">&amp;</span>rdquo<span class="p">;</span> -d @bgpaas.json &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://10.0.100.140:8082/bgp-as-a-services&quot;</span>&gt;http://10.0.100.140:8082/bgp-as-a-services&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>The final step is setting up a BGP peering on the CumulusVX side. CumulusVX configuration is very simple and self-explanatory. The BGP neighbor IP is the IP of virtual network&rsquo;s default gateway located on local vRouter.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>!
</span><span class='line'>interface lo
</span><span class='line'> ip address 1.1.1.1/32
</span><span class='line'>!
</span><span class='line'>router bgp 321
</span><span class='line'> neighbor 10.0.100.161 remote-as 64512
</span><span class='line'> !
</span><span class='line'> address-family ipv4 unicast
</span><span class='line'>  network 1.1.1.1/32
</span><span class='line'> <span class="nb">exit</span>-address-family
</span><span class='line'>!
</span></code></pre></td></tr></table></div></figure></p>

<h3>Verification</h3>

<p>Here&rsquo;s where we come across another limitation of EVPN. The loopback prefix <code>1.1.1.1/32</code> does not get injected into EVPN address family, however it does show up automatically in the VPNv4 address family which can be verified from the MX80:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>admin@MX80&gt; show route table bgp.l3vpn.0 hidden 1.1.1.1/32 extensive&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;bgp.l3vpn.0: <span class="m">6</span> destinations, <span class="m">6</span> routes <span class="o">(</span><span class="m">3</span> active, <span class="m">0</span> holddown, <span class="m">3</span> hidden<span class="o">)</span>
</span><span class='line'>10.0.100.140:2:1.1.1.1/32 <span class="o">(</span><span class="m">1</span> entry, <span class="m">0</span> announced<span class="o">)</span>
</span><span class='line'>         BGP    Preference: 170/-101
</span><span class='line'>                Route Distinguisher: 10.0.100.140:2
</span><span class='line'>                Next hop <span class="nb">type</span>: Unusable, Next hop index: 0
</span><span class='line'>                Next-hop reference count: 6
</span><span class='line'>                State: &lt;Hidden Ext ProtectionPath ProtectionCand&gt;
</span><span class='line'>                Local AS: <span class="m">65411</span> Peer AS: 64512
</span><span class='line'>                Age: 37:44
</span><span class='line'>                Validation State: unverified
</span><span class='line'>                Task: BGP_64512.10.0.100.140
</span><span class='line'>                AS path: <span class="m">64512</span> <span class="m">321</span> I
</span><span class='line'>                Communities: target:200:200 target:64512:8000003 encapsulation:unknown<span class="o">(</span>0x2<span class="o">)</span> encapsulation:mpls-in-udp<span class="o">(</span>0xd<span class="o">)</span> unknown <span class="nb">type </span><span class="m">8004</span> value fc00:7a1201 unknown <span class="nb">type </span><span class="m">8071</span> value fc00:1389
</span><span class='line'>                Import Accepted
</span><span class='line'>                VPN Label: 31
</span><span class='line'>                Localpref: 100
</span><span class='line'>                Router ID: 10.0.100.140
</span><span class='line'>                Secondary Tables: EVPN-L3-IRB.inet.0
</span><span class='line'>                Indirect next hops: 1
</span><span class='line'>                        Protocol next hop: 10.0.100.140
</span><span class='line'>                        Label operation: Push 31
</span><span class='line'>                        Label TTL action: prop-ttl
</span><span class='line'>                        Load balance label: Label 31: None<span class="p">;</span>
</span><span class='line'>                        Indirect next hop: 0x0 - INH Session ID: 0x0
</span></code></pre></td></tr></table></div></figure></p>

<p>It&rsquo;s hidden since I haven&rsquo;t configured MPLSoUDP <a href="https://www.juniper.net/documentation/en_US/junos/topics/example/example-next-hop-based-dynamic-mpls-udp-tunnel-configuring.html">dynamic tunnels</a> on MX80. However this proves that the prefix does get injected into customer VPNs and become available on all devices with the matching import route-target communities.</p>

<h2>Outro</h2>

<p>This post concludes Series 2 of my OpenStack SDN saga. I&rsquo;ve covered quite an extensive range of topics in my two-part series, however, OpenStack networking landscape is so big, it&rsquo;s simply impossible to cover everything I find interesting. I started writing about OpenStack SDN when I first learned I got a job with Nokia. Back then I knew little about VMware NSX and even less about OpenStack. That&rsquo;s why I started researching topics that I found interesting and branching out into adjacent areas as I went along. Almost 2 years later, looking back I can say I&rsquo;ve learned a lot about the internals of SDN in general and hopefully so have my readers. Now I&rsquo;m leaving Nokia to rediscover my networking roots at Arista. I&rsquo;ll dive into DC networking from a different perspective now and it may be awhile before I accumulate a critical mass of interesting material to start spilling it out in my blog again. I still may come back to OpenStack some day but for now I&rsquo;m gonna take a little break, maybe do some house keeping (e.g. move my blog from Jekyll to <a href="https://gohugo.io/">Hugo</a>, add TLS support) and enjoy my time being a farther.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenStack SDN - OpenDaylight With BGP VPN]]></title>
    <link href="http://networkop.github.io/blog/2017/12/15/os-odl-netvirt/"/>
    <updated>2017-12-15T00:00:00+00:00</updated>
    <id>http://networkop.github.io/blog/2017/12/15/os-odl-netvirt</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll demonstrate how to build a simple OpenStack lab with OpenDaylight-managed virtual networking and integrate it with a Cisco IOS-XE data centre gateway using EVPN.</p>

<!--more-->


<hr />

<p>For the last 5 years OpenStack has been the training ground for a lot of emerging DC SDN solutions. OpenStack integration use case was one of the most compelling and easiest to implement thanks to the limited and suboptimal implementation of the native networking stack. Today, in 2017, features like <a href="/blog/2016/05/06/neutron-l2pop/">L2 population</a>, local <a href="/blog/2016/05/06/neutron-l2pop/">ARP responder</a>, <a href="/blog/2016/05/21/neutron-l2gw/">L2 gateway integration</a>, <a href="/blog/2016/10/13/os-dvr/">distributed routing</a> and <a href="/blog/2017/09/15/os-sfc-skydive/">service function chaining</a> have all become available in vanilla OpenStack and don&rsquo;t require a proprietary SDN controller anymore. Admittedly, some of the features are still not (and may never be) implemented in the most optimal way (e.g. DVR). This is where new opensource SDN controllers, the likes of <a href="/blog/2016/12/10/ovn-part2/">OVN</a> and <a href="https://docs.openstack.org/developer/dragonflow/distributed_dragonflow.html">Dragonflow</a>, step in to provide scalable, elegant and efficient implementation of these advanced networking features. However one major feature still remains outside of the scope of a lot of these new opensource SDN projects, and that is data centre gateway (DC-GW) integration. Let me start by explain why you would need this feature in the first place.</p>

<h2>Optimal forwarding of North-South traffic</h2>

<p>OpenStack Neutron and VMware NSX, both being pure software solutions, rely on a special type of node to forward traffic between VMs and hosts outside of the data centre. This node acts as a L2/L3 gateway for all North-South traffic and is often implemented as either a VM or a network namespace. This kind of solution gives software developers greater independence from the underlying networking infrastructure which makes it easier for them to innovate and introduce new features.</p>

<p><img class="center" src="/images/sdn-ns.png"></p>

<p>However, from the traffic forwarding point of view, having a gateway/network node is not a good solution at all. There is no technological reason for a packet to have to go through this node when after all it ends up on a DC-GW anyway. In fact, this solution introduces additional complexity which needs to be properly managed (e.g. designed, configured and troubleshooted) and a potential bottleneck for high-throughput traffic flows.</p>

<p>It&rsquo;s clear that the most optimal way to forward traffic is directly from a compute node to a DC-GW. The only question is how can this optimal forwarding be achieved? SDN controller needs to be able to exchange reachability information with DC-GW using a common protocol understood by most of the existing routing stacks. One such protocol, becoming very common in DC environments, is BGP, which has two address families we can potentially use:</p>

<ol>
<li>VPNv4/6 will allow routes to be exchanged and the dataplance to use MPLSoGRE encapsulation. This should be considered a &ldquo;legacy&rdquo; approach since for a very long time DC-GWs did not have the VXLAN ecap/decap capabilities.</li>
<li>EVPN with VXLAN-based overlays. EVPN makes it possible to exchange both L2 and L3 information under the same AF, which means we have the flexibility of doing not only a L3 WAN integration, but also a L2 data centre interconnect with just a single protocol.</li>
</ol>


<p>In OpenStack specifically, BGPVPN project was created to provide a pluggable driver framework for 3rd party BGP implementations. Apart from a reference BaGPipe driver (BaGPipe is an ExaBGP fork with lightweight implementation of BGP VPNs), which relies on a default <code>openvswitch</code> ML2 mechanism driver, only Nuage, OpenDaylight and OpenContrail have contributed their drivers to this project. In this post I will focus on OpenDaylight and show how to install containerised OpenStack with OpenDaylight and integrate it with Cisco CSR using EVPN.</p>

<h2>OpenDaylight integration with OpenStack</h2>

<p>Historically, OpenDaylight has had multiple projects implementing custom OpenStack networking drivers:</p>

<ul>
<li><strong>VTN</strong> (Virtual Tenant Networking) - spearheaded by NEC was the first project to provide OpenStack networking implementation</li>
<li><strong>GBP</strong> (Group Based Policy) - a project led by Cisco, one of the first (if not THE first) commercial implementation of Intent-based networking</li>
<li><strong>NetVirt</strong> - currently a default Neutron plugin from ODL, developed jointly by Brocade (RIP), RedHat, Ericsson, Intel and many others.</li>
</ul>


<p>NetVirt provides several common Neutron services including L2 and L3 forwarding, ACL and NAT, as well as advanced services like L2 gateway, QoS and SFC. To do that it assumes full control over an OVS switch inside each compute node and implements the above services inside a single <code>br-int</code> OVS bridge. L2/L3 forwarding tables are built based on tenant IP/MAC addresses that have been allocated by Neutron and the current network topology. For high-level overview of NetVirt&rsquo;s forwarding pipeline you can refer to <a href="https://docs.google.com/presentation/d/15h4ZjPxblI5Pz9VWIYnzfyRcQrXYxA1uUoqJsgA53KM/edit#slide=id.g1c73ae9953_2_0">this document</a>.</p>

<p>It helps to think of an ODL-managed OpenStack as a big chassis switch. NetVirt plays the role of a supervisor by managing control plane and compiling RIB based on the information received from Neutron. Each compute node running an OVS is a linecard with VMs connected to its ports. Unlike the distributed architecture of <a href="/blog/2016/12/10/ovn-part2/">OVN</a> and Dragonflow, compute nodes do not contain any control plane elements and each OVS gets its FIB programmed directly by the supervisor. DC underlay is a backplane, interconnecting all linecards and a supervisor.</p>

<p><img class="center" src="/images/odl-netvirt-chassis.png"></p>

<h2>OpenDaylight BGP VPN service architecture</h2>

<p>In order to provide BGP VPN functionality, NetVirt employs the use of three service components:</p>

<ul>
<li><strong>FIB service</strong> - maintains L2/L3 forwarding tables and reacts to topology changes</li>
<li><strong>BGP manager</strong> - provides a translation of information sent to and received from an external BGP stack (Quagga BGP)</li>
<li><strong>VPN Manager</strong> - ties together the above two components, creates VRFs and keeps track of RD/RT values</li>
</ul>


<p>In order to exchange BGP updates with external DC-GW, NetVirt requires a BGP stack with EVPN and VPNV4/6 capabilities. Ideally, internal ODL BGP stack could have been used for that, however it didn&rsquo;t meet all the performance requirements (injecting/withdrawing thousand of prefixes at the same time). Instead, an external <a href="https://github.com/6WIND/quagga/tree/qthrift_mpbgp_evpn">Quagga fork</a> with EVPN add-ons is connected to BGP manager via a high-speed Apache Thrift interface. This interface defines the <a href="https://github.com/6WIND/quagga/blob/qthrift_mpbgp_evpn/qthriftd/vpnservice.thrift">format</a> of data to be exchanged between Quagga (a.k.a QBGP) and NetVirt&rsquo;s BGP Manager in order to do two things:</p>

<ol>
<li>Configure BGP settings like ASN and BGP neighbors</li>
<li>Read/Write RIB entries inside QBGP</li>
</ol>


<p>BGP session is established between QBGP and external DC-GW, however next-hop values installed by NetVirt and advertised by QBGP have IPs of the respective compute nodes, so that traffic is sent directly via the most optimal path.</p>

<p><img class="center" src="/images/odl-netvirt.png"></p>

<h2>Demo</h2>

<p>Enough of the theory, let&rsquo;s have a look at how to configure a L3VPN between QBGP (advertising ODL&rsquo;s distributed router subnets) and IOS-XE DC-GW using EVPN route type 5 or, more specifically, <a href="https://tools.ietf.org/html/draft-ietf-bess-evpn-prefix-advertisement-09#section-4.4.1">Interface-less IP-VRF-to-IP-VRF model</a>:</p>

<p><img class="center" src="/images/odl-evpn-topo.png"></p>

<h3>Installation</h3>

<p>My lab environment is still based on a pair of nested VMs running containerised Kolla OpenStack I&rsquo;ve described in my <a href="/blog/2017/09/08/os-lab-docker/">earlier post</a>. A few months ago OpenDaylight role has been added to kolla-ansible so now it is possible to install OpenDaylight-intergrated OpenStack automatically. However, there is no option to install QBGP so I had to augment the default <a href="https://github.com/openstack/kolla">Kolla</a> and <a href="https://github.com/openstack/kolla-ansible">Kolla-ansible</a> repositories to include the QBGP <a href="https://github.com/networkop/kolla-odl-bgpvpn/blob/master/roles/kolla_build/templates/quagga-Dockerfile.j2">Dockerfile template</a> and QBGP <a href="https://github.com/networkop/kolla-odl-bgpvpn/blob/master/roles/kolla_deploy/tasks/create.yml#L90-L120">ansible role</a>. So the first step is to download my latest automated installer and make sure <code>enable_opendaylight</code> global variable is set to <code>yes</code>:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/networkop/kolla-odl-bgpvpn.git&quot;</span>&gt;https://github.com/networkop/kolla-odl-bgpvpn.git&lt;/a&gt; <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="nb">cd </span>kolla-odl-bgpvpn
</span><span class='line'>mkdir group_vars
</span><span class='line'><span class="nb">echo</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>enable_opendaylight: <span class="se">\&quot;</span>yes<span class="se">\&amp;</span>rdquo<span class="p">;&amp;</span>ldquo<span class="p">;</span> &gt;&gt; group_vars/all.yaml
</span></code></pre></td></tr></table></div></figure></p>

<p>At the time of writing I was relying on a couple of latest bug fixes inside OpenDaylight, so I had to modify the default ODL role to install the latest master-branch ODL build. Make sure the link below is pointing to the latest <code>zip</code> file in <code>0.8.0-SNAPSHOT</code> directory.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat <span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;</span> EOF &gt;&gt; group_vars/all.yaml
</span><span class='line'>odl_latest_enabled: <span class="nb">true</span>
</span><span class='line'>odl_latest_url: &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://nexus.opendaylight.org/content/repositories/opendaylight.snapshot/org/opendaylight/integration/netvirt/karaf/0.8.0-SNAPSHOT/karaf-0.8.0-20171106.102232-1767.zip&quot;</span>&gt;https://nexus.opendaylight.org/content/repositories/opendaylight.snapshot/org/opendaylight/integration/netvirt/karaf/0.8.0-SNAPSHOT/karaf-0.8.0-20171106.102232-1767.zip&lt;/a&gt;
</span><span class='line'>EOF
</span></code></pre></td></tr></table></div></figure></p>

<p>The next few steps are similar to what I&rsquo;ve described in my <a href="/blog/2017/09/08/os-lab-docker/">Kolla lab post</a>, will create a pair of VMs, build all Kolla containers, push them to a local Docker repo and finally deploy OpenStack using Kolla-ansible playbooks:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./1-create.sh <span class="k">do</span>
</span><span class='line'>./2-bootstrap.sh <span class="k">do</span>
</span><span class='line'>./3-build.sh <span class="k">do</span>
</span><span class='line'>./4-deploy.sh <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The final <code>4-deploy.sh</code> script will also create a simple <code>init.sh</code> script inside the controller VM that can be used to setup a test topology with a single VM connected to a <code>10.0.0.0/24</code> subnet:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh kolla-controller
</span><span class='line'><span class="nb">source</span> /etc/kolla/admin-openrc.sh
</span><span class='line'>./init.sh
</span></code></pre></td></tr></table></div></figure></p>

<blockquote><p>Of course, another option to build a lab is to follow the official <a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html">Kolla documentation</a> to create your own custom test environment.</p></blockquote>

<h3>Configuration</h3>

<p>Assuming the test topology was setup with no issues and a test VM can ping its default gateway <code>10.0.0.1</code>, we can start configuring BGP VPNs. Unfortunately, we won&rsquo;t be able to use OpenStack BGPVPN API/CLI, since ODL requires an extra parameter (L3 VNI for symmetric IRB) which is not available in OpenStack BGPVPN API, but we still can configure everything directly through ODL&rsquo;s API. My interface of choice is always REST, since it&rsquo;s easier to build it into a fully programmatic plugin, so even though all of the below steps can be accomplished through karaf console CLI, I&rsquo;ll be using cURL to send and retrieve data from ODL&rsquo;s REST API.</p>

<h4>1. Source admin credentials and setup ODL&rsquo;s REST variables</h4>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> /etc/kolla/admin-openrc.sh
</span><span class='line'><span class="nb">export </span><span class="nv">ODL_URL</span><span class="o">=</span><span class="p">&amp;</span>lsquo<span class="p">;</span>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://192.168.133.100:8181/restconf&quot;</span>&gt;http://192.168.133.100:8181/restconf&lt;/a&gt;<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">CT_JSON</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>Content-Type: application/json<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>2. Configure local BGP settings and BGP peering with DC-GW</h4>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat <span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;</span> EOF &gt; ./bgp-full.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>bgp<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>as-id<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>announce-fbit<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="nb">false</span>,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nb">local</span>-as<span class="p">&amp;</span>rdquo<span class="p">;</span>: 100,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>router-id<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>192.168.133.100<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>stalepath-time<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>logging<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>file<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>/var/log/bgp_debug.log<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>level<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>errors<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>neighbors<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">[</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>address<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>192.168.133.50<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>remote-as<span class="p">&amp;</span>rdquo<span class="p">;</span>: 100,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>address-families<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">[</span>
</span><span class='line'>                   <span class="o">{</span>
</span><span class='line'>                     <span class="p">&amp;</span>ldquo<span class="p">;</span>ebgp:afi<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>3<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>                     <span class="p">&amp;</span>ldquo<span class="p">;</span>ebgp:peer-ip<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>192.168.133.50<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>                     <span class="p">&amp;</span>ldquo<span class="p">;</span>ebgp:safi<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>6<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>                   <span class="o">}</span>
</span><span class='line'>                <span class="o">]</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>EOF&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;curl -X PUT -u admin:admin -k -v -H <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$CT_JSON</span><span class="p">&amp;</span>rdquo<span class="p">;</span>  <span class="se">\</span>
</span><span class='line'>     <span class="nv">$ODL_URL</span>/config/ebgp:bgp -d @bgp-full.json
</span></code></pre></td></tr></table></div></figure></p>

<h4>3. Define L3VPN instance and associate it with OpenStack <code>admin</code> tenant</h4>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">TENANT_UUID</span><span class="o">=</span><span class="k">$(</span>openstack project show admin -f value -c id <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>            sed <span class="p">&amp;</span>rsquo<span class="p">;</span>s/<span class="o">(</span><span class="p">&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;</span>..<span class="k">)</span><span class="o">(</span><span class="p">&amp;</span>hellip<span class="p">;</span>.<span class="o">)(</span><span class="p">&amp;</span>hellip<span class="p">;</span>.<span class="o">)(</span><span class="p">&amp;</span>hellip<span class="p">;</span>.<span class="o">)(</span>.*<span class="o">)</span>/<span class="se">\1</span>-<span class="se">\2</span>-<span class="se">\3</span>-<span class="se">\4</span>-<span class="se">\5</span>/<span class="p">&amp;</span>lsquo<span class="p">;</span><span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cat <span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;</span> EOF &gt; ./l3vpn-full.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>   <span class="p">&amp;</span>ldquo<span class="p">;</span>input<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{</span>
</span><span class='line'>      <span class="p">&amp;</span>ldquo<span class="p">;</span>l3vpn<span class="p">&amp;</span>rdquo<span class="p">;</span>:<span class="o">[</span>
</span><span class='line'>         <span class="o">{</span>
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>id<span class="p">&amp;</span>rdquo<span class="p">;</span>:<span class="p">&amp;</span>ldquo<span class="p">;</span>f503fcb0-3fd9-4dee-8c3a-5034cf707fd9<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>name<span class="p">&amp;</span>rdquo<span class="p">;</span>:<span class="p">&amp;</span>ldquo<span class="p">;</span>L3EVPN<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>route-distinguisher<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">[</span><span class="p">&amp;</span>ldquo<span class="p">;</span>100:100<span class="p">&amp;</span>rdquo<span class="p">;</span><span class="o">]</span>,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nb">export</span>-RT<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">[</span><span class="p">&amp;</span>ldquo<span class="p">;</span>100:100<span class="p">&amp;</span>rdquo<span class="p">;</span><span class="o">]</span>,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>import-RT<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">[</span><span class="p">&amp;</span>ldquo<span class="p">;</span>100:100<span class="p">&amp;</span>rdquo<span class="p">;</span><span class="o">]</span>,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>l3vni<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>5000<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>tenant-id<span class="p">&amp;</span>rdquo<span class="p">;</span>:<span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">TENANT_UUID</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>EOF&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;curl -X POST -u admin:admin -k -v -H <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$CT_JSON</span><span class="p">&amp;</span>rdquo<span class="p">;</span>  <span class="se">\</span>
</span><span class='line'>      <span class="nv">$ODL_URL</span>/operations/neutronvpn:createL3VPN -d @l3vpn-full.json
</span></code></pre></td></tr></table></div></figure></p>

<h4>4. Inject prefixes into L3VPN by associating the previously created L3VPN with a <code>demo-router</code></h4>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">ROUTER_UUID</span><span class="o">=</span><span class="k">$(</span>openstack router show demo-router -f value -c id<span class="k">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cat <span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;</span> EOF &gt; ./l3vpn-assoc.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="p">&amp;</span>ldquo<span class="p">;</span>input<span class="p">&amp;</span>rdquo<span class="p">;</span>:<span class="o">{</span>
</span><span class='line'>     <span class="p">&amp;</span>ldquo<span class="p">;</span>vpn-id<span class="p">&amp;</span>rdquo<span class="p">;</span>:<span class="p">&amp;</span>ldquo<span class="p">;</span>f503fcb0-3fd9-4dee-8c3a-5034cf707fd9<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>     <span class="p">&amp;</span>ldquo<span class="p">;</span>router-id<span class="p">&amp;</span>rdquo<span class="p">;</span>:<span class="o">[</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">ROUTER_UUID</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">]</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>EOF&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;curl -X POST -u admin:admin -k -v -H <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$CT_JSON</span><span class="p">&amp;</span>rdquo<span class="p">;</span>  <span class="se">\</span>
</span><span class='line'>     <span class="nv">$ODL_URL</span>/operations/neutronvpn:associateRouter -d @l3vpn-assoc.json
</span></code></pre></td></tr></table></div></figure></p>

<h4>5. Configure DC-GW VTEP IP</h4>

<p>ODL cannot automatically extract VTEP IP from updates received from DC-GW, so we need to explicitly configure it:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat <span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;</span> EOF &gt; ./tep.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="p">&amp;</span>ldquo<span class="p">;</span>input<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>destination-ip<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>1.1.1.1<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>tunnel-type<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>odl-interface:tunnel-type-vxlan<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>EOF
</span><span class='line'>curl -X POST -u admin:admin -k -v -H <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$CT_JSON</span><span class="p">&amp;</span>rdquo<span class="p">;</span>  <span class="se">\</span>
</span><span class='line'>     <span class="nv">$ODL_URL</span>/operations/itm-rpc:add-external-tunnel-endpoint -d @tep.json
</span></code></pre></td></tr></table></div></figure></p>

<h4>6. DC-GW configuration</h4>

<p>That is all what needs to be configured on ODL. Although I would consider this to be outside of the scope of the current post, for the sake of completeness I&rsquo;m including the relevant configuration from the DC-GW:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>!
</span><span class='line'>vrf definition ODL
</span><span class='line'> rd 100:100
</span><span class='line'> route-target <span class="nb">export </span>100:100
</span><span class='line'> route-target import 100:100
</span><span class='line'> !      &lt;br/&gt;
</span><span class='line'> address-family ipv4
</span><span class='line'>  route-target <span class="nb">export </span>100:100 stitching
</span><span class='line'>  route-target import 100:100 stitching
</span><span class='line'> <span class="nb">exit</span>-address-family
</span><span class='line'>!
</span><span class='line'>bridge-domain 5000
</span><span class='line'> member vni 5000
</span><span class='line'>!
</span><span class='line'>interface Loopback0
</span><span class='line'> ip address 1.1.1.1 255.255.255.255
</span><span class='line'>!
</span><span class='line'>interface GigabitEthernet1
</span><span class='line'> ip address 192.168.133.50 255.255.255.0
</span><span class='line'>!
</span><span class='line'>interface nve1
</span><span class='line'> no ip address
</span><span class='line'> <span class="nb">source</span>-interface Loopback0
</span><span class='line'> host-reachability protocol bgp
</span><span class='line'> member vni <span class="m">5000</span> vrf ODL
</span><span class='line'>!
</span><span class='line'>interface BDI5000
</span><span class='line'> vrf forwarding ODL
</span><span class='line'> ip address 8.8.8.8 255.255.255.0
</span><span class='line'> encapsulation dot1Q 500
</span><span class='line'>!
</span><span class='line'>router bgp 100
</span><span class='line'> bgp log-neighbor-changes
</span><span class='line'> no bgp default ipv4-unicast
</span><span class='line'> neighbor 192.168.133.100 remote-as 100
</span><span class='line'> !
</span><span class='line'> address-family l2vpn evpn
</span><span class='line'>  import vpnv4 unicast
</span><span class='line'>  neighbor 192.168.133.100 activate
</span><span class='line'> <span class="nb">exit</span>-address-family
</span><span class='line'> !
</span><span class='line'> address-family ipv4 vrf ODL
</span><span class='line'>  advertise l2vpn evpn
</span><span class='line'>  redistribute connected
</span><span class='line'> <span class="nb">exit</span>-address-family
</span><span class='line'>!
</span></code></pre></td></tr></table></div></figure></p>

<p>For detailed explanation of how EVPN RT5 is configured on Cisco CSR refer to the <a href="https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/cether/configuration/xe-16/ce-xe-16-book/evpn-vxlan-l3.html">following guide</a>.</p>

<h3>Verification</h3>

<p>There are several things that can be checked to verify that the DC-GW integration is working. One of the first steps would be to check if BGP session with CSR is up.
This can be done from the CSR side, however it&rsquo;s also possible to check this from the QBGP side. First we need to get into the QBGP&rsquo;s interactive shell from the controller node:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>centos@controller-1 ~<span class="o">]</span><span class="nv">$ </span>sudo docker <span class="nb">exec</span> -it quagga /opt/quagga/bin/vtysh
</span></code></pre></td></tr></table></div></figure></p>

<p>From here, we can check that the BGP session has been established:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>controller-1# sh bgp neighbors 192.168.133.50   &lt;br/&gt;
</span><span class='line'>BGP neighbor is 192.168.133.50, remote AS 100, <span class="nb">local </span>AS 100, internal link
</span><span class='line'>  BGP version 4, remote router ID 1.1.1.1
</span><span class='line'>  BGP <span class="nv">state</span> <span class="o">=</span> Established, up <span class="k">for</span> 00:03:05
</span><span class='line'>&lt;snip&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>We can also check the contents of EVPN RIB compiled by QBGP</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>controller-1# sh bgp evpn rd 100:100
</span><span class='line'>BGP table version is 0, <span class="nb">local </span>router ID is 192.168.133.100
</span><span class='line'>Status codes: s suppressed, d damped, h <span class="nb">history</span>, * valid, &gt; best, i - internal
</span><span class='line'>Origin codes: i - IGP, e - EGP, ? - incomplete&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;   Network          Next Hop            Metric LocPrf Weight Path
</span><span class='line'>Route Distinguisher: as2 100:100
</span><span class='line'>&lt;em&gt;&gt; <span class="o">[</span>0<span class="o">][</span>fa:16:3e:37:42:d8/48<span class="o">][</span>10.0.0.2/32<span class="o">]</span>
</span><span class='line'>                    192.168.133.100         <span class="m">0</span>          <span class="m">32768</span> i
</span><span class='line'>&lt;/em&gt;&gt; <span class="o">[</span>0<span class="o">][</span>fa:16:3e:dc:77:65/48<span class="o">][</span>10.0.0.3/32<span class="o">]</span>
</span><span class='line'>                    192.168.133.101         <span class="m">0</span>          <span class="m">32768</span> i
</span><span class='line'>&lt;em&gt;&gt;i8.8.8.0/24       1.1.1.1         <span class="m">0</span>     <span class="m">100</span>       <span class="m">0</span> ?
</span><span class='line'>&lt;/em&gt;&gt; 10.0.0.0/24      192.168.133.100         <span class="m">0</span>          <span class="m">32768</span> i
</span></code></pre></td></tr></table></div></figure></p>

<p>Finally, we can verify that the prefix <code>8.8.8.0/24</code> advertised from DC-GW is being passed by QBGP and accepted by NetVirt&rsquo;s FIB Manager:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -u admin:admin -k -v  <span class="nv">$ODL_URL</span>/config/odl-fib:fibEntries/<span class="se">\</span>
</span><span class='line'>  vrfTables/100%3A100/vrfEntry/8.8.8.0%2F24 <span class="p">|</span> python -m json.tool
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>vrfEntry<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>destPrefix<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>8.8.8.0/24<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>encap-type<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>vxlan<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>gateway_mac_address<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>00:1e:49:69:24:bf<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>l3vni<span class="p">&amp;</span>rdquo<span class="p">;</span>: 5000,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>origin<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>b<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>route-paths<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">[</span>
</span><span class='line'>                <span class="o">{</span>
</span><span class='line'>                    <span class="p">&amp;</span>ldquo<span class="p">;</span>nexthop-address<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>1.1.1.1<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">]</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The last output confirms that the prefix is being received and accepted by ODL. To do a similar check on CSR side we can run the following command:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>CSR1k#show bgp l2vpn evpn
</span><span class='line'>&lt;snip&gt;
</span><span class='line'>     Network          Next Hop            Metric LocPrf Weight Path
</span><span class='line'>Route Distinguisher: 100:100 <span class="o">(</span>default <span class="k">for</span> vrf ODL<span class="o">)</span>
</span><span class='line'> &lt;em&gt;&gt;i  <span class="o">[</span>2<span class="o">][</span>100:100<span class="o">][</span>0<span class="o">][</span>48<span class="o">][</span>FA163E3742D8<span class="o">][</span>32<span class="o">][</span>10.0.0.2<span class="o">]</span>/24
</span><span class='line'>                      192.168.133.100          <span class="m">0</span>    <span class="m">100</span>      <span class="m">0</span> i
</span><span class='line'> &lt;/em&gt;&gt;i  <span class="o">[</span>2<span class="o">][</span>100:100<span class="o">][</span>0<span class="o">][</span>48<span class="o">][</span>FA163EDC7765<span class="o">][</span>32<span class="o">][</span>10.0.0.3<span class="o">]</span>/24
</span><span class='line'>                      192.168.133.101          <span class="m">0</span>    <span class="m">100</span>      <span class="m">0</span> i
</span><span class='line'> &lt;em&gt;&gt;   <span class="o">[</span>5<span class="o">][</span>100:100<span class="o">][</span>0<span class="o">][</span>24<span class="o">][</span>8.8.8.0<span class="o">]</span>/17
</span><span class='line'>                      0.0.0.0                  <span class="m">0</span>         <span class="m">32768</span> ?
</span><span class='line'> &lt;/em&gt;&gt;i  <span class="o">[</span>5<span class="o">][</span>100:100<span class="o">][</span>0<span class="o">][</span>24<span class="o">][</span>10.0.0.0<span class="o">]</span>/17
</span><span class='line'>                      192.168.133.100          <span class="m">0</span>    <span class="m">100</span>      <span class="m">0</span> i
</span></code></pre></td></tr></table></div></figure></p>

<p>This confirms that the control plane information has been successfully exchanged between NetVirt and Cisco CSR.</p>

<blockquote><p>At the time of writing, there was an <a href="https://git.opendaylight.org/gerrit/#/c/63324/">open bug</a> in ODL master branch that prevented the forwarding entries from being installed in OVS datapath. Once the bug is fixed I will update this post with the dataplance verification, a.k.a ping</p></blockquote>

<h2>Conclusion</h2>

<p>OpenDaylight is a pretty advanced OpenStack SDN platform. Its functionality includes clustering, site-to-site federation (without EVPN) and L2/L3 EVPN DC-GW integration for both IPv4 and IPv6. It is yet another example of how an open-source platform can match even the most advanced proprietary SDN solutions from incumbent vendors. This is all thanks to the companies involved in OpenDaylight development. I also want to say special thanks to Vyshakh Krishnan, Kiran N Upadhyaya and Dayavanti Gopal Kamath from Ericsson for helping me clear up some of the questions I posted on netvirt-dev mailing list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openstack SDN - NFV Management and Orchestration]]></title>
    <link href="http://networkop.github.io/blog/2017/11/23/os-nfv-mano/"/>
    <updated>2017-11-23T00:00:00+00:00</updated>
    <id>http://networkop.github.io/blog/2017/11/23/os-nfv-mano</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll have a brief look at the NFV MANO framework developed by ETSI and create a simple vIDS network service using Tacker.</p>

<!--more-->


<p>In the ongoing hysteria surrounding all things SDN, one important thing gets often overlooked. You don&rsquo;t build SDN for its own sake. SDN is just a little cog in a big machine called &ldquo;cloud&rdquo;. To take it even further, I would argue that the best SDN solution is the one that you don&rsquo;t know even exists. Despite what the big vendors tell you, operators are not supposed to interact with SDN interface, be it GUI or CLI. If you dig up some of the earliest presentation about Cisco ACI, when the people talking about it were the actual people who designed the product, you&rsquo;ll notice one common motif being repeated over and over again. That is that ACI was never designed for direct human interaction, but rather was supposed to be configured by a higher level orchestrating system. In data center environments such orchestrating system may glue together services of virtualization layer and SDN layer to provide a seamless &ldquo;cloud&rdquo; experience to the end users. The focus of this post will be one incarnation of such orchestration system, specific to SP/Telco world, commonly known as NFV MANO.</p>

<hr />

<h2>NFV MANO for Telco SDN</h2>

<p>At the early dawn of SDN/NFV era a lot of people got very excited by <strong>&ldquo;the promise&rdquo;</strong> and started applying the disaggregation and virtualization paradigms to all areas of networking. For Telcos that meant virtualizing network functions that built the service core of their networks - EPC, IMS, RAN. Traditionally those network functions were a collection of vertically-integrated baremetal appliances that took a long time to commission and had to be overprovisioned to cope with the peak-hour demand. Virtualizing them would have made it possible to achieve quicker time-to-market, elasticity to cope with a changing network demand and hardware/software disaggregation.</p>

<p>As expected however, such fundamental change has to come at price. Not only do Telcos get a new virtualization platform to manage but they also need to worry about lifecycle management and end-to-end orchestration (MANO) of VNFs. Since any such change presents an opportunity for new streams of revenue, it didn&rsquo;t take long for vendors to jump on the bandwagon and start working on a new architecture designed to address those issues.</p>

<p>The first problem was the easiest to solve since VMware and OpenStack already existed at that stage and could be used to host VNFs with very little modifications. The management and orchestration problem, however, was only partially solved by existing orchestration solutions. There were a lot of gaps between the current operational model and the new VNF world and although these problems could have been solved by Telcos engaging themselves with the open-source community, this proved to be too big of a change for them and they&rsquo;ve turned to the only thing they could trust - the standards bodies.</p>

<h2>ETSI MANO</h2>

<p>ETSI NFV MANO working group has set out to define a reference architecture for management and orchestration of virtualized resources in Telco data centers. The goal of NFV MANO initiative was to do a research into what&rsquo;s required to manage and orchestrate VNFs, what&rsquo;s currently available and identify potential gaps for other standards bodies to fill. Initial ETSI NFV Release 1 (2014) defined a base framework through relatively weak requirements and recommendations and was followed by Release 2 (2016) that made them more concrete by locking down the interfaces and data model specifications. For a very long time Release 1 was the only available NFV MANO standard, which led to a lot of inconsistencies in each vendors' implementations of it. This was very frustrating for Telcos since it required a lot of integration effort to build a multi-vendor MANO stack. Another potential issue with ETSI MANO standard is its limited scope - a lot of critical components like OSS and EMS are left outside of it which created a lot of confusion for Telcos and resulted in other standardisation efforts addressing those gaps.</p>

<p>On the below diagram I have shown an adbridged version of the original ETSI MANO <a href="https://www.ietf.org/proceedings/88/slides/slides-88-opsawg-6.pdf">reference architecture diagram</a> adapted to the use case I&rsquo;ll be demonstrating in this post.</p>

<p><img class="center" src="/images/etsi-mano.png"></p>

<p>This architecture consists of the following building blocks:</p>

<ul>
<li><strong>NFVI</strong> (NFV Infrastructure) - OpenStacks compute or VMware&rsquo;s ESXI nodes</li>
<li><strong>VIM</strong> (Virtual Infrastructure Manager) - OpenStack&rsquo;s controller/API or VMware&rsquo;s vCenter nodes</li>
<li><strong>VNFM</strong> (VNF Manager) - an element responsible for lifecycle management (create,delete,scale) and monitoring of VNFs</li>
<li><strong>NFVO</strong> (NFV Orchestrator) - an element responsible for lifecyle management of Network Services (described below)</li>
</ul>


<p>All these elements are working together towards a single goal - managing and orchestrating a Network Service (NS), which itself is comprised of multiple VNFs, Virtual Links (VLs), VNF Forwarding Graphs (VNFFGs) and Physical Network Functions (PNFs). In this post I create a NS for a simple virtual IDS use case, described in my previous <a href="/blog/2017/09/15/os-sfc-skydive/">SFC post</a>. The goal is to steer all ICMP traffic coming from VM1 through a vIDS VNF which will forward the traffic to its original destination.</p>

<p><img class="center" src="/images/vids-created.png"></p>

<p>Before I get to the implementation, let me give a quick overview of how a Network Service is build from its constituent parts, in the context of our vIDS use case.</p>

<h2>Relationship between NS, VNF and VNFFG</h2>

<p>According to ETSI MANO, a <strong>Network Service</strong> (NS) is a subset of end-to-end service implemented by VNFs and instantiated on the NFVI. As I&rsquo;ve mentioned before, some examples of a NS would be vEPC, vIMS or vCPE. NS can be described in either a YANG or a Tosca template called NS Descriptor (NSD). The main goal of a NSD is to tie together VNFs, VLs, VNFFGs and PNFs by defining relationship between various templates describing those objects (VNFDs, VLDs, VNFFGDs). Once NSD is onboarded (uploaded), it can be instantiated by NFVO, which communicates with VIM and VNFM to create the constituent components and stitch them together as described in a template. NSD normally does not contain VNFD or VNFFGD templates, but imports them through their names, which means that in order to instantiate a NSD, the corresponding VNFDs and VNFFGDs should already be onboarded.</p>

<p><img class="center" src="/images/vids-nsd.png"></p>

<p><strong>VNF Descriptor</strong> is a template describing the compute and network parameters of a single VNF. Each VNF consists of one or more VNF components (VNFCs), represented in Tosca as Virtual Deployment Units (VDUs). A VDU is the smallest part of a VNF and can be implemented as either a container or, as it is in our case, a VM. Apart from the usual set of parameters like CPU, RAM and disk, VNFD also describes all the virtual networks required for internal communication between VNFCs, called internal VLs. VNFM can ask VIM to create those networks when the VNF is being instantiated. VNFD also contains a reference to external networks, which are supposed to be created by NFVO. Those networks are used to connect different VNFs together or to connect VNFs to PNFs and other elements outside of NFVI platform. If external VLs are defined in a VNFD, VNFM will need to source them externally, either as input parameters to VNFM or from NFVO. In fact, VNF instantiation by VNFM, as described in Tacker <a href="https://docs.openstack.org/tacker/latest/user/vnfm_usage_guide.html">documentation</a>, is only used for testing purposes and since a VNF only makes sense as a part of a Network Service, the intended way is to use a NSD to instantiate all VNFs in production environment.</p>

<p>The final component that we&rsquo;re going to use is VNF Forwarding Graph. <strong>VNFFG Descriptor</strong> is an optional component that describes how different VNFs are supposed to be chained together to form a Network Service. In the absence of VNFFG, VNFs will fall back to the default destination-based forwarding, when the IPs of VNFs forming a NS are either automatically discovered (e.g. through DNS) or provisioned statically. Tacker&rsquo;s implementation of VNFFG is not fully integrated with NSD yet and VNFFGD has to be instantiated separately and, as will be shown below, linked to an already running instance of a Network Service through its ID.</p>

<h2>Using Tacker to orchestrate a Network Service</h2>

<p>Tacker is an OpenStack project implementing a generic VNFM and NFVO. At the input it consumes Tosca-based templates, converts them to Heat templates which are then used to spin up VMs on OpenStack. This diagram from Brocade, the biggest Tacker contributor (at least until its acquisition), is the best overview of internal Tacker architecture.</p>

<p><img class="center" src="/images/brocade-tacker.jpg"></p>

<p>For this demo environment I&rsquo;ll keep using my OpenStack Kolla lab environment described in my <a href="/blog/2017/09/08/os-lab-docker/">previous post</a>.</p>

<h3>Step 1 - VIM registration</h3>

<p>Before we can start using Tacker, it needs to know how to reach the OpenStack environment, so the first step in the workflow is OpenStack or VIM registration. We need to provide the address of the keystone endpoint along with the admin credentials to give Tacker enough rights to create and delete VMs and SFC objects:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat <span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;</span> EOF &gt; ./vim.yaml
</span><span class='line'>auth_url: <span class="p">&amp;</span>lsquo<span class="p">;</span>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://192.168.133.254:35357/v3&quot;</span>&gt;http://192.168.133.254:35357/v3&lt;/a&gt;<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'>username: <span class="p">&amp;</span>lsquo<span class="p">;</span>admin<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'>password: <span class="p">&amp;</span>lsquo<span class="p">;</span>admin<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'>project_name: <span class="p">&amp;</span>lsquo<span class="p">;</span>admin<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'>project_domain_name: <span class="p">&amp;</span>lsquo<span class="p">;</span>Default<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'>user_domain_name: <span class="p">&amp;</span>lsquo<span class="p">;</span>Default<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'>EOF&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;tacker vim-register <span class="p">&amp;</span>ndash<span class="p">;</span>is-default <span class="p">&amp;</span>ndash<span class="p">;</span>config-file vim.yaml <span class="p">&amp;</span>ndash<span class="p">;</span>description MYVIM KOLLA-OPENSTACK
</span></code></pre></td></tr></table></div></figure></p>

<p>The successful result can be checked with <code>tacker vim-list</code> which should report that registered VIM is now reachable.</p>

<h3>Step 2 - Onboarding a VNFD</h3>

<p>VNFD defines a set of VMs (VNFCs), network ports (CPs) and networks (VLs) and their relationship. In our case we have a single cirros-based VM with a pair of ingress/egress ports. In this template we also define a special node type <code>tosca.nodes.nfv.vIDS</code> which will be used by NSD to pass the required parameters for ingress and egress VLs. These parameters are going to be used by VNFD to attach network ports (CPs) to virtual networks (VLs) as defined in the <code>substitution_mappings</code> section.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat <span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;</span> EOF &gt; ./vnfd.yaml
</span><span class='line'>tosca_definitions_version: tosca_simple_profile_for_nfv_1_0_0
</span><span class='line'>description: Cirros vIDS example&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;node_types:
</span><span class='line'>  tosca.nodes.nfv.vIDS:
</span><span class='line'>    requirements:
</span><span class='line'>      - INGRESS_VL:
</span><span class='line'>          <span class="nb">type</span>: tosca.nodes.nfv.VL
</span><span class='line'>          required: <span class="nb">true</span>
</span><span class='line'>      - EGRESS_VL:
</span><span class='line'>          <span class="nb">type</span>: tosca.nodes.nfv.VL
</span><span class='line'>          required: <span class="nb">true</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;topology_template:
</span><span class='line'>  substitution_mappings:
</span><span class='line'>    node_type: tosca.nodes.nfv.vIDS
</span><span class='line'>    requirements:
</span><span class='line'>      INGRESS_VL: <span class="o">[</span>CP1, virtualLink<span class="o">]</span>
</span><span class='line'>      EGRESS_VL:  <span class="o">[</span>CP2, virtualLink<span class="o">]</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  node_templates:
</span><span class='line'>    VDU1:
</span><span class='line'>      <span class="nb">type</span>: tosca.nodes.nfv.VDU.Tacker
</span><span class='line'>      properties:
</span><span class='line'>        availability_zone: nova
</span><span class='line'>        flavor: m1.nano
</span><span class='line'>        image: cirros
</span><span class='line'>        mgmt_driver: noop
</span><span class='line'>        user_data_format: RAW
</span><span class='line'>        user_data: <span class="p">|</span>
</span><span class='line'>          <span class="c">#!/bin/sh</span>
</span><span class='line'>          sudo cirros-dhcpc up eth1
</span><span class='line'>          sudo ip rule add iif eth0 table default
</span><span class='line'>          sudo ip route add default via 10.0.0.1 dev eth1 table default
</span><span class='line'>          sudo sysctl -w net.ipv4.ip_forward<span class="o">=</span>1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;CP1:
</span><span class='line'>  <span class="nb">type</span>: tosca.nodes.nfv.CP.Tacker
</span><span class='line'>  properties:
</span><span class='line'>    anti_spoofing_protection: <span class="nb">false</span>
</span><span class='line'><span class="nb">  </span>requirements:
</span><span class='line'>    - virtualBinding:
</span><span class='line'>        node: VDU1
</span><span class='line'>
</span><span class='line'>CP2:
</span><span class='line'>  <span class="nb">type</span>: tosca.nodes.nfv.CP.Tacker
</span><span class='line'>  properties:
</span><span class='line'>    anti_spoofing_protection: <span class="nb">false</span>
</span><span class='line'><span class="nb">  </span>requirements:
</span><span class='line'>    - virtualBinding:
</span><span class='line'>        node: VDU1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;EOF&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;tacker vnfd-create <span class="p">&amp;</span>ndash<span class="p">;</span>vnfd-file vnfd.yaml vIDS-TEMPLATE
</span></code></pre></td></tr></table></div></figure></p>

<h3>Step 4 - Onboarding a NSD</h3>

<p>In our use case the NSD template is going to really small. All what we need to define is a single VNF of the <code>tosca.nodes.nfv.vIDS</code> type that was defined previously in the VNFD. We also define a VL node which points to the pre-existing <code>demo-net</code> virtual network and pass this VL to both INGRESS_VL and EGRESS_VL parameters of the VNFD.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat <span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;</span> EOF &gt; ./nsd.yaml
</span><span class='line'>tosca_definitions_version: tosca_simple_profile_for_nfv_1_0_0
</span><span class='line'>imports:
</span><span class='line'>  - vIDS-TEMPLATE&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;topology_template:
</span><span class='line'>  node_templates:
</span><span class='line'>    vIDS:
</span><span class='line'>      <span class="nb">type</span>: tosca.nodes.nfv.vIDS
</span><span class='line'>      requirements:
</span><span class='line'>        - INGRESS_VL: VL1
</span><span class='line'>        - EGRESS_VL: VL1
</span><span class='line'>    VL1:
</span><span class='line'>      <span class="nb">type</span>: tosca.nodes.nfv.VL
</span><span class='line'>      properties:
</span><span class='line'>          network_name: demo-net
</span><span class='line'>          vendor: tacker
</span><span class='line'>EOF&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;tacker nsd-create <span class="p">&amp;</span>ndash<span class="p">;</span>nsd-file nsd.yaml NSD-vIDS-TEMPLATE
</span></code></pre></td></tr></table></div></figure></p>

<h3>Step 5 - Instantiating a NSD</h3>

<p>As I&rsquo;ve mentioned before, VNFFG is not integrated with NSD yet, so we&rsquo;ll add it later. For now, we have provided enough information to instantiate our NSD.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tacker ns-create <span class="p">&amp;</span>ndash<span class="p">;</span>nsd-name NSD-vIDS-TEMPLATE NS-vIDS-1
</span></code></pre></td></tr></table></div></figure></p>

<p>This last command creates a cirros-based VM with two interfaces and connects them to <code>demo-net</code> virtual network. All ICMP traffic from VM1 still goes directly to its default gateway so the last thing we need to do is create a VNFFG.</p>

<h3>Step 6 - Onboarding and Instantiating a VNFFG</h3>

<p>VNFFG consists of two two types of nodes. The first type defines a Forwarding Path (FP) as a set of virtual ports (CPs) and a flow classifier to build an equivalent service function chain inside the VIM. The second type groups multiple forwarding paths to build a complex service chain graphs, however only one FP is supported by Tacker at the time of writing.</p>

<p>The following template demonstrates another important feature - template parametrization. Instead of defining all parameters statically in a template, they can be provided as inputs during instantiation, which allows to keep templates generic. In this case I&rsquo;ve replaced the network port id parameter with <code>PORT_ID</code> variable which will be provided during VNFFGD instantiation.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat <span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;</span> EOF &gt; ./vnffg.yaml
</span><span class='line'>tosca_definitions_version: tosca_simple_profile_for_nfv_1_0_0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;description: vIDS VNFFG tosca&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;topology_template:
</span><span class='line'>  inputs:
</span><span class='line'>    PORT_ID:
</span><span class='line'>      <span class="nb">type</span>: string
</span><span class='line'>      description: Port ID of the target VM&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  node_templates:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;Forwarding_Path-1:
</span><span class='line'>  <span class="nb">type</span>: tosca.nodes.nfv.FP.Tacker
</span><span class='line'>  description: creates path <span class="o">(</span>CP1-<span class="p">&amp;</span>gt<span class="p">;</span>CP2<span class="o">)</span>
</span><span class='line'>  properties:
</span><span class='line'>    id: 51
</span><span class='line'>    policy:
</span><span class='line'>      <span class="nb">type</span>: ACL
</span><span class='line'>      criteria:
</span><span class='line'>        - network_src_port_id: <span class="o">{</span> get_input: PORT_ID <span class="o">}</span>
</span><span class='line'>        - ip_proto: 1
</span><span class='line'>    path:
</span><span class='line'>      - forwarder: vIDS-TEMPLATE
</span><span class='line'>        capability: CP1
</span><span class='line'>      - forwarder: vIDS-TEMPLATE
</span><span class='line'>        capability: CP2
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  groups:
</span><span class='line'>    VNFFG1:
</span><span class='line'>      <span class="nb">type</span>: tosca.groups.nfv.VNFFG
</span><span class='line'>      description: Set of Forwarding Paths
</span><span class='line'>      properties:
</span><span class='line'>        vendor: tacker
</span><span class='line'>        version: 1.0
</span><span class='line'>        number_of_endpoints: 1
</span><span class='line'>        dependent_virtual_link: <span class="o">[</span>VL1<span class="o">]</span>
</span><span class='line'>        connection_point: <span class="o">[</span>CP1<span class="o">]</span>
</span><span class='line'>        constituent_vnfs: <span class="o">[</span>vIDS-TEMPLATE<span class="o">]</span>
</span><span class='line'>      members: <span class="o">[</span>Forwarding_Path-1<span class="o">]</span>
</span><span class='line'>EOF&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;tacker vnffgd-create <span class="p">&amp;</span>ndash<span class="p">;</span>vnffgd-file vnffgd.yaml VNFFG-TEMPLATE
</span></code></pre></td></tr></table></div></figure></p>

<blockquote><p>Note that the VNFFGD has been updated to support multiple flow classifiers which means you many need to update the above template as per the <a href="https://github.com/openstack/tacker/blob/master/samples/tosca-templates/vnffgd/tosca-vnffgd-multiple-classifiers-sample.yaml">sample VNFFGD template</a></p></blockquote>

<p>In order to instantiate a VNFFGD we need to provide two runtime parameters:</p>

<ul>
<li>OpenStack port ID of VM1 for forwarding path flow classifier</li>
<li>ID of the VNF created by the Network Service</li>
</ul>


<p>All these parameters can be obtained using the CLI commands as shown below:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">CLIENT_IP</span><span class="o">=</span><span class="k">$(</span>openstack server list <span class="p">|</span> grep VM1 <span class="p">|</span> grep -Eo <span class="p">&amp;</span>lsquo<span class="p">;</span><span class="o">[</span>0-9<span class="o">]</span>+.<span class="o">[</span>0-9<span class="o">]</span>+.<span class="o">[</span>0-9<span class="o">]</span>+.<span class="o">[</span>0-9<span class="o">]</span>+<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="k">)</span>
</span><span class='line'><span class="nv">PORT_ID</span><span class="o">=</span><span class="k">$(</span>openstack port list <span class="p">|</span> grep <span class="nv">$CLIENT_IP</span> <span class="p">|</span> awk <span class="p">&amp;</span>lsquo<span class="p">;</span><span class="o">{</span>print <span class="nv">$2</span><span class="o">}</span><span class="p">&amp;</span>rsquo<span class="p">;</span><span class="k">)</span>
</span><span class='line'><span class="nb">echo</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>PORT_ID: <span class="nv">$PORT_ID</span><span class="p">&amp;</span>rdquo<span class="p">;</span> &gt; params-vnffg.yaml
</span><span class='line'><span class="nv">vIDS_ID</span><span class="o">=</span><span class="k">$(</span>tacker ns-show NS-vIDS-1 -f value -c vnf_ids <span class="p">|</span> sed <span class="p">&amp;</span>ldquo<span class="p">;</span>s/<span class="p">&amp;</span>lsquo<span class="p">;</span>/<span class="se">\&amp;</span>rdquo<span class="p">;</span>/g<span class="s2">&quot; | jq &amp;rsquo;.vIDS&#39; | sed &amp;ldquo;s/\&amp;rdquo;//g&quot;</span><span class="k">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The following command creates a VNFFG and an equivalent SFC to steer all ICMP traffic from VM1 through vIDS VNF. The result can be verified using Skydive following the procedure described in my <a href="/blog/2017/09/15/os-sfc-skydive/">previous post</a>.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tacker vnffg-create <span class="p">&amp;</span>ndash<span class="p">;</span>vnffgd-name VNFFG-TEMPLATE <span class="se">\</span>
</span><span class='line'>                    <span class="p">&amp;</span>ndash<span class="p">;</span>vnf-mapping vIDS-TEMPLATE:<span class="nv">$vIDS_ID</span> <span class="se">\</span>
</span><span class='line'>                    <span class="p">&amp;</span>ndash<span class="p">;</span>param-file params-vnffg.yaml VNFFG-1
</span></code></pre></td></tr></table></div></figure></p>

<h2>Other Tacker features</h2>

<p>This post only scratches the surface of what&rsquo;s available in Tacker with a lot of other salient features left out of scope, including:</p>

<ul>
<li>VNF monitoring - through monitoring driver its possible to do VNF monitoring from VNFM using various methods ranging from a single ICMP/HTTP ping to Alarm-based monitoring using OpenStack&rsquo;s <a href="https://wiki.openstack.org/wiki/Telemetry">Telemetry framework</a></li>
<li>Enhanced Placement Awareness - VNFD Tosca template extensions that allow the definition of required performance features like NUMA topology mapping, SR-IOV and CPU pinning.</li>
<li>Mistral workflows - ability to drive Tacker workflows through Mistral</li>
</ul>


<h2>Conclusion</h2>

<p>Tacker is one of <a href="https://thenewstack.io/opensource-nfv-part-4-opensource-mano/">many</a> NFV orchestration platforms in a very competitive environment. Other <a href="https://www.mirantis.com/blog/which-nfv-orchestration-platform-best-review-osm-open-o-cord-cloudify/">open-source initiatives</a> have been created in response to the shortcomings of the original ETSI Release 1 reference architecture. The fact the some of the biggest Telcos have finally realised that the only way to achieve the goal of NFV orchestration is to get involved with open-source and do it themselves, may be a good sign for the industry and maybe not so good for the ETSI NFV MANO working group. Whether ONAP with its broader scope becomes a new de-facto standard for NFV orchestration, still remains to be seen, until then ETSI MANO remains the only viable standard for NFV lifecycle management and orchestration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openstack SDN - Skydiving Into Service Function Chaining]]></title>
    <link href="http://networkop.github.io/blog/2017/09/15/os-sfc-skydive/"/>
    <updated>2017-09-15T00:00:00+01:00</updated>
    <id>http://networkop.github.io/blog/2017/09/15/os-sfc-skydive</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll show how to configure Neutron&rsquo;s service function chaining,
troubleshoot it with Skydive and how SFC is implemented in OVS forwarding pipeline.</p>

<!--more-->


<hr />

<p><abbr title="Service Function Chaining">SFC</abbr> is another SDN feature that for a long time only used to be available in proprietary SDN solutions and that has recently become available in vanilla OpenStack. It serves as another proof that proprietary SDN solutions are losing the competitive edge, especially for Telco SDN/NFV use cases. Hopefully, by the end of this series of posts I&rsquo;ll manage do demonstrate how to build a complete open-source solution that has feature parity (in terms of major networking features) with all the major proprietary data centre SDN platforms. But for now, let&rsquo;s just focus on SFC.</p>

<h2>SFC High-level overview</h2>

<p>In most general terms, SFC refers to packet forwarding technique that uses more than just destination IP address to decide how to forward packets. In more specific terms, SFC refers to &ldquo;steering&rdquo; of traffic through a specific set of endpoints (a.k.a Service Functions), overriding the default destination-based forwarding. For those coming from a traditional networking background, think of SFC as a set of policy-based routing instances orchestrated from a central element (SDN controller). Typical use cases for SFC would be things like firewalling, IDS/IPS, proxying, NAT'ing, monitoring.</p>

<p>SFC is usually modelled as a directed (acyclic) graph, where the first and the last elements are the source and destination respectively and each vertex inside the graph represents a SF to be chained. IETF RFC7665 defines the reference architecture for SFC implementations and establishes some of the basic terminology. A simplified SFC architecture consists of the following main components:</p>

<ul>
<li>Classifier - a network element that matches and redirects traffic flows to a chain</li>
<li>Service Function - an element responsible for packet processing</li>
<li>Service Function Forwarder - a network element that forwards traffic to and from a directly connected SF</li>
</ul>


<p><img class="center" src="/images/sfc-overview.png"></p>

<p>One important property of a SF is elasticity. More instances of the same type can be added to a pool of SF and SFF will load-balance the traffic between them. This is the reason why, as we&rsquo;ll see in the next section, SFF treats connections to a SF as a group of ports rather than just a single port.</p>

<h2>Insertion modes and implementation models</h2>

<p>In legacy, pre-SDN environments SFs had no idea if they were a part of a service chain and network devices (routers and switches) had to &ldquo;insert&rdquo; the interesting traffic into the service function using one of the following two modes:</p>

<ul>
<li><p><strong>L2 mode</strong> is when SF is physically inserted between the source and destination inside a single broadcast domain, so traffic flows through a SF without any intervention from a switch. Example of this mode could be a firewall in transparent mode, physically connected between a switch and a default gateway router. All packets entering a SF have their original source and destination MAC addresses, which requires SF to be in promiscuous mode.</p></li>
<li><p><strong>L3 mode</strong> is when a router overrides its default destination-based forwarding and redirects the interesting traffic to a SF. In legacy networks this could have been achieved with PBR or WCCP. In this case SF needs to be L2-attached to a router and all redirected packets have their destination MAC updated to that of a SF&rsquo;s ingress interface.</p></li>
</ul>


<p>Modern SDN networks make it really easy to modify forwarding behaviour of network elements, both physical and virtual. There is no need for policy-based routing or bump-in-the-wire designs anymore. When flow needs to be redirected to a SF on a virtual switch, all what&rsquo;s required is a matching OpenFlow entry with a high enough priority. However redirecting traffic to a SF is just one part of the problem. Another part is how to make SFs smarter, to provide greater visibility of end-to-end service function path.</p>

<p>So far SFs have only been able to extract metadata from the packet itself. This limited the flexibility of SF logic and became computationally expensive in case many SFs need to access some L7 header information. Ideal way would be to have an additional header which can be used to read and write arbitrary information and pass it along the service function chain. RFC7665 defines requirements for &ldquo;SFC Encapsulation&rdquo; header which can be used to uniquely identify an instance of a chain as well as share metadata between all its elements. Neutron API refers to SFC encapsulation as <em>correlation</em> since its primary function is to identify a particular service function path. There are two implementations of SFC encapsulation in use today:</p>

<ul>
<li><strong>MPLS</strong> - used by current OVS agent driver (as of Pike). This method does not provide any means to share metadata and serves only for SFP identification. It is intended as an interim solution until NSH becomes available upstream in OVS.</li>
<li><strong>NSH</strong> - complete implementation of SFC encapsulation defined in RFC7665. This method is currently implemented in Opendaylight where NSH is used as a shim between VXLAN-GPE and the encapsulated packet</li>
</ul>


<p>It should be noted that the new approach with SFC encapsulation still allows for legacy, non-SFC-aware SFs to be chained. In this case SFC encapsulation is stripped off the packet by an &ldquo;SFC proxy&rdquo; before the packet is sent to the ingress port of a service function. All logical elements forming an SFC forwarding pipeline, including SFC proxy, Classifier and Forwarder, are implemented inside the same OVS bridges (br-int and br-tun) used by vanilla OVS-agent driver.</p>

<h2>Configuring Neutron SFC</h2>

<p> We&rsquo;ll pick up where we left off in the <a href="/blog/2017/09/08/os-lab-docker/">previous post</a>. All Neutron and ML2 configuration files have already been updated thanks to the <code>enable_sfc="yes"</code> setting in the global Kolla-Ansible configuration file. If not, you can change it in <code>/etc/kolla/globals.yaml</code> and re-run kolla-ansible deployment script.</p>

<p> First, let&rsquo;s generate OpenStack credentials using a post-deployment script. We later can use a default bootstrap script to downloads the cirros image and set up some basic networking and security rules.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kolla-ansible post-deploy
</span><span class='line'><span class="nb">source</span> /etc/kolla/admin-openrc.sh
</span><span class='line'>/usr/share/kolla-ansible/init-runonce
</span></code></pre></td></tr></table></div></figure></p>

<p>The goal for this post is to create a simple uni-directional SFC to steer the ICMP requests from VM1 to its default gateway through another VM that will be playing the role of a firewall.</p>

<p><img class="center" src="/images/sfc-example.png"></p>

<p>The network was already created by the bootstrap script so all what we have to do is create a test VM. I&rsquo;m creating a port in a separate step simply so that I can refer to it by name instead of UUID.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openstack port create <span class="p">&amp;</span>ndash<span class="p">;</span>network demo-net P0
</span><span class='line'>openstack server create <span class="p">&amp;</span>ndash<span class="p">;</span>image cirros <span class="p">&amp;</span>ndash<span class="p">;</span>flavor m1.tiny <span class="p">&amp;</span>ndash<span class="p">;</span>port P0 VM1
</span></code></pre></td></tr></table></div></figure></p>

<p>I&rsquo;ll go over all the necessary steps to setup SFC, but will only provide a brief explanation. Refer to the official OpenStack <a href="https://docs.openstack.org/newton/networking-guide/config-sfc.html">Networking Guide</a> for a complete SFC configuration guide.</p>

<p>First, let&rsquo;s create a FW VM with two ports - P1 and P2.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openstack port create <span class="p">&amp;</span>ndash<span class="p">;</span>network demo-net P1
</span><span class='line'>openstack port create <span class="p">&amp;</span>ndash<span class="p">;</span>network demo-net P2
</span><span class='line'>openstack server create <span class="p">&amp;</span>ndash<span class="p">;</span>image cirros <span class="p">&amp;</span>ndash<span class="p">;</span>flavor m1.tiny <span class="p">&amp;</span>ndash<span class="p">;</span>port P1 <span class="p">&amp;</span>ndash<span class="p">;</span>port P2 FW
</span></code></pre></td></tr></table></div></figure></p>

<p>Next, we need create an ingress/egress port pair and assign it to a port pair group. The default setting for <strong>correlation</strong> in a port pair (not shown) is <code>none</code>. That means that SFC encapsulation header (MPLS) will get stripped before the packet is sent to P1.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openstack sfc port pair create <span class="p">&amp;</span>ndash<span class="p">;</span>ingress P1 <span class="p">&amp;</span>ndash<span class="p">;</span>egress P2 PPAIR
</span><span class='line'>openstack sfc port pair group create <span class="p">&amp;</span>ndash<span class="p">;</span>port-pair PPAIR PPGROUP
</span></code></pre></td></tr></table></div></figure></p>

<p>Port pair group also allows to specify the L2-L4 headers which to use for load-balancing in OpenFlow groups, overriding the default behaviour described in the next section.</p>

<p>Another required element is a flow classifier. We will be redirecting ICMP traffic coming from VM1&rsquo;s port P0</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openstack sfc flow classifier create <span class="p">&amp;</span>ndash<span class="p">;</span>protocol icmp <span class="p">&amp;</span>ndash<span class="p">;</span>logical-source-port P0 FLOW-ICMP
</span></code></pre></td></tr></table></div></figure></p>

<p>Finally, we can tie together flow classifier with a previously created port pair group. The default setting for <strong>correlation</strong> (not shown again) in this case is <code>mpls</code>. That means that each chain will have its own unique MPLS label to be used as an SFC encapsulation.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openstack sfc port chain create <span class="p">&amp;</span>ndash<span class="p">;</span>port-pair-group PPGROUP <span class="p">&amp;</span>ndash<span class="p">;</span>flow-classifier FLOW-ICMP PCHAIN
</span></code></pre></td></tr></table></div></figure></p>

<p>That&rsquo;s all the configuration needed to setup SFC. However if you login VM1&rsquo;s console and try pinging default gateway, it will fail. Next, I&rsquo;m going to give a quick demo of how to use a real-time network analyzer tool called Skydive to troubleshoot this issue.</p>

<h2>Using Skydive to troubleshoot SFC</h2>

<p><a href="https://skydive-project.github.io/skydive/">Skydive</a> is a new open-source distributed network probing and traffic analyzing tool. It consists of a set of agents running on compute nodes, collecting topology and flow information and forwarding it to a central element for analysis.</p>

<p>The idea of using Skydive to analyze and track SFC is not new. In fact, for anyone interested in this topic I highly recommend the <a href="http://blog.cafarelli.fr/2017/02/tracking-service-function-chaining-with-skydive/">following blogpost</a>. In my case I&rsquo;ll show how to use Skydive from a more practical perspective - troubleshooting multiple SFC issues.</p>

<p>Skydive CLI client is available inside the <code>skydive_analyzer</code> container. We need to start an interactive bash session inside this container and set some environment variables:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker <span class="nb">exec</span> -it skydive_analyzer bash
</span><span class='line'><span class="nb">export </span><span class="nv">SKYDIVE_ANALYZERS</span><span class="o">=</span>192.168.133.100:8085
</span><span class='line'><span class="nb">export </span><span class="nv">SKYDIVE_USERNAME</span><span class="o">=</span>admin
</span><span class='line'><span class="nb">export </span><span class="nv">SKYDIVE_PASSWORD</span><span class="o">=</span>admin
</span></code></pre></td></tr></table></div></figure></p>

<p>The first thing we can do to troubleshoot is see if ICMP traffic is entering the <code>ingress</code> port of the FW VM. Based on the output of <code>openstack port list</code> command I know that P1 has got an IP of <code>10.0.0.8</code>. Let&rsquo;s if we can identify a tap port corresponding to P1:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>skydive client topology query <span class="p">&amp;</span>ndash<span class="p">;</span>gremlin <span class="p">&amp;</span>ldquo<span class="p">;</span>G.V<span class="o">()</span>.Has<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Neutron.IPs<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>10.0.0.8<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>Type<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>tun<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span>.Values<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Neutron<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="p">&amp;</span>ldquo<span class="p">;</span>IPs<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>10.0.0.8<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>  <span class="p">&amp;</span>ldquo<span class="p">;</span>NetworkID<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>8eabb451-b026-417c-b54b-8e79ee6e71c3<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>  <span class="p">&amp;</span>ldquo<span class="p">;</span>NetworkName<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>demo-net<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>  <span class="p">&amp;</span>ldquo<span class="p">;</span>PortID<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>e6334df9-a5c4-4e86-a5f3-671760c2bbbe<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>  <span class="p">&amp;</span>ldquo<span class="p">;</span>TenantID<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>bd5829e0cb5b40b68ab4f8e7dc68b14d<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The output above proves that skydive agent has successfully read the configuration of the port and we can start a capture on that object to see any packets arriving on P1.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>skydive client capture create <span class="p">&amp;</span>ndash<span class="p">;</span>gremlin <span class="p">&amp;</span>ldquo<span class="p">;</span>G.V<span class="o">()</span>.Has<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Neutron.IPs<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>10.0.0.8<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>Type<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>tun<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>skydive client topology query <span class="p">&amp;</span>ndash<span class="p">;</span>gremlin <span class="p">&amp;</span>ldquo<span class="p">;</span>G.V<span class="o">()</span>.Has<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Neutron.IPs<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>10.0.0.8<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>Type<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>tun<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span>.Flows<span class="o">()</span>.Has<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Application<span class="p">&amp;</span>rsquo<span class="p">;</span>,<span class="p">&amp;</span>lsquo<span class="p">;</span>ICMPv4<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span>.Values<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Metric.ABPackets<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>  7
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>If you <code>watch</code> the last command for several seconds you should see that the number in brackets is increasing. That means that packets are hitting the ingress port of the FW VM. Now let&rsquo;s repeat the same test on <code>egress</code> port P2.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>skydive client capture create <span class="p">&amp;</span>ndash<span class="p">;</span>gremlin <span class="p">&amp;</span>ldquo<span class="p">;</span>G.V<span class="o">()</span>.Has<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Neutron.IPs<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>10.0.0.4<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>Type<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>tun<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>skydive client topology query <span class="p">&amp;</span>ndash<span class="p">;</span>gremlin <span class="p">&amp;</span>ldquo<span class="p">;</span>G.V<span class="o">()</span>.Has<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Neutron.IPs<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>10.0.0.4<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>Type<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>tun<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span>.Flows<span class="o">()</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The output above tells us that there are no packets coming out of the FW VM. This is expected since we haven&rsquo;t done any changes to the blank cirros image to make it forward the packets between the two interfaces. If we examine the IP configuration of the FW VM, we would see that it doesn&rsquo;t have an IP address configured on the second interface. We would also need to create a source-based routing policy to force all traffic from VM1 (<code>10.0.0.6</code>) to egress via interface <code>eth2</code> and make sure IP forwarding is turned on. The following commands would need to be executed on FW VM:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cirros-dhcpc up eth1
</span><span class='line'>sudo ip rule add from 10.0.0.6 table default
</span><span class='line'>sudo ip route add default via 10.0.0.1 dev eth1 table default
</span><span class='line'>sudo sysctl -w net.ipv4.ip_forward<span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure></p>

<p>Having done that, we should see some packets coming out of <code>egress</code> port P2.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>skydive client topology query <span class="p">&amp;</span>ndash<span class="p">;</span>gremlin <span class="p">&amp;</span>ldquo<span class="p">;</span>G.V<span class="o">()</span>.Has<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Neutron.IPs<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>10.0.0.4<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>Type<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>tun<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span>.Flows<span class="o">()</span>.Has<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Application<span class="p">&amp;</span>rsquo<span class="p">;</span>,<span class="p">&amp;</span>lsquo<span class="p">;</span>ICMPv4<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span>.Values<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Metric.ABPackets<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>  7
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>However form the VM1&rsquo;s perspective the ping is still failing. Next step would be to see if the packets are hitting the integration bridge that port P2 is attached to:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>skydive client capture create <span class="p">&amp;</span>ndash<span class="p">;</span>gremlin <span class="p">&amp;</span>ldquo<span class="p">;</span>G.V<span class="o">()</span>.Has<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Neutron.IPs<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>10.0.0.4<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>Type<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>veth<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>skydive client topology query <span class="p">&amp;</span>ndash<span class="p">;</span>gremlin <span class="p">&amp;</span>ldquo<span class="p">;</span>G.V<span class="o">()</span>.Has<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Neutron.IPs<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>10.0.0.4<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>Type<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>veth<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span>.Flows<span class="o">()</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>No packets means they are getting dropped somewhere between the P2 and the integration bridge. This can only be done by security groups. In fact, source MAC/IP anti-spoofing is enabled by default which would only allow packets matching the source MAC/IP addresses assigned to P2 and would drop any packets coming from VM1&rsquo;s IP address. The easiest fix would be to disable security groups for P2 completely:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openstack port <span class="nb">set</span> <span class="p">&amp;</span>ndash<span class="p">;</span>no-security-group <span class="p">&amp;</span>ndash<span class="p">;</span>disable-port-security P2
</span></code></pre></td></tr></table></div></figure></p>

<p>After this step the counters should start incrementing and the ping from VM1 to its default gateway is resumed.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>skydive client topology query <span class="p">&amp;</span>ndash<span class="p">;</span>gremlin <span class="p">&amp;</span>ldquo<span class="p">;</span>G.V<span class="o">()</span>.Has<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Neutron.IPs<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>10.0.0.4<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>Type<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>veth<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span>.Flows<span class="o">()</span>.Has<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Application<span class="p">&amp;</span>rsquo<span class="p">;</span>,<span class="p">&amp;</span>lsquo<span class="p">;</span>ICMPv4<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span>.Values<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>Metric.ABPackets<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>  79
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>SFC implementation in OVS forwarding pipeline</h2>

<p>The only element being affected in our case (both VM1 and FW are on the same compute node) is the integration bridge. Refer to my <a href="http://networkop.co.uk/blog/2016/04/22/neutron-native/">older post</a> about vanilla OpenStack networking for a refresher of the vanilla OVS-agent architecture.</p>

<p>Normally, I would start by collecting all port and flow details from the integration bridge with the following commands:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ovs-ofctl dump-ports-desc br-int  <span class="p">|</span> grep addr
</span><span class='line'>ovs-ofctl dump-flows br-int <span class="p">|</span> cut -d <span class="p">&amp;</span>lsquo<span class="p">;</span>,<span class="p">&amp;</span>rsquo<span class="p">;</span> -f3-
</span></code></pre></td></tr></table></div></figure></p>

<p>However, for the sake of brevity, I will omit the actual outputs and only show graphical representation of forwarding tables and packet flows. The tables below have two columns - first showing what is being matched and second showing the resulting action. Let&rsquo;s start with the OpenFlow rules in an integration bridge before SFC is configured:</p>

<p><img class="center" src="/images/sfc-before-tables.png"></p>

<p>As we can see, the table structure is quite simple, since integration bridge mostly relies on data-plane MAC learning. A couple of MAC and ARP anti-spoofing tables will check the validity of a packet and send it to table 60 where <code>NORMAL</code> action will trigger the &ldquo;flood-and-learn&rdquo; behaviour. Therefore, an ICMP packet coming from VM1 will take the following path:</p>

<p><img class="center" src="/images/sfc-before-packet.png"></p>

<p>After we&rsquo;ve configured SFC, the forwarding pipeline is changed and now looks like this:</p>

<p><img class="center" src="/images/sfc-after-tables.png"></p>

<p>First, we can see that table 0 acts as a classifier, by redirecting the &ldquo;interesting&rdquo; packets towards <code>group 1</code>. This groups is an <a href="https://floodlight.atlassian.net/wiki/spaces/floodlightcontroller/pages/7995427/How+to+Work+with+Fast-Failover+OpenFlow+Groups">OpenFlow Group</a> of type <code>select</code>, which load-balances traffic between multiple destinations. By default OVS will use a combination of L2-L4 header as described <a href="http://docs.openvswitch.org/en/latest/faq/openflow/">here</a> to calculate a hash which determines the output bucket, similar to how per-flow load-balancing works in traditional routers and switches. This behaviour can be overridden with a specific set of headers in <code>lb_fields</code> setting of a port pair group.</p>

<p>In our case we&rsquo;ve only got a single SF, so the packet gets its destination MAC updated to that of SF&rsquo;s ingress port and is forwarded to a new table 5. Table 5 is where all packets destined for a SF are aggregated with a single MPLS label which uniquely identifies the service function path. The packet is then forwarded to table 10, which I&rsquo;ve called <code>SFC Ingress</code>. This is where the packets are distributed to SF&rsquo;s ingress ports based on the assigned MPLS label.</p>

<p><img class="center" src="/images/sfc-after-packet.png"></p>

<p>After being processed by a SF, the packet leaves the <code>egress</code> port and re-enters the integration bridge. This time table 0 knows that the packet has already been processed by a SF and, since the anti-spoofing rules have been disabled, simply floods the packet out of all ports in the same VLAN. The packet gets flooded to the tunnel bridge where it gets replicated and delivered to the <code>qrouter</code> sitting on the controller node as per the <a href="http://networkop.co.uk/blog/2016/04/22/neutron-native/">default behaviour</a>.</p>

<h2>Upcoming enhancements</h2>

<p>SFC is a pretty vast topic and is still under active development. Some of the upcoming enhancement to the current implementation of SFC will include:</p>

<ul>
<li><strong>NSH</strong> header for SFC correlation</li>
<li><strong>TAP</strong> functionality which can replace the separate Tap-as-a-service OpenStack project</li>
<li><strong>Service graphs</strong> allowing multiple chains to be interconnected to create more complex service chain scenarios</li>
</ul>


<h2>Coming Up</h2>

<p>SFC is one of the major features in Telco SDN and, like many things, it&rsquo;s not meant to be configured manually. In fact, Telco SDN have their own framework for management and orchestration of VNFs (a.k.a. VMs) and VNF forwarding graphs (a.k.a. SFCs) called ETSI MANO. As it is expected from a Telco standard, it abounds with acronyms and confuses the hell out of anyone who&rsquo;s name is not on the list of authors or contributors. That&rsquo;s why in the next post I will try to provide a brief overview of what Telco SDN is and use Tacker, a software implementation of NFVO and VNFM, to automatically build a firewall VNF and provision a SFC, similar to what has been done in this post manually.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openstack SDN - Building a Containerized OpenStack Lab]]></title>
    <link href="http://networkop.github.io/blog/2017/09/08/os-lab-docker/"/>
    <updated>2017-09-08T00:00:00+01:00</updated>
    <id>http://networkop.github.io/blog/2017/09/08/os-lab-docker</id>
    <content type="html"><![CDATA[<p>I&rsquo;m returning to my OpenStack SDN series to explore some of the new platform features like service function chaining, network service orchestration, intent-based networking and dynamic WAN routing. To kick things off I&rsquo;m going to demonstrate my new fully-containerized OpenStack Lab that I&rsquo;ve built using an OpenStack project called Kolla.</p>

<!--more-->


<hr />

<p>For quite a long time installation and deployment have been deemed as major barriers for OpenStack adoption. The classic &ldquo;install everything manually&rdquo; approach could only work in small production or lab environments and the ever increasing number of project under the <a href="https://governance.openstack.org/tc/reference/projects/">&ldquo;Big Tent&rdquo;</a> made service-by-service installation infeasible. This led to the rise of automated installers that over time evolved from a simple collection of scripts to container management systems.</p>

<h2>Evolution of automated OpenStack installers</h2>

<p>The first generation of automated installers were simple utilities that tied together a collection of Puppet/Chef/Ansible scripts. Some of these tools could do baremetal server provisioning through Cobbler or Ironic (Fuel, Compass) and some relied on server operating system to be pre-installed (Devstack, Packstack). In either case the packages were pulled from the Internet or local repository every time the installer ran.</p>

<p>The biggest problem with the above approach is the time it takes to re-deploy, upgrade or scale the existing environment. Even for relatively small environments it could be hours before all packages are downloaded, installed and configured. One of the ways to tackle this is to pre-build an operating system with all the necessary packages and only use Puppet/Chef/Ansible to change configuration files and turn services on and off. Redhat&rsquo;s TripleO is one example of this approach. It uses a &ldquo;golden image&rdquo; with pre-installed OpenStack packages, which is dd-written bit-by-bit onto the baremetal server&rsquo;s disk. The undercloud then decides which services to turn on based on the overcloud server&rsquo;s role.</p>

<p>Another big problem with most of the existing deployment methods was that, despite their microservices architecture, all OpenStack services were deployed as static packages on top of a shared operating system. This made the ongoing operations, troubleshooting and ugprades really difficult. The obvious thing to do would be to have all OpenStack services (e.g. Neutron, Keyston, Nova) deployed as containers and managed by a container management system. The first company to implement that, as far as I know, was Canonical. The deployment process is quite complicated, however the end result is a highly flexible OpenStack cloud deployed using LXC containers, managed and orchestrated by Juju controller.</p>

<p>Today (September 2017) deploying OpenStack services as containers is becoming mainstream and in this post I&rsquo;ll show how to use Kolla to build container images and Kolla-Ansible to deploy them on a pair of &ldquo;baremetal&rdquo; VMs.</p>

<h2>Lab overview</h2>

<p>My lab consists of a single controller and a single compute VM. The goal was to make them as small as possible so they could run on a laptop with limited resources. Both VMs are connected to three VM bridged networks - provisioning, management and external VM access.</p>

<p><img class="center" src="/images/kolla-lab.png"></p>

<p>I&rsquo;ve written some bash and Ansible scripts to automate the deployment of VMs on top of any Fedora derivative (e.g. Centos7). These scripts should be run directly from the hypervisor:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/networkop/kolla-odl-bgpvpn.git&quot;</span>&gt;https://github.com/networkop/kolla-odl-bgpvpn.git&lt;/a&gt; <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="nb">cd </span>kolla-odl-bgpvpn
</span><span class='line'>./1-create.sh <span class="k">do</span>
</span><span class='line'>./2-bootstrap.sh <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The first bash script downloads the VM OS (Centos7), creates two blank VMs and sets up a local Docker registry. The second script installs all the dependencies, including Docker and Ansible.</p>

<h2>Building OpenStack docker containers with Kolla</h2>

<p>The first step in Kolla deployment workflow is deciding where to get the Docker images. Kolla maintains a <a href="https://hub.docker.com/u/kolla/">Docker Hub registry</a> with container images built for every major OpenStack release. The easiest way to get them would be to pull the images from Docker hub either directly or via a <a href="https://docs.docker.com/registry/recipes/mirror/">pull-through caching registry</a>.</p>

<p>In my case I needed to build the latest version of OpenStack packages, not just the latest major release. I also wanted to build a few additional, non-Openstack images (Opendaylight and Quagga). Because of that I had to build all Docker images locally and push them into a local docker registry. The procedure to build container images is very well documented in the official <a href="https://docs.openstack.org/kolla/latest/image-building.html">Kolla image building guide</a>. I&rsquo;ve modified it slightly to include the Quagga Dockerfile and automated it so that the whole process can be run with a single command:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./3-build.sh <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This step can take quite a long time (anything from 1 to 4 hours depending on the network and disk I/O speed), however, once it&rsquo;s been done these container images can be used to deploy as many OpenStack instances as necessary.</p>

<h2>Deploying OpenStack with Kolla-Ansible</h2>

<p>The next step in OpenStack deployment workflow is to deploy Docker images on target hosts. <a href="https://docs.openstack.org/kolla-ansible/latest/quickstart.html">Kolla-Ansible</a> is a highly customizable OpenStack deployment tool that is also extemely easy to use, at least for people familiar with Ansible. There are two main sources of information for Kolla-Ansible:</p>

<ul>
<li>Global configuration file (/etc/kolla/globals.yaml), which contains some of the most common customization options</li>
<li>Ansible inventory file (/usr/share/kolla-ansible/ansible/inventory/*), which maps OpenStack packages to target deployment hosts</li>
</ul>


<p>To get started with Kolla-Ansible all what it takes is a few modifications to the global configuration file to make sure that network settings match the underlying OS interface configuration and an update to the inventory file to point it to the correct deployment hosts. In my case I&rsquo;m making additional changes to enable SFC, Skydive and Tacker and adding files for Quagga container, all of which can be done with the following command:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./4-deploy.sh <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The best thing about this method of deployment is that it takes (in my case) under 5 minutes to get the full OpenStack cloud from scratch. That means if I break something or want to redeploy with some major changes (add/remove Opendaylight), all what I have to do is destroy the existing deployment (approx. 1 minute), modify global configuration file and re-deploy OpenStack. This makes Kolla-Ansible an ideal choice for my lab environment.</p>

<h2>Overview of containerized Openstack</h2>

<p>Once the deployment has been completed, we should be able to see a number of running Docker containers - one for each OpenStack process.</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@compute-1# docker ps
</span><span class='line'>CONTAINER ID        IMAGE                                                                 COMMAND             CREATED             STATUS              PORTS               NAMES
</span><span class='line'>0bb8a8eeb1a9        172.26.0.1:5000/kolla/centos-source-skydive-agent:5.0.0               <span class="p">&amp;</span>ldquo<span class="p">;</span>kolla_start<span class="p">&amp;</span>rdquo<span class="p">;</span>       <span class="m">3</span> days ago          Up <span class="m">3</span> days                               skydive_agent
</span><span class='line'>63b5b643dfae        172.26.0.1:5000/kolla/centos-source-neutron-openvswitch-agent:5.0.0   <span class="p">&amp;</span>ldquo<span class="p">;</span>kolla_start<span class="p">&amp;</span>rdquo<span class="p">;</span>       <span class="m">3</span> days ago          Up <span class="m">3</span> days                               neutron_openvswitch_agent
</span><span class='line'>f6f74c5982cb        172.26.0.1:5000/kolla/centos-source-openvswitch-vswitchd:5.0.0        <span class="p">&amp;</span>ldquo<span class="p">;</span>kolla_start<span class="p">&amp;</span>rdquo<span class="p">;</span>       <span class="m">3</span> days ago          Up <span class="m">3</span> days                               openvswitch_vswitchd
</span><span class='line'>3078421a3892        172.26.0.1:5000/kolla/centos-source-openvswitch-db-server:5.0.0       <span class="p">&amp;</span>ldquo<span class="p">;</span>kolla_start<span class="p">&amp;</span>rdquo<span class="p">;</span>       <span class="m">3</span> days ago          Up <span class="m">3</span> days                               openvswitch_db
</span><span class='line'>9146c16d561b        172.26.0.1:5000/kolla/centos-source-nova-compute:5.0.0                <span class="p">&amp;</span>ldquo<span class="p">;</span>kolla_start<span class="p">&amp;</span>rdquo<span class="p">;</span>       <span class="m">3</span> days ago          Up <span class="m">3</span> days                               nova_compute
</span><span class='line'>8079f840627f        172.26.0.1:5000/kolla/centos-source-nova-libvirt:5.0.0                <span class="p">&amp;</span>ldquo<span class="p">;</span>kolla_start<span class="p">&amp;</span>rdquo<span class="p">;</span>       <span class="m">3</span> days ago          Up <span class="m">3</span> days                               nova_libvirt
</span><span class='line'>220d617d31a5        172.26.0.1:5000/kolla/centos-source-nova-ssh:5.0.0                    <span class="p">&amp;</span>ldquo<span class="p">;</span>kolla_start<span class="p">&amp;</span>rdquo<span class="p">;</span>       <span class="m">3</span> days ago          Up <span class="m">3</span> days                               nova_ssh
</span><span class='line'>743ce602d485        172.26.0.1:5000/kolla/centos-source-cron:5.0.0                        <span class="p">&amp;</span>ldquo<span class="p">;</span>kolla_start<span class="p">&amp;</span>rdquo<span class="p">;</span>       <span class="m">3</span> days ago          Up <span class="m">3</span> days                               cron
</span><span class='line'>8b71f08d2781        172.26.0.1:5000/kolla/centos-source-kolla-toolbox:5.0.0               <span class="p">&amp;</span>ldquo<span class="p">;</span>kolla_start<span class="p">&amp;</span>rdquo<span class="p">;</span>       <span class="m">3</span> days ago          Up <span class="m">3</span> days                               kolla_toolbox
</span><span class='line'>f76d0a7fcf2a        172.26.0.1:5000/kolla/centos-source-fluentd:5.0.0                     <span class="p">&amp;</span>ldquo<span class="p">;</span>kolla_start<span class="p">&amp;</span>rdquo<span class="p">;</span>       <span class="m">3</span> days ago          Up <span class="m">3</span> days                               fluentd
</span></code></pre></td></tr></table></div></figure></p>

<p>All the standard docker tools are available to interact with those containers. For example, this is how we can see what processes are running inside a container:</p>

<p><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@compute-1# docker <span class="nb">exec </span>nova_compute ps -www aux
</span><span class='line'>USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
</span><span class='line'>nova         <span class="m">1</span>  0.0  0.0    <span class="m">188</span>     <span class="m">4</span> pts/3    Ss+  Sep04   0:00 /usr/local/bin/dumb-init /bin/bash /usr/local/bin/kolla_start
</span><span class='line'>nova         <span class="m">7</span>  0.7  1.3 <span class="m">2292560</span> <span class="m">134896</span> ?      Ssl  Sep04  35:33 /var/lib/kolla/venv/bin/python /var/lib/kolla/venv/bin/nova-compute
</span><span class='line'>root        <span class="m">86</span>  0.0  0.3 <span class="m">179816</span> <span class="m">32900</span> ?        S    Sep05   0:00 /var/lib/kolla/venv/bin/python /var/lib/kolla/venv/bin/privsep-helper <span class="p">&amp;</span>ndash<span class="p">;</span>config-file /etc/nova/nova.conf <span class="p">&amp;</span>ndash<span class="p">;</span>privsep_context vif_plug_ovs.privsep.vif_plug <span class="p">&amp;</span>ndash<span class="p">;</span>privsep_sock_path /tmp/tmpFvP0GS/privsep.sock
</span></code></pre></td></tr></table></div></figure></p>

<p>Some of you may have noticed that none of the containers expose any ports. So how do they communicate? The answer is very simple - all containers run in a <strong>host</strong> networking mode, effectively disabling any network isolation and giving all contaners access to TCP/IP stacks of their Docker hosts. This is a simple way to avoid having to deal with Docker networking complexities, while at the same time preserving the immutability and portability of Docker containers.</p>

<p>All containers are configured to restart in case of a failure, however there&rsquo;s no <abbr title="Container Management System">CMS</abbr> to provide full lifecycle management and advanced scheduling. If upgrade of scale-in/out is needed, Kolla-Ansible will have to be re-run with updated configuration options. There is sibling project called <a href="https://github.com/openstack/kolla-kubernetes">Kolla-Kubernetes</a> (still under developement), that&rsquo;s designed to address some of the mentioned shortcomings.</p>

<h2>Coming up</h2>

<p>Now that the lab is up we can start exploring the new OpenStack SDN features. In the next post I&rsquo;ll have a close look at Neutron&rsquo;s <abbr title=" Service Function Chainng">SFC</abbr> feature, how to configure it and how it&rsquo;s been implemented in OVS forwarding pipeline.</p>
]]></content>
  </entry>
  
</feed>
