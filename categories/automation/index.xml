<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Automation on networkop</title>
    <link>https://networkop.co.uk/categories/automation/</link>
    <description>Recent content in Automation on networkop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Michael Kashin 2018</copyright>
    <lastBuildDate>Fri, 12 May 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://networkop.co.uk/categories/automation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux SSH Session Management for Network Engineers</title>
      <link>https://networkop.co.uk/blog/2017/05/12/linux-ssh/</link>
      <pubDate>Fri, 12 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2017/05/12/linux-ssh/</guid>
      <description>A few weeks ago I bought myself a new Dell XPS-13 and decided for the n-th time to go all-in Linux, that is to have Linux as the main and only laptop OS. Since most of my Linux experience is with Fedora-family distros, I quickly installed Fedora-25 and embarked on a long and painful journey of getting out of my Windows comfort zone and re-establishing it in Linux. One of the most important aspects for me, as a network engineer, is to have a streamlined process of accessing network devices.</description>
    </item>
    
    <item>
      <title>Using YANG Models in Ansible to Configure and Verify State of IOS-XE and JUNOS Devices</title>
      <link>https://networkop.co.uk/blog/2017/04/04/ansible-yang/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2017/04/04/ansible-yang/</guid>
      <description>The idea of using Ansible for configuration changes and state verification is not new. However the approach I&amp;rsquo;m going to demonstrate in this post, using YANG and NETCONF, will have a few notable differences:
 I will not use any templates and absolutely no XML/JSON for device config generation All changes will be pushed through a single, vendor and model-independent Ansible module State verification will be done with no pattern-matching or screen-scraping All configuration and operational state will be based on a couple of YAML files To demonstrate the model-agnostic behaviour I will use a mixture of vendor&amp;rsquo;s native, IETF and OpenConfig YANG models  I hope this promise is exciting enough so without further ado, let&amp;rsquo;s get cracking.</description>
    </item>
    
    <item>
      <title>Configuring Cisco IOS XE With YANG-based YAML Files</title>
      <link>https://networkop.co.uk/blog/2017/03/13/yaml-yang/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2017/03/13/yaml-yang/</guid>
      <description>XML, just like many more structured data formats, was not designed to be human-friendly. That&amp;rsquo;s why many network engineers lose interest in YANG as soon as the conversation gets to the XML part. JSON is a much more human-readable alternative, however very few devices support RESTCONF, and the ones that do may have buggy implementations. At the same time, a lot of network engineers have happily embraced Ansible, which extensively uses YAML.</description>
    </item>
    
    <item>
      <title>Configuring Cisco IOS XE With YDK and OpenDaylight</title>
      <link>https://networkop.co.uk/blog/2017/02/22/odl-ydk/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2017/02/22/odl-ydk/</guid>
      <description>In the previous posts about NETCONF and RESTCONF I&amp;rsquo;ve demonstrated how to interact with Cisco IOS XE device directly from the Linux shell of my development VM. This approach works fine in some cases, e.g. whenever I setup a new DC fabric, I would make calls directly to the devices I&amp;rsquo;m configuring. However, it becomes impractical in the Ops world where change is constant and involves a large number of devices.</description>
    </item>
    
    <item>
      <title>Introduction to YANG Programming and RESTCONF on Cisco IOS XE</title>
      <link>https://networkop.co.uk/blog/2017/02/15/restconf-yang/</link>
      <pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2017/02/15/restconf-yang/</guid>
      <description>In the previous post I have demonstrated how to make changes to interface configuration of Cisco IOS XE device using the standard IETF model. In this post I&amp;rsquo;ll show how to use Cisco&amp;rsquo;s native YANG model to modify static IP routes. To make things even more interesting I&amp;rsquo;ll use RESTCONF, an HTTP-based sibling of NETCONF.
RESTCONF primer RESTCONF is a very close functional equivalent of NETCONF. Instead of SSH, RESTCONF relies on HTTP to interact with configuration data and operational state of the network device and encodes all exchanged data in either XML or JSON.</description>
    </item>
    
    <item>
      <title>Getting Started With NETCONF and YANG on Cisco IOS XE</title>
      <link>https://networkop.co.uk/blog/2017/01/25/netconf-intro/</link>
      <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2017/01/25/netconf-intro/</guid>
      <description>To kick things off I will show how to use ncclient and pyang to configure interfaces on Cisco IOS XE device. In order to make sure everyone is on the same page and to provide some reference points for the remaining parts of the post, I would first need to cover some basic theory about NETCONF, XML and YANG.
NETCONF primer NETCONF is a network management protocol that runs over a secure transport (SSH, TLS etc.</description>
    </item>
    
    <item>
      <title>Automating the Build of OpenStack Lab (Part 2)</title>
      <link>https://networkop.co.uk/blog/2016/09/09/os-lab-p2/</link>
      <pubDate>Fri, 09 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/09/09/os-lab-p2/</guid>
      <description>In the last post we&amp;rsquo;ve seen how to use Chef to automate the build of a 3-node OpenStack cloud. The only thing remaining is to build an underlay network supporting communication between the nodes, which is what we&amp;rsquo;re going to do next. The build process will, again, be relatively simple and will include only a few manual steps, but before we get there let me go over some of the decisions and assumptions I&amp;rsquo;ve made in my network design.</description>
    </item>
    
    <item>
      <title>Automating the Build of OpenStack Lab (Part 1)</title>
      <link>https://networkop.co.uk/blog/2016/08/26/os-lab-p1/</link>
      <pubDate>Fri, 26 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/08/26/os-lab-p1/</guid>
      <description>Now that I&amp;rsquo;m finally beginning to settle down at my new place of residence I can start spending more time on research and blogging. I have left off right before I was about to start exploring the native OpenStack distributed virtual routing function. However as I&amp;rsquo;d started rebuilding my OpenStack lab from scratch I realised that I was doing a lot of repetitive tasks which can be easily automated. Couple that with the fact that I needed to learn Chef for my new work and you&amp;rsquo;ve got this blogpost describing a few Chef cookbooks (similar to Ansible&amp;rsquo;s playbook) automating all those manual steps described in my earlier blogposts 1 and 2.</description>
    </item>
    
  </channel>
</rss>