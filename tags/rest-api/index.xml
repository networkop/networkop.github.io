<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>REST-API on networkop</title>
    <link>https://networkop.co.uk/tags/rest-api/</link>
    <description>Recent content in REST-API on networkop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Michael Kashin 2021</copyright>
    <lastBuildDate>Sun, 17 Jan 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://networkop.co.uk/tags/rest-api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>REST for Network Engineers Part 3 - Advanced Operations With UnetLab</title>
      <link>https://networkop.co.uk/blog/2016/01/17/rest-unl-advanced/</link>
      <pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/01/17/rest-unl-advanced/</guid>
      <description>Extracting Node&amp;rsquo;s UUID In the previous post we have learned how to create a Node. To perform further actions on it we need to know it&amp;rsquo;s UUID. According to HTTP specification 201 - Created response SHOULD return a Location header with resource URI, which would contain resource UUID. However, UNetLab&amp;rsquo;s implementation does not return a Location header so we need to extract that information ourselves. To do that we&amp;rsquo;ll use the previously defined .</description>
    </item>
    
    <item>
      <title>REST for Network Engineers Part 2 - Basic Operations With UnetLab</title>
      <link>https://networkop.co.uk/blog/2016/01/06/rest-basic-operations/</link>
      <pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/01/06/rest-basic-operations/</guid>
      <description>REST SDK Design As it is with networks, design is a very crucial part of programming. I won&amp;rsquo;t pretend to be an expert in that field and merely present the way I&amp;rsquo;ve built REST SDK. Fortunately, a lot of design will mimic the objects and their relationship on the server side. I&amp;rsquo;ll slightly enhance it to improve code re-use and portability. Here are the basic objects:
 RestServer - implements basic application-agnostic HTTP CRUD logic UnlServer - an extension of a RestServer with specific authentication method (cookie-based) and several additional methods Device - an instance of a network device with specific attributes like type, image name, number of CPUs UnlLab - a lab instance existing inside a UnlServer UnlNode - a node instance existing inside a UnlLab UnlNet - a network instance also existing inside a UnlLab object  All these objects and their relationships are depicted on the following simplified UML diagram.</description>
    </item>
    
    <item>
      <title>REST for Network Engineers Part 1 - Development Environment Setup</title>
      <link>https://networkop.co.uk/blog/2016/01/03/dev-env-setup-rest/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/01/03/dev-env-setup-rest/</guid>
      <description>UnetLab Installation Since UNL is a separate project with its own evolving documentation I won&amp;rsquo;t try to reproduce it in my blog and I&amp;rsquo;ll simply refer all my readers to UNL download page, UNL installation instructions and UNL first boot configuration.
At the time of writing UNL is distributed as an image packaged in Open Virtualization Format. I&amp;rsquo;m using VMWare Workstation as a type-2 hypervisor to import and run this image.</description>
    </item>
    
    <item>
      <title>REST API for Network Engineers</title>
      <link>https://networkop.co.uk/blog/2016/01/01/rest-for-neteng/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/01/01/rest-for-neteng/</guid>
      <description>Management interface evolution Since the early dawn of networking, devices have been configured through VTYs. The transport has evolved from telnet to ssh but the underlying rule still maintained that network is configured manually, device-by-device by a human administrator. It&amp;rsquo;s obvious that this approach does not scale and is prone to human error, however it still remains the most prevalent method of network device configuration.
The first attempt to tackle these issues has been made in 1988 with the introduction of SNMP.</description>
    </item>
    
  </channel>
</rss>