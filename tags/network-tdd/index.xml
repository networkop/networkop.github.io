<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>network-TDD on networkop</title>
    <link>https://networkop.co.uk/tags/network-tdd/</link>
    <description>Recent content in network-TDD on networkop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Michael Kashin 2018</copyright>
    <lastBuildDate>Fri, 17 Jul 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://networkop.co.uk/tags/network-tdd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Network TDD Quickstart Guide</title>
      <link>https://networkop.co.uk/blog/2015/07/17/tdd-quickstart/</link>
      <pubDate>Fri, 17 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2015/07/17/tdd-quickstart/</guid>
      <description>This post gives a quick overview of how to use network Test Driven Development framework. As an example I&amp;rsquo;ll use a simplified version of a typical enterprise network with a Data Centre/HQ and a Branch office. A new branch is being added and the task is to configure routing for that branch using a TDD approach. First we&amp;rsquo;ll devise a set of TDD scenarios to be tested and then, going through each one of them, modify routing to make sure those scenarios don&amp;rsquo;t fail (a so-called red-green-refactor approach)</description>
    </item>
    
    <item>
      <title>Verifying TDD Scenarios</title>
      <link>https://networkop.co.uk/blog/2015/07/10/test-verification/</link>
      <pubDate>Fri, 10 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2015/07/10/test-verification/</guid>
      <description>Writing a custom Ansible module to verify TDD scenarios</description>
    </item>
    
    <item>
      <title>Developing Custom Ansible Modules</title>
      <link>https://networkop.co.uk/blog/2015/07/03/parser-modules/</link>
      <pubDate>Fri, 03 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2015/07/03/parser-modules/</guid>
      <description>IP Address Information Collection With Custom Ansible Modules</description>
    </item>
    
    <item>
      <title>Getting Started With Ansible for Cisco IOS</title>
      <link>https://networkop.co.uk/blog/2015/06/24/ansible-intro/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2015/06/24/ansible-intro/</guid>
      <description>Ansible quickstart guide for Cisco IOS</description>
    </item>
    
    <item>
      <title>Development Environment Setup</title>
      <link>https://networkop.co.uk/blog/2015/06/17/dev-env-setup/</link>
      <pubDate>Wed, 17 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2015/06/17/dev-env-setup/</guid>
      <description>Setting up development and test environments</description>
    </item>
    
    <item>
      <title>Building a Simple Network TDD Framework</title>
      <link>https://networkop.co.uk/blog/2015/06/15/simple-tdd-framework/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2015/06/15/simple-tdd-framework/</guid>
      <description>In the following series of posts I will show how to build a simple Test-Driven Development framework for Cisco devices. This framework will allow a network engineer to define traffic patterns in a human-readable format and automatically check if those assumption hold. It will be built as a series of Ansible modules and playbooks. The idea is to show an example of how programming can be used by network engineers even now, before all devices acquire their own APIs as well as introduce some well-known programming paradigms and best practices to network engineers thereby making a small step towards networking nirvana a.k.a. SDN. The reader is assumed to have only a basic networking, linux and python programming skills</description>
    </item>
    
  </channel>
</rss>