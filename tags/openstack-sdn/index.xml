<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenStack-SDN on networkop</title>
    <link>https://networkop.co.uk/tags/openstack-sdn/</link>
    <description>Recent content in OpenStack-SDN on networkop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Michael Kashin 2018</copyright>
    <lastBuildDate>Tue, 02 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://networkop.co.uk/tags/openstack-sdn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OpenStack SDN - OpenContrail With BGP VPN</title>
      <link>https://networkop.co.uk/blog/2018/01/02/os-contrail/</link>
      <pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2018/01/02/os-contrail/</guid>
      <description>Continuing on the trend started in my previous post about OpenDaylight, I&amp;rsquo;ll move on to the next open-source product that uses BGP VPNs for optimal North-South traffic forwarding. OpenContrail is one of the most popular SDN solutions for OpenStack. It was one of the first hybrid SDN solutions, offering both pure overlay and overlay/underlay integration. It is the default SDN platform of choice for Mirantis Cloud Platform, it has multiple large-scale deployments in companies like Workday and AT&amp;amp;T.</description>
    </item>
    
    <item>
      <title>OpenStack SDN - OpenDaylight With BGP VPN</title>
      <link>https://networkop.co.uk/blog/2017/12/15/os-odl-netvirt/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2017/12/15/os-odl-netvirt/</guid>
      <description>For the last 5 years OpenStack has been the training ground for a lot of emerging DC SDN solutions. OpenStack integration use case was one of the most compelling and easiest to implement thanks to the limited and suboptimal implementation of the native networking stack. Today, in 2017, features like L2 population, local ARP responder, L2 gateway integration, distributed routing and service function chaining have all become available in vanilla OpenStack and don&amp;rsquo;t require a proprietary SDN controller anymore.</description>
    </item>
    
    <item>
      <title>OpenStack SDN - NFV Management and Orchestration</title>
      <link>https://networkop.co.uk/blog/2017/11/23/os-nfv-mano/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2017/11/23/os-nfv-mano/</guid>
      <description>In the ongoing hysteria surrounding all things SDN, one important thing gets often overlooked. You don&amp;rsquo;t build SDN for its own sake. SDN is just a little cog in a big machine called &amp;ldquo;cloud&amp;rdquo;. To take it even further, I would argue that the best SDN solution is the one that you don&amp;rsquo;t know even exists. Despite what the big vendors tell you, operators are not supposed to interact with SDN interface, be it GUI or CLI.</description>
    </item>
    
    <item>
      <title>OpenStack SDN - Skydiving Into Service Function Chaining</title>
      <link>https://networkop.co.uk/blog/2017/09/15/os-sfc-skydive/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2017/09/15/os-sfc-skydive/</guid>
      <description>SFC is another SDN feature that for a long time only used to be available in proprietary SDN solutions and that has recently become available in vanilla OpenStack. It serves as another proof that proprietary SDN solutions are losing the competitive edge, especially for Telco SDN/NFV use cases. Hopefully, by the end of this series of posts I&amp;rsquo;ll manage do demonstrate how to build a complete open-source solution that has feature parity (in terms of major networking features) with all the major proprietary data centre SDN platforms.</description>
    </item>
    
    <item>
      <title>OpenStack SDN - Building a Containerized OpenStack Lab</title>
      <link>https://networkop.co.uk/blog/2017/09/08/os-lab-docker/</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2017/09/08/os-lab-docker/</guid>
      <description>For quite a long time installation and deployment have been deemed as major barriers for OpenStack adoption. The classic &amp;ldquo;install everything manually&amp;rdquo; approach could only work in small production or lab environments and the ever increasing number of project under the &amp;ldquo;Big Tent&amp;rdquo; made service-by-service installation infeasible. This led to the rise of automated installers that over time evolved from a simple collection of scripts to container management systems.</description>
    </item>
    
    <item>
      <title>OpenStack SDN With OVN (Part 2) - Network Engineering Analysis</title>
      <link>https://networkop.co.uk/blog/2016/12/10/ovn-part2/</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/12/10/ovn-part2/</guid>
      <description>Table of Contents  OpenStack - virtual network topology OVN Northbound DB - logical network topology OVN Southbound DB - logical flows  L2 datapath L3 datapath  OVN Controller - OpenFlow flows Physical network - GENEVE overlay Conclusion   OpenStack - virtual network topology In the previous post we have installed OpenStack and created a simple virtual topology as shown below. In OpenStack&amp;rsquo;s data model this topology consists of the following elements:</description>
    </item>
    
    <item>
      <title>OpenStack SDN With OVN (Part 1) - Build and Install</title>
      <link>https://networkop.co.uk/blog/2016/11/27/ovn-part1/</link>
      <pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/11/27/ovn-part1/</guid>
      <description>Vanilla OpenStack networking has many functional, performance and scaling limitations. Projects like L2 population, local ARP responder, L2 Gateway and DVR were conceived to address those issues. However good a job these projects do, they still remain a collection of separate projects, each with its own limitations, configuration options and sets of dependencies. That led to an effort outside of OpenStack to develop a special-purpose OVS-only SDN controller that would address those issues in a centralised and consistent manner.</description>
    </item>
    
    <item>
      <title>OpenStack SDN - Distributed Virtual Routing</title>
      <link>https://networkop.co.uk/blog/2016/10/13/os-dvr/</link>
      <pubDate>Thu, 13 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/10/13/os-dvr/</guid>
      <description>Table of Contents  Virtual topology overview Virtual topology setup non-DVR traffic flow Enabling DVR DVR East-West traffic flow External connectivity  Case 1 - Overload NAT (VM2 with no FIP) Case 2 - Static NAT (VM1 with FIP)  DVR Pros and Cons   To be honest I was a little hesitant to write this post because the topic of Neutron&amp;rsquo;s DVR has already been exhaustively covered by many, including Assaf Muller, Eran Gampel and in the official OpenStack networking guide.</description>
    </item>
    
    <item>
      <title>Automating the Build of OpenStack Lab (Part 2)</title>
      <link>https://networkop.co.uk/blog/2016/09/09/os-lab-p2/</link>
      <pubDate>Fri, 09 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/09/09/os-lab-p2/</guid>
      <description>In the last post we&amp;rsquo;ve seen how to use Chef to automate the build of a 3-node OpenStack cloud. The only thing remaining is to build an underlay network supporting communication between the nodes, which is what we&amp;rsquo;re going to do next. The build process will, again, be relatively simple and will include only a few manual steps, but before we get there let me go over some of the decisions and assumptions I&amp;rsquo;ve made in my network design.</description>
    </item>
    
    <item>
      <title>Automating the Build of OpenStack Lab (Part 1)</title>
      <link>https://networkop.co.uk/blog/2016/08/26/os-lab-p1/</link>
      <pubDate>Fri, 26 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/08/26/os-lab-p1/</guid>
      <description>Now that I&amp;rsquo;m finally beginning to settle down at my new place of residence I can start spending more time on research and blogging. I have left off right before I was about to start exploring the native OpenStack distributed virtual routing function. However as I&amp;rsquo;d started rebuilding my OpenStack lab from scratch I realised that I was doing a lot of repetitive tasks which can be easily automated. Couple that with the fact that I needed to learn Chef for my new work and you&amp;rsquo;ve got this blogpost describing a few Chef cookbooks (similar to Ansible&amp;rsquo;s playbook) automating all those manual steps described in my earlier blogposts 1 and 2.</description>
    </item>
    
    <item>
      <title>OpenStack SDN - Interconnecting VMs and Physical Devices With Cumulus VX L2 Gateway</title>
      <link>https://networkop.co.uk/blog/2016/05/21/neutron-l2gw/</link>
      <pubDate>Sat, 21 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/05/21/neutron-l2gw/</guid>
      <description>Since I have all my OpenStack environment running inside UNetLab, it makes it really easy for me to extend my L3 fabric with a switch from another vendor. In my previous posts I&amp;rsquo;ve used Cisco and Arista switches to build a 4-leaf 2-spine CLOS fabric. For this task I&amp;rsquo;ve decided to use a Cumulus VX switch which I&amp;rsquo;ve downloaded and imported into my lab.
To simulate the baremetal server (10.</description>
    </item>
    
    <item>
      <title>OpenStack SDN - Extending a L2 Provider Network Over a L3 Fabric</title>
      <link>https://networkop.co.uk/blog/2016/05/11/neutron-routed-extnet/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/05/11/neutron-routed-extnet/</guid>
      <description>Provider vs Tenant networks Before we start, let&amp;rsquo;s recap the difference between the two major Neutron network types:
 Tenant networks are:  provisioned by tenants used for inter-VM (east-west) communication use Neutron virtual router as their default gateway  Provider networks are:  provisioned by OpenStack administrator(for use by tenants) match existing physical networks can be either flat (untagged VLAN) or VLAN-based (multiple VLANs) need to be L2 adjacent to network and/or compute nodes   These two network types are not mutually exclusive.</description>
    </item>
    
    <item>
      <title>OpenStack SDN - L2 Population and ARP Proxy</title>
      <link>https://networkop.co.uk/blog/2016/05/06/neutron-l2pop/</link>
      <pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/05/06/neutron-l2pop/</guid>
      <description>MAC learning in a controller-less VXLAN overlay VXLAN standard does not specify any control plane protocol to exchange MAC-IP bindings between VTEPs. Instead it relies on data plane flood-and-learn behaviour, just like a normal switch. To force this behaviour in an underlay, the standard stipulates that each VXLAN network should be mapped to its own multicast address and each VTEP participating in a network should join the corresponding multicast group.</description>
    </item>
    
    <item>
      <title>Network Engineering Analysis of OpenStack SDN</title>
      <link>https://networkop.co.uk/blog/2016/04/22/neutron-native/</link>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/04/22/neutron-native/</guid>
      <description>Table of Contents  Intro High Level Overview Unicast frame between VM1 and VM2 Unicast frame between VM1 and External host BUM frame from VM1 for MAC address of VM2 OpenvSwitch quick intro Detailed packet flow analysis Enumerating OVS ports Unicast frame between VM1 and VM2 Unicast frame to external host (192.168.247.1) BUM frame from VM1 for MAC address of VM2 Native OpenStack SDN advantages and limitation Things to explore next C2O References   Intro This is going to be quite a lengthy blogpost so I&amp;rsquo;ll try to explain its structure first.</description>
    </item>
    
    <item>
      <title>Building a Multi-node OpenStack Lab in UNetLab</title>
      <link>https://networkop.co.uk/blog/2016/04/18/os-unl-lab/</link>
      <pubDate>Tue, 19 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/04/18/os-unl-lab/</guid>
      <description>OpenStack network requirements Depending on the number of deployed components, OpenStack physical network requirements could be different. In our case we&amp;rsquo;re not going to deploy any storage solution and simply use the ephemeral storage, i.e. hard disk that&amp;rsquo;s a part of a virtual machine. However, even in minimal installations, there are a number of networks that should be considered individually due to different connectivity requirements:
 Server OOB management network - this is usually a dedicated physical network used mainly for server bootstrapping and OS deployment.</description>
    </item>
    
    <item>
      <title>OpenStack on UNetlab</title>
      <link>https://networkop.co.uk/blog/2016/04/04/openstack-unl/</link>
      <pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/blog/2016/04/04/openstack-unl/</guid>
      <description>What the hell am I trying to do? I admit that running OpenStack on anything other than baremetal is nonsense. So why would anyone want to run it with two layers of virtualisation underneath? My goal is to explore some of the new SDN/NFV technologies without leaving the confines of my home area network and/or racking up a triple-digit electricity bill. I also wanted to be able to swap underlay networks without spending hours trying to plumb together virtualized switches and servers from multiple vendors.</description>
    </item>
    
  </channel>
</rss>