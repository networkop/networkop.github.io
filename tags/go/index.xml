<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on networkop</title>
    <link>https://networkop.co.uk/tags/go/</link>
    <description>Recent content in go on networkop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Michael Kashin 2021</copyright>
    <lastBuildDate>Mon, 08 Mar 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://networkop.co.uk/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started with eBPF and Go</title>
      <link>https://networkop.co.uk/post/2021-03-ebpf-intro/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://networkop.co.uk/post/2021-03-ebpf-intro/</guid>
      <description>eBPF has a thriving ecosystem with a plethora of educational resources both on the subject of eBPF itself and its various application, including XDP. Where it becomes confusing is when it comes to the choice of libraries and tools to interact with and orchestrate eBPF. Here you have to select between a Python-based BCC framework, C-based libbpf and a range of Go-based libraries from Dropbox, Cilium, Aqua and Calico. Another important area that is often overlooked is the &amp;ldquo;productionisation&amp;rdquo; of the eBPF code, i.</description>
    </item>
    
  </channel>
</rss>