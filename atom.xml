<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Network-oriented programming]]></title>
  <link href="http://networkop.github.io/atom.xml" rel="self"/>
  <link href="http://networkop.github.io/"/>
  <updated>2015-07-09T21:00:46-07:00</updated>
  <id>http://networkop.github.io/</id>
  <author>
    <name><![CDATA[Michael Kashin]]></name>
    <email><![CDATA[mmkashin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Verifying Test Scenarios]]></title>
    <link href="http://networkop.github.io/blog/2015/07/10/test-verification/"/>
    <updated>2015-07-10T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/07/10/test-verification</id>
    <content type="html"><![CDATA[<p>Now that Ansible has done all the information gathering for us it&rsquo;s time to finally make use of it. In this post I will show how to use Ansible to run traceroutes from and to the hosts defined in a test scenario and perform verification of the results of those tests. Should any of those tests fail, Ansible will provide a meaningful description of what exactly failed and why. While doing all this I&rsquo;ll introduce a couple of new Ansible features like conditional looping and interactive prompts.</p>

<!--more-->


<h2>TDD Playbook</h2>

<p>In order to run and verify tests I will create a separate playbook. It makes sense to separate it from the <a href="http://networkop.github.io/blog/2015/07/03/parser-modules/">previous playbook</a> simply because this time it will be used multiple times, while the information gathering playbook can only be run once. The new playbook will have to accomplish the following tasks:</p>

<ol>
<li>Select which scenario to test</li>
<li>Run tests as specified in that scenario</li>
<li>Parse test results</li>
<li>Verify that test results conform to the specification</li>
</ol>


<h2>Selecting test scenario</h2>

<p>Our <code>scenarios/all.txt</code> file contains multiple test scenarios each defined by a name. Each test scenario represent a certain state in the network, e.g. scenario #1 tests how the network behaves in a normal state with no outages or link failures, scenario #2 tests how traffic should be rerouted in the event of primary link failure. Inside each scenario there are one or more test steps each testing a behaviour of a particular traffic flow, e.g. traffic from router R1 to router R4 should traverse R2 followed by R3. Each steps contains keywords <code>From</code>, <code>To</code> and <code>Via</code> which identify  source, destination and transit routers. This is how a typical scenario file looks like.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>~/tdd_ansible/scenarios/all.txt </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>1. Testing of Primary Link
</span><span class='line'>1.1 From R1 to R3 via R2
</span><span class='line'>1.2 From R1 to R4 via R2, R3
</span><span class='line'>1.3 From R2 to R4 via R3
</span><span class='line'>1.4 From R1 to R2 via R2
</span><span class='line'>2. Testing of Backup Link
</span><span class='line'>2.1 From R1 to R3 via R4
</span><span class='line'>2.2 From R1 to R2 via R4,R3
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>In the <a href="http://networkop.github.io/blog/2015/07/03/parser-modules/">previous post</a> I showed how to parse and store these scenarios in YAML dictionary in <code>group_vars/all.yml</code> file, which makes this information automatically available to any future playbooks. So in the new playbook all we need to do is let the user decide which scenario to test:</p>

<figure class='code'><figcaption><span>~/tdd_ansible/cisco_tdd.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Run traceroute commands</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco-devices</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">remote_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">vars_prompt</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">scenario_num</span>
</span><span class='line'>      <span class="l-Scalar-Plain">prompt</span><span class="p-Indicator">:</span> <span class="s">&quot;Enter</span><span class="nv"> </span><span class="s">scenario</span><span class="nv"> </span><span class="s">number&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span> <span class="s">&quot;1&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">private</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">no</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">extracting scenario name and steps</span>
</span><span class='line'>      <span class="l-Scalar-Plain">set_fact</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">scenario_steps</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">scenarios[scenario_num][1]</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">scenario_name</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">scenarios[scenario_num][0]</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This playbook contains a standard header followed by a <code>vars_prompt</code> section which prompts user to select a particular scenario number and stores the selection in <code>scenario_num</code> variable. The first task in the playbook extracts scenario name and steps from <code>scenarios</code> dictionary stored in <code>group_vars/all.yml</code> file and stores them in respective variables. Of course this task is optional and it&rsquo;s possible to reference the same data using full notation, however I prefer things to be more readable even if it leads to some inefficient memory use.</p>

<h2>Run test specified in scenario steps</h2>

<p>Now it&rsquo;s time to run traceroutes to see how the packets flow in the network. As we did in one of the <a href="http://networkop.github.io/blog/2015/06/24/ansible-intro/">previous posts</a> we&rsquo;ll use the <code>raw</code> module to run traceroutes. However this time, instead of running a full-mesh any-to-any traceroutes we&rsquo;ll only run them if they were defined in one of the test steps. Indeed, why would we run a traceroute between devices if we&rsquo;re not going to verify it? Ansible&rsquo;s conditionals will help us with that. For each of the hosts in <code>cisco-devices</code> group we&rsquo;ll look into scenario_steps dictionary and see if there were any tests defined and if there were, we&rsquo;ll run a traceroute to each of the destination hosts.</p>

<figure class='code'><figcaption><span>~/tdd_ansible/cisco_tdd.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">run traceroutes as per the defined scenario steps</span>
</span><span class='line'>  <span class="l-Scalar-Plain">raw</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">traceroute {{ hostvars[item.key][&#39;ansible_ssh_host&#39;] }} source Loopback0 probe 1 numeric</span>
</span><span class='line'>  <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">scenario_steps[inventory_hostname] is defined</span>
</span><span class='line'>  <span class="l-Scalar-Plain">with_dict</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">scenario_steps[inventory_hostname]|default({})</span>
</span><span class='line'>  <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">trace_result</span>
</span></code></pre></td></tr></table></div></figure>


<p>When both a loop (<code>with_dict</code>) and a conditional (<code>when</code>) are defined in a task, Ansible does the looping first. That&rsquo;s why if a test scenario is not defined for a particular host (e.g. <code>R3</code>) the conditional check will fail and stop execution of the playbook. To overcome that we can use Ansible (Jinja) templates inside the <code>with_dict</code> loop. Appending <code>|default({})</code> will instruct Ansible create an empty dictionary in case <code>scenario_steps[inventory_hostname]</code> does not exist which will make conditional return <code>False</code> and skip this host altogether.</p>

<h2>Parse test results</h2>

<p>There&rsquo;s no silver bullet when it comes to parsing of the outcome of traceroute command. We&rsquo;ll have to use Python to traverse the textual output line by line looking for <code>msec</code> and storing all found IPs in a list.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>~/tdd_ansible/library/cisco_trace_parse.py </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TraceParse</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">module</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">std_out</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;std_out&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;dest_host&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>        <span class="n">path</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">std_out</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&#39;msec&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>                <span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="n">result</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span><span class="p">]</span> <span class="o">=</span> <span class="n">path</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">module</span> <span class="o">=</span> <span class="n">AnsibleModule</span><span class="p">(</span>
</span><span class='line'>        <span class="n">argument_spec</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>            <span class="n">std_out</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;str&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">dest_host</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;str&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">traceParser</span> <span class="o">=</span> <span class="n">TraceParse</span><span class="p">(</span><span class="n">module</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">traceParser</span><span class="o">.</span><span class="n">parse</span><span class="p">()</span>
</span><span class='line'>    <span class="n">module</span><span class="o">.</span><span class="n">exit_json</span><span class="p">(</span><span class="n">changed</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">ansible_facts</span><span class="o">=</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># import module snippets</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">ansible.module_utils.basic</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The playbook task will run through each hosts' trace_results variable and pass it to the trace parse module.</p>

<figure class='code'><figcaption><span>~/tdd_ansible/cisco_tdd.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">parse traceroute ouput</span>
</span><span class='line'>  <span class="l-Scalar-Plain">cisco_trace_parse</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">dest_host</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">item.item.key</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">std_out</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">item.stdout</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">connection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">local</span>
</span><span class='line'>  <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">item.stdout is defined</span>
</span><span class='line'>  <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">trace_result.results</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Test verification</h2>

<p>Finally we need to compare the captured output with the scenario steps. This time all the information collected by Ansible in the previous tasks needs to be passed to a module.</p>

<figure class='code'><figcaption><span>~/tdd_ansible/cisco_tdd.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">verify traceroutes against pre-defined scenarios</span>
</span><span class='line'>  <span class="l-Scalar-Plain">cisco_tdd_verify</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">dest_host</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">item.key</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">src_host</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">inventory_hostname</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">scenario</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">scenario_steps</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ip2host</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">ip2host</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">hostvars[inventory_hostname][item.key]</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">scenario_name</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">scenario_name</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">scenario_steps[inventory_hostname] is defined</span>
</span><span class='line'>  <span class="l-Scalar-Plain">with_dict</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">scenario_steps[inventory_hostname]|default({})</span>
</span><span class='line'>  <span class="l-Scalar-Plain">connection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">local</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ansible module contains a class with a single public method <code>compare</code>. The first thing it does is converts the list of IP addresses of transit devices into a list of hostnames. That&rsquo;s where the IP-to-Hostname dictionary created in the <a href="http://networkop.github.io/blog/2015/07/03/parser-modules/">previous playbook</a> is first used. IP address is used as a lookup key and the Hostname is extracted from the first element of the returned list (second element, the interface name, is currently unused). The private method <code>__validatepath</code> is used to confirm that devices listed after <code>Via</code> in a test scenario are present in the traceroute path in the specified order. If this verification fails, the whole module fails and the error message is passed back to Ansible playbook.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>~/tdd_ansible/library/cisco_tdd_verify.py </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ResultCompare</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">module</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;dest_host&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">src_host</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;src_host&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">trace_path</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;path&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ref_scenario</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;scenario&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ip2host</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;ip2host&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">scenario_name</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;scenario_name&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">compare</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">trace_path_new</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">dev</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">trace_path</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">dev</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ip2host</span><span class="p">:</span>
</span><span class='line'>                <span class="n">trace_path_new</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ip2host</span><span class="p">[</span><span class="n">dev</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">trace_path_new</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dev</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">src_host</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ref_scenario</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ref_scenario</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">src_host</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">ref_path</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ref_scenario</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">src_host</span><span class="p">][</span><span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span><span class="p">]</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span> <span class="n">__validatepath</span><span class="p">(</span><span class="n">trace_path_new</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">msg</span> <span class="o">=</span> <span class="s">&quot;Failed scenario &quot;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">scenario_name</span> <span class="o">+</span>  <span class="s">&quot;.</span><span class="se">\r\n</span><span class="s">Traceroute from &quot;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">src_host</span> <span class="o">+</span> <span class="s">&quot; to &quot;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span> <span class="o">+</span> <span class="s">&quot; has not traversed &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">ref_path</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">msg</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\r\n</span><span class="s"> Actual path taken: &quot;</span> <span class="o">+</span> <span class="s">&#39; -&gt; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="bp">self</span><span class="o">.</span><span class="n">src_host</span><span class="p">]</span> <span class="o">+</span> <span class="n">trace_path_new</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span>
</span><span class='line'>                    <span class="k">return</span> <span class="mi">1</span><span class="p">,</span> <span class="n">msg</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;no error&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__validatepath</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
</span><span class='line'>        <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">device</span> <span class="ow">in</span> <span class="n">path</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">device</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">ref_scenario</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">src_host</span><span class="p">][</span><span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span><span class="p">][</span><span class="n">index</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ref_scenario</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">src_host</span><span class="p">][</span><span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span><span class="p">]):</span>
</span><span class='line'>                    <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">module</span> <span class="o">=</span> <span class="n">AnsibleModule</span><span class="p">(</span>
</span><span class='line'>        <span class="n">argument_spec</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>            <span class="n">dest_host</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;str&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">src_host</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;str&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">scenario</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;dict&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">ip2host</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;dict&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">path</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;list&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">scenario_name</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;str&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">comparator</span> <span class="o">=</span> <span class="n">ResultCompare</span><span class="p">(</span><span class="n">module</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rc</span><span class="p">,</span> <span class="n">error</span> <span class="o">=</span> <span class="n">comparator</span><span class="o">.</span><span class="n">compare</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="n">fail_json</span><span class="p">(</span><span class="n">msg</span><span class="o">=</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="n">exit_json</span><span class="p">(</span><span class="n">changed</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">ansible.module_utils.basic</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>TDD in action</h2>

<p>So let&rsquo;s finally see the whole thing action. First let&rsquo;s modify a <a href="http://networkop.github.io/blog/2015/06/17/dev-env-setup/">4-router topology</a> so that traffic from R1 to R4 is routed via R2 and R3 (a simple <code>delay 9999</code> on Ethernet0/1 will do). Now let&rsquo;s run the first scenario and verify that no errors are displayed.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>Scenario 1 successful </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>
</span><span class='line'>~/tdd_ansible# ansible-playbook cisco_tdd.yml
</span><span class='line'>Enter scenario number <span class="o">[</span>1<span class="o">]</span>:
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>Run traceroute commands<span class="o">]</span> ************************************************
</span><span class='line'>...
</span><span class='line'>PLAY RECAP ********************************************************************
</span><span class='line'>R1                         : <span class="nv">ok</span><span class="o">=</span><span class="m">4</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R2                         : <span class="nv">ok</span><span class="o">=</span><span class="m">4</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R3                         : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R4                         : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>Nothing much really, which is good, that means all scenarios were verified successfully. Now let&rsquo;s see how it fails. The easiest way is to run the tests from a second scenario, the one that assumes that the link between R1 and R2 failed and all the traffic is routed via R4.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>Scenario 2 failed </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/tdd_ansible# ansible-playbook cisco_tdd.yml
</span><span class='line'>Enter scenario number <span class="o">[</span>1<span class="o">]</span>: 2
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>Run traceroute commands<span class="o">]</span> ************************************************
</span><span class='line'>...
</span><span class='line'>TASK: <span class="o">[</span>verify traceroutes against pre-defined scenarios<span class="o">]</span> **********************
</span><span class='line'>skipping: <span class="o">[</span>R2<span class="o">]</span>
</span><span class='line'>skipping: <span class="o">[</span>R4<span class="o">]</span>
</span><span class='line'>failed: <span class="o">[</span>R1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;R4&#39;</span>, <span class="s1">&#39;R3&#39;</span><span class="o">]})</span> <span class="o">=</span>&gt; <span class="o">{</span><span class="s2">&quot;failed&quot;</span>: <span class="nb">true</span>, <span class="s2">&quot;item&quot;</span>: <span class="o">{</span><span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;R2&quot;</span>, <span class="s2">&quot;value&quot;</span>: <span class="o">[</span><span class="s2">&quot;R4&quot;</span>, <span class="s2">&quot;R3&quot;</span><span class="o">]}}</span>
</span><span class='line'>msg: Failed scenario Testing of Backup Link.
</span><span class='line'>Traceroute from R1 to R2 has not traversed <span class="o">[</span><span class="s1">&#39;R4&#39;</span>, <span class="s1">&#39;R3&#39;</span><span class="o">]</span>
</span><span class='line'> Actual path taken: R1 -&gt; R2
</span><span class='line'>
</span><span class='line'>failed: <span class="o">[</span>R3<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R1&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;R4&#39;</span><span class="o">]})</span> <span class="o">=</span>&gt; <span class="o">{</span><span class="s2">&quot;failed&quot;</span>: <span class="nb">true</span>, <span class="s2">&quot;item&quot;</span>: <span class="o">{</span><span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;R1&quot;</span>, <span class="s2">&quot;value&quot;</span>: <span class="o">[</span><span class="s2">&quot;R4&quot;</span><span class="o">]}}</span>
</span><span class='line'>msg: Failed scenario Testing of Backup Link.
</span><span class='line'>Traceroute from R3 to R1 has not traversed <span class="o">[</span><span class="s1">&#39;R4&#39;</span><span class="o">]</span>
</span><span class='line'> Actual path taken: R3 -&gt; R2 -&gt; R1
</span><span class='line'>
</span><span class='line'>failed: <span class="o">[</span>R1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R3&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;R4&#39;</span><span class="o">]})</span> <span class="o">=</span>&gt; <span class="o">{</span><span class="s2">&quot;failed&quot;</span>: <span class="nb">true</span>, <span class="s2">&quot;item&quot;</span>: <span class="o">{</span><span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;R3&quot;</span>, <span class="s2">&quot;value&quot;</span>: <span class="o">[</span><span class="s2">&quot;R4&quot;</span><span class="o">]}}</span>
</span><span class='line'>msg: Failed scenario Testing of Backup Link.
</span><span class='line'>Traceroute from R1 to R3 has not traversed <span class="o">[</span><span class="s1">&#39;R4&#39;</span><span class="o">]</span>
</span><span class='line'> Actual path taken: R1 -&gt; R2 -&gt; R3
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>PLAY RECAP ********************************************************************
</span><span class='line'>           to retry, use: --limit @/root/cisco_tdd.retry
</span><span class='line'>
</span><span class='line'>R1                         : <span class="nv">ok</span><span class="o">=</span><span class="m">3</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>1
</span><span class='line'>R2                         : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R3                         : <span class="nv">ok</span><span class="o">=</span><span class="m">3</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>1
</span><span class='line'>R4                         : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>Here all 3 test steps within a scenario failed. Ansible displayed error messages passed down by our module, specifying the expected and the actual path.<br/>
Now if we simply shutdown Ethernet0/0 of R1 to simulate a link failure and re-run the same scenario all tests will succeed again.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>Scenario 2 successful </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/tdd_ansible# ansible-playbook cisco_tdd.yml
</span><span class='line'>Enter scenario number <span class="o">[</span>1<span class="o">]</span>: 2
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>Run traceroute commands<span class="o">]</span> ************************************************
</span><span class='line'>...
</span><span class='line'>PLAY RECAP ********************************************************************
</span><span class='line'>R1                         : <span class="nv">ok</span><span class="o">=</span><span class="m">4</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R2                         : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R3                         : <span class="nv">ok</span><span class="o">=</span><span class="m">4</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R4                         : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>So there it is, a working network TDD framework in action. I still haven&rsquo;t covered a lot of corner cases (e.g. when traceroute times out) and deployment scenarios (device with VRFs) but it should still work for a lot of scenarios and can be easily extended to cover those corner cases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IP Address Information Collection With Custom Ansible Modules]]></title>
    <link href="http://networkop.github.io/blog/2015/07/03/parser-modules/"/>
    <updated>2015-07-03T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/07/03/parser-modules</id>
    <content type="html"><![CDATA[<p>Ansible has a very neat feature called &ldquo;fact gathering&rdquo;, which collects useful information from hosts prior to executing any of the tasks and makes this information available for use within those tasks. Unfortunately, this also relies on Python being available on the remote machine which doesn&rsquo;t work for Cisco IOS. In this post I&rsquo;ll show how to write a simple module which will collect IP address information from remote devices and store it in global variable for future use. I&rsquo;ll also show how to write a module which will convert our human-readable TDD scenarios into YAML structures. As always, full code repository is available on <a href="https://github.com/networkop/simple-cisco-tdd">Github</a></p>

<!--more-->


<h2>Cisco IOS IP fact gathering</h2>

<p>In order to recognise that a traceroute has traversed a certain device, without relying on DNS, we need to populate a local database mapping IP addresses to their respective devices. The resulting database (or YAML dictionary) needs to be stored in a file so that it can be read and used again by Ansible tasks doing the traceroute verification. In order to make it happen, we need to answer the following questions:</p>

<ul>
<li>How to get IP address information from each device?</li>
</ul>


<blockquote><p>The most straight-forward way is to capture the result of running something like <code>show ip interface brief</code> and parse the output. The assumption is that all devices are living in a non-overlapping IP address space (however it is possible to modify the examples to be vrf-aware).</p></blockquote>

<ul>
<li>Where to store the information?</li>
</ul>


<blockquote><p>Ideally, we would need a hash-like data structure (e.g. python dictionary) which will return a hostname when given a certain IP address. This data structure needs to be available to all hosts, however most of the variables in Ansible are host-specific. The only way to simulate a global variable in Ansible is to store all data in <code>group_vars/all.yml</code> file which is exactly what our module will do.</p></blockquote>

<ul>
<li>How will multiple processes write into a single file at the same time?</li>
</ul>


<blockquote><p>That&rsquo;s where Ansible&rsquo;s concurrency feature bites back. This is a well known computer science problem and the solution to this is to use <code>mutex</code>, however that&rsquo;s beyond what Ansible can do. In order to overcome that, I&rsquo;ll make Ansible do the tasks sequentially, which will dramatically slow things down for bigger environments. However, this task only needs to be run once, to collect the data, while all the other tasks can be run in parallel, in separate playbooks.</p></blockquote>

<h2>Developing Ansible playbook</h2>

<p>Our Ansible playbook will need to accomplish the following tasks:</p>

<ol>
<li>Capture the output <code>show ip interface brief</code> command</li>
<li>Parse the output capture in the previous step</li>
<li>Save the output in a <code>group_vars/all.yml</code> file</li>
</ol>


<p>All these tasks will need to be run sequentially on every host from <code>cisco-devices</code> group. To get the output from a Cisco device we&rsquo;ll use the <code>raw</code> module again. The other two tasks don&rsquo;t require connection to remote device and will be run on a localhost by the virtue of a <code>delegate_to: 127.0.0.1</code> option.</p>

<figure class='code'><figcaption><span>~/tdd_ansible/cisco-ip-collect.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Collect IP address data</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco-devices</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">remote_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco</span>
</span><span class='line'>  <span class="l-Scalar-Plain">serial</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">capture show ip interface brief</span>
</span><span class='line'>      <span class="l-Scalar-Plain">raw</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">show ip interface brief | exclude unassigned</span>
</span><span class='line'>      <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">siib_text</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">parse the output of &quot;show ip interface brief&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">cisco_ip_intf_facts_collect</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">output_text=&quot;{{ siib_text.stdout }}&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">delegate_to</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">127.0.0.1</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">combine ip address facts and save as a global variable</span>
</span><span class='line'>      <span class="l-Scalar-Plain">cisco_ip_intf_facts_combine</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">ipTable=&quot;{{ IPs }}&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">hostname=&quot;{{ inventory_hostname }}&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">delegate_to</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">127.0.0.1</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">collect</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Writing a custom Ansible module</h2>

<p>Ansible has an <a href="http://docs.ansible.com/developing_modules.html">official guide</a> on module development. A typical module will contain a header with license information along with module documentation and usage examples, a <code>main()</code> function processing the arguments passed to this module from Ansible and, of course, the actual code that implements module&rsquo;s logic. For the sake of brevity I will omit the header and some of the less important details in the code.</p>

<h2>Ansible module to parse command output</h2>

<p>This ansible module needs to extract IP address and, optionally, interface name from the output of <code>show ip interface brief</code> and store it in a python dictionary. The right way to examine the module code is from <code>main()</code> function. This function will contain a <code>module</code> variable (instance of AnsibleModule) which specifies all the arguments expected by this module and their type (the type will be converted to the appropriate python type). Text parser is implemented with a <code>SIIBparse</code> class whose only public method <code>parse()</code> will traverse the text line by line looking for interfaces with Line Protocol in <code>up</code> state, extract IP address (1st column), interface name (2nd column) and store the result in a python dictionary with IP address as the key and interface name as it&rsquo;s value.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>~/tdd_ansible/library/cisco_ip_intf_facts_collect.py </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SIIBparse</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">module</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">output_text</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;output_text&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ip2intf</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">output_text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">row</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">row</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;up&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">ipAddress</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                <span class="n">intfName</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">ip2intf</span><span class="p">[</span><span class="n">ipAddress</span><span class="p">]</span> <span class="o">=</span> <span class="n">intfName</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&quot;IPs&quot;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">ip2intf</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">rc</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ip2intf</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">rc</span><span class="p">,</span> <span class="n">result</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">module</span> <span class="o">=</span> <span class="n">AnsibleModule</span><span class="p">(</span>
</span><span class='line'>        <span class="n">argument_spec</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>            <span class="n">output_text</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;str&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">siib</span> <span class="o">=</span> <span class="n">SIIBparse</span><span class="p">(</span><span class="n">module</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rc</span><span class="p">,</span> <span class="n">result</span> <span class="o">=</span> <span class="n">siib</span><span class="o">.</span><span class="n">parse</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="n">fail_json</span><span class="p">(</span><span class="n">msg</span><span class="o">=</span><span class="s">&quot;Failed to parse. Incorrect input.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="n">exit_json</span><span class="p">(</span><span class="n">changed</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">ansible_facts</span><span class="o">=</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># import module snippets</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">ansible.module_utils.basic</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>If information passed to the module in the argument was invalid, the module must fail with a meaningful message passed inside a <code>fail_json</code> method call. When parsing is complete, our module exits and the resulting data structure is passed back to Ansible variables with <code>ansible_facts</code> argument. Now all hosts can access it through variable called <code>IPs</code>.</p>

<h2>Ansible module to save IP address information</h2>

<p>The task of this module is to get all the information collected inside each hosts' <code>IPs</code> variables, combine it with devices' hostnames and save it in the <code>group_vars/all.yml</code> file. This module makes use of <a href="http://pyyaml.org/wiki/PyYAMLDocumentation">Python&rsquo;s yaml library</a>. Built-in class <code>FactUpdater</code> can read(), update() the contents and write() the global variable file defined in a <code>FILENAME</code> variable.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>~/tdd_ansible/library/cisco_ip_intf_facts_combine.py </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">yaml</span>
</span><span class='line'><span class="n">FILENAME</span><span class="o">=</span><span class="s">&quot;group_vars/all.yml&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FactUpdater</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">module</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ip2intf</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;ipTable&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;hostname&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;ip2host&#39;</span><span class="p">:{}}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">FILENAME</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fileObj</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">fileObj</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># in case there is no file - create it</span>
</span><span class='line'>            <span class="nb">open</span><span class="p">(</span><span class="n">FILENAME</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">FILENAME</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fileObj</span><span class="p">:</span>
</span><span class='line'>            <span class="n">yaml</span><span class="o">.</span><span class="n">safe_dump</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">file_content</span><span class="p">,</span> <span class="n">fileObj</span><span class="p">,</span> <span class="n">explicit_start</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">allow_unicode</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="s">&#39;ip2host&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span><span class="p">[</span><span class="s">&#39;ip2host&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">ip</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ip2intf</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span><span class="p">[</span><span class="s">&#39;ip2host&#39;</span><span class="p">][</span><span class="n">ip</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">hostname</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">ip2intf</span><span class="p">[</span><span class="n">ip</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">module</span> <span class="o">=</span> <span class="n">AnsibleModule</span><span class="p">(</span>
</span><span class='line'>        <span class="n">argument_spec</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>            <span class="n">ipTable</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;dict&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">hostname</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;str&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="n">factUpdater</span> <span class="o">=</span> <span class="n">FactUpdater</span><span class="p">(</span><span class="n">module</span><span class="p">)</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">factUpdater</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>        <span class="n">factUpdater</span><span class="o">.</span><span class="n">update</span><span class="p">()</span>
</span><span class='line'>        <span class="n">factUpdater</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="n">fail_json</span><span class="p">(</span><span class="n">msg</span><span class="o">=</span><span class="s">&quot;Unexpected error: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">module</span><span class="o">.</span><span class="n">exit_json</span><span class="p">(</span><span class="n">changed</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># import module snippets</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">ansible.module_utils.basic</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This module only performs actions on local file and does not provide any output back to Ansible.</p>

<h2>Read and parse TDD scenarios</h2>

<p>Finally, since we&rsquo;re modifying Ansible global variable file, it would make sense to also update it with testing scenarios information. Technically, this steps doesn&rsquo;t need to be done in Ansible and could be done simply using Python or Bash scripts, but I&rsquo;ll still show it here to demonstrate two additional Ansible features. The first one is <code>local_action: module_name</code> which is a shorthand for specifying <code>module</code> with <code>delegate_to</code> option (see above). Second feature is <code>tags</code>, it allows to specify which play to run in playbook containing many of them. In our case one file <code>cisco-ip-collect.yml</code> will have two plays defined and will run both of them by default unless <code>--tag=scenario</code> or <code>--tag=collect</code> specifies the exact play.</p>

<figure class='code'><figcaption><span>~/tdd_ansible/cisco-ip-collect.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Parse and save scenarios</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">parse scenario file and save it in group_vars/all.yml</span>
</span><span class='line'>      <span class="l-Scalar-Plain">local_action</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco_scenarios_convert</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">scenario</span>
</span></code></pre></td></tr></table></div></figure>


<p>This play has a single task which runs a single custom module. Before we proceed to the module let&rsquo;s see how a typical testing scenario file looks like.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>~/tdd_ansible/scenarios/all.txt </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>1. Testing of Primary Link
</span><span class='line'>1.1 From R1 to R3 via R2
</span><span class='line'>1.2 From R1 to R4 via R2, R3
</span><span class='line'>2. Testing of Backup Link
</span><span class='line'>2.1 From R1 to R3 via R4
</span><span class='line'>2.2 From R1 to R2 via R4,R3
</span></code></pre></td></tr></table></div></figure>


<p>The file should be stored in a <code>scenarios/</code> directory and should have a name <code>all.txt</code>. This file contains a list of scenarios, each with its own name, and a list of test steps that need to be performed to validate a particular scenario. The parser for this file is a custom Python module which opens and reads the contents of <code>group_vars/all.yml</code> file, parses the scenarios file with the help of some ugly-looking regular expressions, and, finally, updates and saves the contents of Ansible group variable back to file.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>~/tdd_ansible/library/cisco_scenarios_convert.py </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">yaml</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="n">SCENARIO_FILE</span> <span class="o">=</span> <span class="s">&quot;scenarios/all.txt&quot;</span>
</span><span class='line'><span class="n">GROUP_VAR_FILE</span> <span class="o">=</span> <span class="s">&quot;group_vars/all.yml&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ScenarioParser</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">rc</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">storage</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>       <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">GROUP_VAR_FILE</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fileObj</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">fileObj</span><span class="p">)</span>
</span><span class='line'>       <span class="k">except</span><span class="p">:</span>
</span><span class='line'>           <span class="nb">open</span><span class="p">(</span><span class="n">GROUP_VAR_FILE</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">scenario_number</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">scenario_step</span>   <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">scenario_name</span>   <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>        <span class="n">name_pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;^(\d+)\.?\s+(.*)&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">step_pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;.*[Ff][Rr][Oo][Mm]\s+([\d\w]+)\s+[Tt][Oo]\s+([\d\w]+)\s+[Vv][Ii][Aa]\s+([\d\w]+,*\s*[\d\w]+)*&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">SCENARIO_FILE</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fileObj</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fileObj</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;#&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">name_match</span> <span class="o">=</span> <span class="n">name_pattern</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">step_match</span> <span class="o">=</span> <span class="n">step_pattern</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">name_match</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">scenario_number</span> <span class="o">=</span> <span class="n">name_match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">scenario_name</span>   <span class="o">=</span> <span class="n">name_match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">scenario_steps</span>  <span class="o">=</span> <span class="p">[</span><span class="n">scenario_name</span><span class="p">,</span> <span class="p">{}]</span>
</span><span class='line'>                        <span class="k">if</span> <span class="ow">not</span> <span class="n">scenario_number</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">storage</span><span class="p">:</span>
</span><span class='line'>                            <span class="bp">self</span><span class="o">.</span><span class="n">storage</span><span class="p">[</span><span class="n">scenario_number</span><span class="p">]</span> <span class="o">=</span> <span class="n">scenario_steps</span>
</span><span class='line'>                        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                            <span class="n">scenario_steps</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">storage</span><span class="p">[</span><span class="n">scenario_number</span><span class="p">]</span>
</span><span class='line'>                    <span class="k">elif</span> <span class="n">step_match</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">from_device</span> <span class="o">=</span> <span class="n">step_match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">to_device</span> <span class="o">=</span> <span class="n">step_match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">via</span> <span class="o">=</span> <span class="n">step_match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">via_devices</span> <span class="o">=</span> <span class="p">[</span><span class="n">device_name</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">device_name</span> <span class="ow">in</span> <span class="n">via</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)]</span>
</span><span class='line'>                        <span class="k">if</span> <span class="ow">not</span> <span class="n">scenario_number</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">scenario_name</span><span class="p">:</span>
</span><span class='line'>                            <span class="k">if</span> <span class="ow">not</span> <span class="n">from_device</span> <span class="ow">in</span> <span class="n">scenario_steps</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>                                <span class="n">scenario_steps</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">from_device</span><span class="p">]</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>                            <span class="n">scenario_steps</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">from_device</span><span class="p">][</span><span class="n">to_device</span><span class="p">]</span> <span class="o">=</span> <span class="n">via_devices</span>
</span><span class='line'>                    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">rc</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>       <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span><span class="p">[</span><span class="s">&#39;scenarios&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">storage</span>
</span><span class='line'>       <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>           <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">GROUP_VAR_FILE</span><span class="p">,</span> <span class="s">&#39;w+&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fileObj</span><span class="p">:</span>
</span><span class='line'>               <span class="n">yaml</span><span class="o">.</span><span class="n">safe_dump</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">file_content</span><span class="p">,</span> <span class="n">fileObj</span><span class="p">,</span> <span class="n">explicit_start</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">allow_unicode</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">module</span> <span class="o">=</span> <span class="n">AnsibleModule</span><span class="p">(</span><span class="n">argument_spec</span><span class="o">=</span><span class="nb">dict</span><span class="p">())</span>
</span><span class='line'>    <span class="n">parser</span> <span class="o">=</span> <span class="n">ScenarioParser</span><span class="p">()</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">parser</span><span class="o">.</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="n">fail_json</span><span class="p">(</span><span class="n">msg</span><span class="o">=</span><span class="s">&quot;Failed to parse. Incorrect input.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="n">exit_json</span><span class="p">(</span><span class="n">changed</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">ansible.module_utils.basic</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The biggest portion of code is the read() method of the parser which does the following:</p>

<ul>
<li>scans text file line by line ignoring lines starting with <code>#</code> and whose length is not enough to contain either a scenario name or scenario step</li>
<li>matches each line against pre-compiled regular expressions for scenario name or for scenario step (<a href="https://regex101.com/">a very helpful tool for regex testing</a>)</li>
<li>attempts to save the data in a Python dictionary whose keys are scenario numbers and whose values is a list consisting of a scenario name (1st element) and a dictionary with scenario steps (2nd element)</li>
</ul>


<p>The end result of running both ip address collection and scenarios conversion plays is Ansible group variable file that looks like this:</p>

<figure class='code'><figcaption><span>~/tdd_ansible/library/group_vars/all.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">ip2host</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="l-Scalar-Plain">10.0.0.1</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R1</span><span class="p-Indicator">,</span> <span class="nv">Loopback0</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">10.0.0.2</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R2</span><span class="p-Indicator">,</span> <span class="nv">Loopback0</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">10.0.0.3</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R3</span><span class="p-Indicator">,</span> <span class="nv">Loopback0</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">10.0.0.4</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R4</span><span class="p-Indicator">,</span> <span class="nv">Loopback0</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">12.12.12.1</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R1</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/0</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">12.12.12.2</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R2</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/0</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">14.14.14.1</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R1</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/1</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">14.14.14.4</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R4</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/1</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">192.168.247.25</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R1</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/2</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">23.23.23.2</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R3</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/0</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">34.34.34.3</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R3</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/1</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">34.34.34.4</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R4</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/0</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="l-Scalar-Plain">scenarios</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="s">&#39;1&#39;</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Testing of Primary Link</span>
</span><span class='line'>   <span class="p-Indicator">-</span>  <span class="l-Scalar-Plain">R1</span><span class="p-Indicator">:</span>
</span><span class='line'>         <span class="l-Scalar-Plain">R2</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R2</span><span class="p-Indicator">]</span>
</span><span class='line'>         <span class="l-Scalar-Plain">R3</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R2</span><span class="p-Indicator">]</span>
</span><span class='line'>         <span class="l-Scalar-Plain">R4</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R2</span><span class="p-Indicator">,</span> <span class="nv">R3</span><span class="p-Indicator">]</span>
</span><span class='line'>      <span class="l-Scalar-Plain">R2</span><span class="p-Indicator">:</span>
</span><span class='line'>         <span class="l-Scalar-Plain">R4</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R3</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="s">&#39;2&#39;</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Testing of Backup Link</span>
</span><span class='line'>   <span class="p-Indicator">-</span>  <span class="l-Scalar-Plain">R1</span><span class="p-Indicator">:</span>
</span><span class='line'>         <span class="l-Scalar-Plain">R2</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R4</span><span class="p-Indicator">,</span> <span class="nv">R3</span><span class="p-Indicator">]</span>
</span><span class='line'>         <span class="l-Scalar-Plain">R3</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R4</span><span class="p-Indicator">]</span>
</span><span class='line'>      <span class="l-Scalar-Plain">R3</span><span class="p-Indicator">:</span>
</span><span class='line'>         <span class="l-Scalar-Plain">R1</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R4</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>The next post, final in a series, will show how to write an Ansible play to validate TDD scenarios and produce a meaningful error message in case it fails.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Ansible for Cisco IOS]]></title>
    <link href="http://networkop.github.io/blog/2015/06/24/ansible-intro/"/>
    <updated>2015-06-24T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/06/24/ansible-intro</id>
    <content type="html"><![CDATA[<p>Ansible is well-known for it&rsquo;s low entry threshold. All what&rsquo;s required to get started is just one inventory file. However Cisco IOS devices require special considerations.
Passwordless SSH RSA-based authentication is still a novelty and in most cases users are authenticated based on their passwords. Another problem is the lack of Python execution
environment on IOS devices, which seriously limits the choice of Ansible modules that can be used. In this post I will show how to setup Ansible
environment to control Cisco IOS devices</p>

<!--more-->


<h2>Ansible overview</h2>

<p>There&rsquo;s been a lot written about what Ansible is and what it was built to accomplish. I will just provide a brief summary of its features focusing on what we&rsquo;re gonna be using it for, leaving an in-depth explanation to the official <a href="http://docs.ansible.com/">Ansible documentation</a>.</p>

<ul>
<li>What is it?</li>
</ul>


<blockquote><p>Ansible is an IT automation and orchestration framework</p></blockquote>

<ul>
<li>What was it built to accomplish?</li>
</ul>


<blockquote><p>Ansible was designed to automate routine tasks like server/application deployment and configuration</p></blockquote>

<ul>
<li>How does it work?</li>
</ul>


<blockquote><p>It connects to several hosts at the same time and executes small programs called &ldquo;modules&rdquo; in the order specified in a file called &ldquo;playbook&rdquo;</p></blockquote>

<p>To build what we&rsquo;ve set out to accomplish I&rsquo;m gonna be using the latter feature. I am not gonna be using Ansible for system provisioning or service orchestration. Instead, I will be exploiting Ansible&rsquo;s ability to run multiple parallel connections to remote hosts, execute commands on them and return their result. Due to that, I will diverge from some of the <a href="https://docs.ansible.com/playbooks_best_practices.html">Ansible&rsquo;s best practices</a> of splitting functions into roles and I will use one flat playbook file segregating different functions with tags.</p>

<h2>Ansible configuration file</h2>

<p>Ansible configuration file <code>ansible.cfg</code> contains <a href="http://docs.ansible.com/intro_configuration.html">application-wide settings</a> like default timeouts, port numbers and other flags. The default Ansible configuration file is located in <code>/etc/ansible/</code> directory. However, instead of overwriting the defaults it is possible to create a configuration file in a local directory with only the settings that need to be overridden. To better work with Cisco devices the following settings will need to be modified:</p>

<ul>
<li>Default SSH library (transport) needs to be set to <code>paramiko</code> which is more stable than its alternative, OpenSSH, when working with Cisco IOS.</li>
<li>For a small project it is easier to maintain a local copy of inventory file which is configured with <code>hostfile</code> setting.</li>
<li>Strict SSH key checking is a MUST in every production environment, however, for development environment an exception can be made.</li>
<li>Default SSH timeout is decreased to 5 seconds reflecting a small size of the testing environment.</li>
</ul>


<figure class='code'><figcaption><span>~/tdd_ansible/ansible.cfg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>defaults<span class="o">]</span>
</span><span class='line'><span class="nv">transport</span><span class="o">=</span>paramiko
</span><span class='line'><span class="nv">hostfile</span> <span class="o">=</span> ./myhosts
</span><span class='line'><span class="nv">host_key_checking</span><span class="o">=</span>False
</span><span class='line'><span class="nv">timeout</span> <span class="o">=</span> 5
</span></code></pre></td></tr></table></div></figure>


<h2>Inventory file</h2>

<p>Inventory contains the list of hosts to be managed by Ansible. Hosts are normally combined into groups (<code>cisco-devices</code> in our case) and Ansible performs actions on all hosts in the group in parallel.</p>

<figure class='code'><figcaption><span>~/tdd_ansible/myhosts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>cisco-devices<span class="o">]</span>
</span><span class='line'>R1
</span><span class='line'>R2
</span><span class='line'>R3
</span><span class='line'>R4
</span></code></pre></td></tr></table></div></figure>


<p>It is considered a <a href="https://docs.ansible.com/playbooks_best_practices.html#group-and-host-variables">best practice</a> to keep all variables in separate folders and files. We need to define additional host variables to let Ansible know which IP address to use to connect to a remote device. I will also add SSH password to a host variable file which is a VERY bad practice, however this will prevent me from typing password every time I run a playbook. If I ever did this in production, I&rsquo;d add host variables directory to <code>.gitignore</code> file so that it doesn&rsquo;t get uploaded to Github. Host variables files must follow YAML formatting, must be stored in a <code>./host_var</code> directory and must match the name of the host they are being assigned to.</p>

<figure class='code'><figcaption><span>~/tdd_ansible/host_var/R1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">ansible_ssh_host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10.0.0.1</span>
</span><span class='line'><span class="l-Scalar-Plain">ansible_ssh_pass</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similar files need to be created for R2, R3 and R4.</p>

<h2>Run a test traceroute commands</h2>

<p>Now it is time to finally see Ansible in action. Let&rsquo;s first see if we can run a standalone traceroute command. I will manually define SSH username with <code>-u</code> flag and use a module called <code>raw</code> passing traceroute command as an argument with <code>-a</code> option.</p>

<figure class='code'><figcaption><span>Ad-hoc traceroute command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ansible cisco-devices -u cisco -m raw -a <span class="s2">&quot;traceroute 10.0.0.4 source Loopback0 probe 1 numeric&quot;</span>
</span><span class='line'>SSH password:
</span><span class='line'>R1 <span class="p">|</span> success <span class="p">|</span> <span class="nv">rc</span><span class="o">=</span><span class="m">0</span> &gt;&gt;
</span><span class='line'>
</span><span class='line'>Type escape sequence to abort.
</span><span class='line'>Tracing the route to 10.0.0.4
</span><span class='line'>VRF info: <span class="o">(</span>vrf in name/id, vrf out name/id<span class="o">)</span>
</span><span class='line'>  <span class="m">1</span> 14.14.14.4 <span class="m">0</span> msec *  <span class="m">0</span> msec
</span><span class='line'>
</span><span class='line'>R2 <span class="p">|</span> success <span class="p">|</span> <span class="nv">rc</span><span class="o">=</span><span class="m">0</span> &gt;&gt;
</span><span class='line'>
</span><span class='line'>Type escape sequence to abort.
</span><span class='line'>Tracing the route to 10.0.0.4
</span><span class='line'>VRF info: <span class="o">(</span>vrf in name/id, vrf out name/id<span class="o">)</span>
</span><span class='line'>  <span class="m">1</span> 12.12.12.1 <span class="m">0</span> msec <span class="m">0</span> msec <span class="m">0</span> msec
</span><span class='line'>  <span class="m">2</span>  *  *
</span><span class='line'>    14.14.14.4 <span class="m">0</span> msec
</span><span class='line'>
</span><span class='line'>R3 <span class="p">|</span> success <span class="p">|</span> <span class="nv">rc</span><span class="o">=</span><span class="m">0</span> &gt;&gt;
</span><span class='line'>
</span><span class='line'>Type escape sequence to abort.
</span><span class='line'>Tracing the route to 10.0.0.4
</span><span class='line'>VRF info: <span class="o">(</span>vrf in name/id, vrf out name/id<span class="o">)</span>
</span><span class='line'>  <span class="m">1</span> 34.34.34.4 <span class="m">0</span> msec <span class="m">0</span> msec *
</span><span class='line'>
</span><span class='line'>R4 <span class="p">|</span> success <span class="p">|</span> <span class="nv">rc</span><span class="o">=</span><span class="m">0</span> &gt;&gt;
</span><span class='line'>
</span><span class='line'>Type escape sequence to abort.
</span><span class='line'>Tracing the route to 10.0.0.4
</span><span class='line'>VRF info: <span class="o">(</span>vrf in name/id, vrf out name/id<span class="o">)</span>
</span><span class='line'>  <span class="m">1</span> 10.0.0.4 <span class="m">0</span> msec <span class="m">0</span> msec *
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Ansible ad-hoc commands are a good way to quickly test something out and learn how things work. Next step would be to create a playbook file which will contain several of those commands in a more structured way. Playbooks use YAML syntax and follow strict formatting rules. At the top of the file there&rsquo;s a name of the play along with the target hosts group. Following that are a list of tasks, each of which calls its own module and passes arguments to it. In this example playbook does the following:</p>

<ol>
<li>Defines a <code>loopbacks</code> variable which stores in a hash a list of devices along with their loopback IP addresses.</li>
<li>Uses <code>raw</code> module to run traceroute commands. This is the only module that doesn&rsquo;t require Python to be installed on a target machine.</li>
<li>For each host in <code>cisco-devices</code> group runs traceroute to every other hosts' loopback IP</li>
<li>Stores the result in a <code>trace_result</code> variable</li>
</ol>


<figure class='code'><figcaption><span>~/tdd_ansible/cisco-trace-run.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Run traceroute commands</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco-devices</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">remote_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">loopbacks</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span>
</span><span class='line'>    <span class="s">&quot;R1&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;10.0.0.1&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>    <span class="s">&quot;R2&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;10.0.0.2&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>    <span class="s">&quot;R3&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;10.0.0.3&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>    <span class="s">&quot;R4&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;10.0.0.4&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>    <span class="p-Indicator">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">run traceroute to every other host</span>
</span><span class='line'>      <span class="l-Scalar-Plain">raw</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">traceroute {{ item.value }} source Loopback0 probe 1 numeric</span>
</span><span class='line'>      <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">item.key != inventory_hostname</span>
</span><span class='line'>      <span class="l-Scalar-Plain">with_dict</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">loopbacks</span>
</span><span class='line'>      <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">trace_result</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#    - name: Debug registered variables</span>
</span><span class='line'><span class="c1">#      debug: var=trace_result</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this Playbook I use several useful Ansible features:</p>

<ul>
<li><a href="https://docs.ansible.com/playbooks_variables.html#variables-defined-in-a-playbook">Variables defined in playbooks</a></li>
<li><a href="https://docs.ansible.com/playbooks_loops.html#looping-over-hashes">Looping over hashes</a></li>
<li><a href="https://docs.ansible.com/playbooks_conditionals.html">Conditionals</a></li>
<li><a href="https://docs.ansible.com/playbooks_variables.html#registered-variables">Registered variables</a></li>
</ul>


<p>The end result of this task is that traceroute is run 12 times - one time from each of the hosts to each other host except for when source and destination are equal.</p>

<figure class='code'><figcaption><span>Running the playbook</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ansible-playbook cisco-trace-run.yml
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>Run traceroute commands<span class="o">]</span> ************************************************
</span><span class='line'>
</span><span class='line'>TASK: <span class="o">[</span>run traceroute to every other host<span class="o">]</span> ************************************
</span><span class='line'>skipping: <span class="o">[</span>R4<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R4&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.4&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R4&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.4&#39;</span><span class="o">})</span>
</span><span class='line'>skipping: <span class="o">[</span>R1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R1&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.1&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R3<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R4&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.4&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R4<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R1&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.1&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.2&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R3<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R1&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.1&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R3&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.3&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R3<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.2&#39;</span><span class="o">})</span>
</span><span class='line'>skipping: <span class="o">[</span>R3<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R3&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.3&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R4&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.4&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R1&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.1&#39;</span><span class="o">})</span>
</span><span class='line'>skipping: <span class="o">[</span>R2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.2&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R4<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.2&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R3&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.3&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R4<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R3&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.3&#39;</span><span class="o">})</span>
</span><span class='line'>
</span><span class='line'>PLAY RECAP ********************************************************************
</span><span class='line'>R1                         : <span class="nv">ok</span><span class="o">=</span><span class="m">1</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R2                         : <span class="nv">ok</span><span class="o">=</span><span class="m">1</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R3                         : <span class="nv">ok</span><span class="o">=</span><span class="m">1</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R4                         : <span class="nv">ok</span><span class="o">=</span><span class="m">1</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>The above shows that all 12 tasks were completed successfully, meaning the command was executed and result was stored in a registered variable. To view the actual output of <code>traceroute</code> commands uncomment the two debug lines at the end of the playbook and rerun it.</p>

<hr />

<p>Now that the goal of running commands on multiple devices in parallel is achieved, the next step would be to decide how to make use of the received output. In the next posts I will attempt to tackle the following problems:</p>

<ul>
<li>Parse textual output of traceroute command and extract transit IP addresses.</li>
<li>Find a way to convert these transit IP addresses into hostnames without relying on DNS.</li>
<li>Verify TDD scenarios against traceroute outputs and produce an intelligible result of this verification.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows-Linux File Synchronisation]]></title>
    <link href="http://networkop.github.io/blog/2015/06/22/dev-file-sync/"/>
    <updated>2015-06-22T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/06/22/dev-file-sync</id>
    <content type="html"><![CDATA[<p>My development environment usually consists of a host machine running Windows and a development Linux &ldquo;headless&rdquo; virtual machine. I create and edit
files in a <a href="https://notepad-plus-plus.org/">Notepad++</a> text editor and then transfer them over to the Linux VM. Until recently I&rsquo;ve been using a hypervisor-enabled &ldquo;shared&rdquo; folder. However, Windows file system emulators in Linux do not support symbolic links
and therefore breaks a lot of applications that rely on them. This prompted me to start looking for a new way to sync my files. That&rsquo;s how I came across this new amazing
file syncing app called <a href="https://syncthing.net/">Syncthing</a>. Why is it amazing?</p>

<ul>
<li>It uses peer-to-peer architecture. User traffic is not uploaded to a centralised server and is transferred directly between peers.</li>
<li>It is open-source. It doesn&rsquo;t use any proprietary syncing protocols like BTSync.</li>
<li>As the result of open-source nature it has big community support with clients, wrappers and extension available for any major platform.</li>
<li>It is secure. All transfers are TLS-encrypted.</li>
<li>It&rsquo;s simple to use. Windows version installs like any other Windows app, Linux version, like any other Linux app, will take a little tinkering.</li>
<li>It&rsquo;s written in Golang, an extremely popular language amongst professional programmers and surely these guys can&rsquo;t be mistaken.</li>
</ul>


<!--more-->


<h2>Windows installation</h2>

<p>Windows installation is extremely easy. I use a package called <a href="https://github.com/canton7/SyncTrayzor/releases">SyncTrayzor</a> which contains the application itself, serves as a tray utility wrapper and also implements &ldquo;inotify&rdquo; which allows for file on-change synchronisation (BGP ip next-hop tracking anyone?)</p>

<h2>Ubuntu installation</h2>

<p>Ubuntu package installation is an easy 4-step process:</p>

<figure class='code'><figcaption><span>1.Syncthing Ubuntu installation</span><a href='http://apt.syncthing.net/'>Instructions</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Add the release PGP keys:</span>
</span><span class='line'><span class="nv">$ </span>curl -s https://syncthing.net/release-key.txt <span class="p">|</span> sudo apt-key add -
</span><span class='line'>
</span><span class='line'><span class="c"># Add the &quot;release&quot; channel to your APT sources:</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>deb http://apt.syncthing.net/ Syncthing release <span class="p">|</span> sudo tee /etc/apt/sources.list.d/syncthing-release.list
</span><span class='line'>
</span><span class='line'><span class="c"># Update and install syncthing:</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install syncthing
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>2.Inotify installation</span><a href='https://github.com/syncthing/syncthing-inotify/releases'>Release</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Choose the latest release for your platform</span>
</span><span class='line'><span class="nv">$ </span>wget https://github.com/syncthing/syncthing-inotify/releases/download/v0.6.5/syncthing-inotify-linux-amd64-v0.6.5.tar.gz
</span><span class='line'>
</span><span class='line'><span class="c"># Unpack and copy inotify to the same directory as the main app</span>
</span><span class='line'><span class="nv">$ </span>tar xvf syncthing-inotify-linux-amd64-v0.6.5.tar.gz
</span><span class='line'><span class="nv">$ </span>which syncthing
</span><span class='line'>/usr/bin/syncthing
</span><span class='line'><span class="nv">$ </span>mv syncthing-inotify /usr/bin/
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>3. Configure upstart script to control Syncthing</span><a href='https://egustafson.github.io/syncthing-ubuntu.html'>Upstart setup</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Create a file for main service</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;start on starting network-services</span>
</span><span class='line'><span class="s2">stop on stopping network-services</span>
</span><span class='line'><span class="s2">env STNORESTART=yes</span>
</span><span class='line'><span class="s2">respawn</span>
</span><span class='line'><span class="s2">env HOME=/root</span>
</span><span class='line'><span class="s2">exec /usr/bin/syncthing&quot;</span> &gt;&gt; /etc/init/syncthing.conf
</span><span class='line'>
</span><span class='line'><span class="c"># Do the same for inotify</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;start on starting syncthing</span>
</span><span class='line'><span class="s2">stop on stopping syncthing</span>
</span><span class='line'><span class="s2">env STNORESTART=yes</span>
</span><span class='line'><span class="s2">respawn</span>
</span><span class='line'><span class="s2">env HOME=/root</span>
</span><span class='line'><span class="s2">exec /usr/bin/syncthing-inotify&quot;</span> &gt;&gt; /etc/init/syncthing-inotify.conf
</span><span class='line'>
</span><span class='line'><span class="c"># start both services </span>
</span><span class='line'><span class="nv">$ </span>service syncthing start <span class="o">&amp;&amp;</span> service syncthing-inotify start
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>4. Update Syncthing configuration file </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Update the default Sync directory to match your dev environment</span>
</span><span class='line'><span class="c"># using the correct device IDs</span>
</span><span class='line'><span class="nv">$ </span>head -n <span class="m">10</span> ~/.config/syncthing/config.xml
</span><span class='line'>&lt;configuration <span class="nv">version</span><span class="o">=</span><span class="s2">&quot;10&quot;</span>&gt;
</span><span class='line'>    &lt;folder <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;ansible-blog&quot;</span> <span class="nv">path</span><span class="o">=</span><span class="s2">&quot;/root/tdd_ansible&quot;</span> <span class="nv">ro</span><span class="o">=</span><span class="s2">&quot;false&quot;</span> <span class="nv">rescanIntervalS</span><span class="o">=</span><span class="s2">&quot;60&quot;</span> <span class="nv">ignorePerms</span><span class="o">=</span><span class="s2">&quot;false&quot;</span> <span class="nv">autoNormalize</span><span class="o">=</span><span class="s2">&quot;false&quot;</span>&gt;
</span><span class='line'>        &lt;device <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;MY-DEVICE-ID&quot;</span>&gt;&lt;/device&gt;
</span><span class='line'>        &lt;device <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;PEER-DEVICE-ID&quot;</span>&gt;&lt;/device&gt;
</span><span class='line'>        &lt;versioning&gt;&lt;/versioning&gt;
</span><span class='line'>        &lt;copiers&gt;0&lt;/copiers&gt;
</span><span class='line'>        &lt;pullers&gt;0&lt;/pullers&gt;
</span><span class='line'>        &lt;hashers&gt;0&lt;/hashers&gt;
</span><span class='line'>        &lt;order&gt;random&lt;/order&gt;
</span><span class='line'>    &lt;/folder&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># Add peer device&#39;s ID to the same file</span>
</span><span class='line'><span class="nv">$ </span>cat ~/.config/syncthing/config.xml
</span><span class='line'>...
</span><span class='line'>    &lt;device <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;PEER-DEVICE-ID&quot;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;NETOP-DESKTOP&quot;</span> <span class="nv">compression</span><span class="o">=</span><span class="s2">&quot;metadata&quot;</span> <span class="nv">introducer</span><span class="o">=</span><span class="s2">&quot;false&quot;</span>&gt;
</span><span class='line'>        &lt;address&gt;dynamic&lt;/address&gt;
</span><span class='line'>    &lt;/device&gt;
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="c"># restart both syncthing services</span>
</span><span class='line'><span class="nv">$ </span>service syncthing restart <span class="o">&amp;&amp;</span> service syncthing-inotify restart
</span></code></pre></td></tr></table></div></figure>


<p>Finally, Windows service can be configured similarly via Syncthing Tray. End result is that files are replicated between the two folders with a delay of just a few seconds</p>

<figure class='code'><figcaption><span>Verification</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>touch /root/tdd_ansible/testfile
</span><span class='line'><span class="nv">$ </span>tail -n <span class="m">3</span> /var/log/upstart/syncthing*
</span><span class='line'><span class="o">==</span>&gt; /var/log/upstart/syncthing-inotify.log &lt;<span class="o">==</span>
</span><span class='line'><span class="o">[</span>OK<span class="o">]</span> 01:45:04 Watching ansible-blog: /root/tdd_ansible
</span><span class='line'><span class="o">[</span>OK<span class="o">]</span> 01:45:04 Syncthing is indexing change in ansible-blog: <span class="o">[</span>.stfolder<span class="o">]</span>
</span><span class='line'><span class="o">[</span>OK<span class="o">]</span> 01:46:16 Syncthing is indexing change in ansible-blog: <span class="o">[</span>testfile<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">==</span>&gt; /var/log/upstart/syncthing.log &lt;<span class="o">==</span>
</span><span class='line'><span class="o">[</span>TLARX<span class="o">]</span> 01:41:25 INFO: Established secure connection to DEVICE-ID at 192.168.X.Y:22000-192.168.X.Z:53007
</span><span class='line'><span class="o">[</span>TLARX<span class="o">]</span> 01:41:25 INFO: Device DEVICE-ID client is <span class="s2">&quot;syncthing v0.11.10&quot;</span>
</span><span class='line'><span class="o">[</span>TLARX<span class="o">]</span> 01:41:25 INFO: Device DEVICE-ID name is <span class="s2">&quot;NETOP-DESKTOP&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>How can you not love open-source after that?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Development Environment Setup]]></title>
    <link href="http://networkop.github.io/blog/2015/06/17/dev-env-setup/"/>
    <updated>2015-06-17T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/06/17/dev-env-setup</id>
    <content type="html"><![CDATA[<p>Before we proceed with TDD framework build it is important to have the development environment setup. In our case it will consist of two major components:</p>

<ul>
<li>Network Simulation Environment</li>
<li>Ansible Development Environment</li>
</ul>


<p>To simplify things I will run both of these environments on the same Virtual Machine. For network simulation I will use <a href="http://www.unetlab.com/">UnetLab</a>, a wonderful product developed by Andrea Dainese. Currently, UnetLab is distributed as an OVA package and is available for free download on <a href="http://www.unetlab.com/download/">the website</a>. To simulate network devices I will run <abbr title="IOS on Unix">IOU</abbr> which will be interconnected to form a simple network. Finally, I will show how to setup development environment with Ansible, git and Python.</p>

<!--more-->


<h2>UnetLab setup</h2>

<p>UnetLab is a network simulation environment very similar to GNS3. The biggest advantage for me, personally, is that it runs as a single entity and doesn&rsquo;t require a separate front-end like GNS3. That being said, the only requirement for this project is for the test network to have remote connectivity to a machine running Ansible, so having UnetLab specifically is not required and any network simulator would do, including a real (non-virtual) lab. One of the side effects of choosing UnetLab is that all development will have to be done on Ubuntu which is the OS pre-installed in the OVA.<br/>
Here are the steps required to get the network environment setup:</p>

<ol>
<li><a href="http://www.unetlab.com/download/">Download</a> and import OVA file into the hypervisor of your choice.</li>
<li>Download and <a href="http://www.unetlab.com/2014/11/adding-cisco-iouiol-images/">import</a> Cisco L3 IOU file.</li>
<li>Create a simple 4-device network (<a href="http://www.unetlab.com/2014/11/create-the-first-lab/">example</a>) and <a href="http://www.unetlab.com/2014/11/using-cloud-devices/">connect it to the network of host machine</a>.</li>
<li><a href="http://www.unetlab.com/2015/03/url-telnet-ssh-vnc-integration-on-windows/">Configure</a> your favourite terminal program to work with UnetLab&rsquo;s web interface</li>
</ol>


<p>This is the topology I will be using for testing:
<img class="center" src="http://networkop.github.io/images/lab-topo.png" title="'Test Topology'" ></p>

<p>Each device will have a Loopback interface in <code>10.0.0.0/24</code> subnet which I will statically point to <code>interface Eth0/2</code> of R1 on the host machine. Here&rsquo;s the example of R1&rsquo;s configuration:</p>

<figure class='code'><figcaption><span>Sample Router Configuration - R1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>! Configure hostname, domain and RSA key to enable SSH
</span><span class='line'>hostname R1
</span><span class='line'>ip domain name tdd.lab
</span><span class='line'>crypto key generate rsa modulus 1024
</span><span class='line'>! Point AAA to local database
</span><span class='line'>aaa new-model
</span><span class='line'>aaa authentication login default local
</span><span class='line'>aaa authorization exec default local
</span><span class='line'>username cisco privilege 15 secret cisco
</span><span class='line'>! Enable remote ssh connections
</span><span class='line'>line vty 0 4
</span><span class='line'> transport input ssh
</span><span class='line'>! Configure interfaces
</span><span class='line'>interface Loopback0
</span><span class='line'> ip address 10.0.0.1 255.255.255.255
</span><span class='line'>!
</span><span class='line'>interface Ethernet0/0
</span><span class='line'> ip address 12.12.12.1 255.255.255.0
</span><span class='line'>!
</span><span class='line'>interface Ethernet0/1
</span><span class='line'> ip address 14.14.14.1 255.255.255.0
</span><span class='line'>!
</span><span class='line'>interface Ethernet0/2
</span><span class='line'> description connection to host machine
</span><span class='line'> ip address 192.168.247.25 255.255.255.0
</span><span class='line'>! Enable dynamic routing
</span><span class='line'>router eigrp 100
</span><span class='line'> network 0.0.0.0
</span><span class='line'>!
</span><span class='line'>end
</span><span class='line'>write
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>All other devices will have similar configuration with the end goal of having connectivity between any pair of Loopback interfaces.</p>

<p>In order to to have connectivity to devices from a host machine we need to add a static route for <code>10.0.0.0/24</code> network:</p>

<figure class='code'><figcaption><span>Adding a static route to test topology</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>route add -net 10.0.0.0 netmask 255.255.255.0 gw 192.168.247.25
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>At this point host machine should be able to ping each one of those Loopbacks:</p>

<figure class='code'><figcaption><span>Testing connectivity to test devices</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="k">for</span> i in <span class="o">{</span>1..4<span class="o">}</span><span class="p">;</span> <span class="k">do</span> ping -c <span class="m">1</span> 10.0.0.<span class="nv">$i</span><span class="p">;</span> <span class="k">done</span> <span class="p">|</span> grep packets
</span><span class='line'><span class="m">1</span> packets transmitted, <span class="m">1</span> received, 0% packet loss, <span class="nb">time </span>0ms
</span><span class='line'><span class="m">1</span> packets transmitted, <span class="m">1</span> received, 0% packet loss, <span class="nb">time </span>0ms
</span><span class='line'><span class="m">1</span> packets transmitted, <span class="m">1</span> received, 0% packet loss, <span class="nb">time </span>0ms
</span><span class='line'><span class="m">1</span> packets transmitted, <span class="m">1</span> received, 0% packet loss, <span class="nb">time </span>0ms
</span></code></pre></td></tr></table></div></figure>


<h2>Dev environment setup</h2>

<p>Ansible is one of the most popular automation and orchestration tools in IT industry. Part of its popularity is due to the &ldquo;clientless&rdquo; architecture where
the only requirement to a managed system is to have ssh access and Python execution environment. The latter pretty much rules out the biggest part of common
networking infrastructure. However it is still possible to use Ansible in a &ldquo;raw&rdquo; mode and write modules of our own. That&rsquo;s exactly what we&rsquo;re gonna do in this exercise.
Due to the fact that Ansible is written in Python, it has better support for modules written in the same language, therefore all modules will be written in Python.<br/>
One important tool every developer uses is version control. It allows to track changes made to the code and enables collaboration between multiple
people working on the same project. For beginners it always makes sense to stick to the most popular tools, that&rsquo;s why I&rsquo;ll be using git for version control and store all my code on Github.</p>

<p>This is what&rsquo;s needed to setup the development environment:</p>

<figure class='code'><figcaption><span>1. Install Python and git packages</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get update <span class="o">&amp;&amp;</span> sudo apt-get install python git-core
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>2. Initialise global git settings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config --global user.name <span class="s2">&quot;Network-oriented programming&quot;</span>
</span><span class='line'><span class="nv">$ </span>git config --global user.email <span class="s2">&quot;networkop@example.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>3. Install Ansible</span><a href='http://docs.ansible.com/intro_installation.html'>Ansible Installation</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install software-properties-common
</span><span class='line'><span class="nv">$ </span>sudo apt-add-repository ppa:ansible/ansible
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install ansible
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>4. Test Ansible connectivity to our network topology</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo <span class="nb">echo</span> <span class="s2">&quot;R1 ansible_ssh_host=10.0.0.1&quot;</span> &gt;&gt; /etc/ansible/hosts
</span><span class='line'><span class="nv">$ </span><span class="nb">printf</span> <span class="s2">&quot;[defaults]\nhost_key_checking=False\n&quot;</span> &gt;&gt; ansible.cfg
</span><span class='line'><span class="nv">$ </span>ansible R1 -u cisco --ask-pass -m <span class="s2">&quot;raw&quot;</span> -a <span class="s2">&quot;show version | include IOS&quot;</span>
</span><span class='line'>SSH password:
</span><span class='line'>R3 <span class="p">|</span> success <span class="p">|</span> <span class="nv">rc</span><span class="o">=</span><span class="m">0</span> &gt;&gt;
</span><span class='line'>Cisco IOS Software, Linux Software <span class="o">(</span>I86BI_LINUX-ADVENTERPRISEK9-M<span class="o">)</span>, Version 15.4<span class="o">(</span>1<span class="o">)</span>T, DEVELOPMENT TEST SOFTWARE
</span><span class='line'>Connection to 10.0.0.1 closed by remote host.
</span></code></pre></td></tr></table></div></figure>


<p>The above script first populates Ansible <code>inventory</code> file with an ip address of R1, then disables ssh key checking,
 and finally runs an <code>ad-hoc</code> command <code>show version | include IOS</code> which should prompt for a password and return a result of command execution on R1.
 I will explain about inventory and configuration files in a bit more detail in the next post. At this stage all what&rsquo;s required is a meaningful response from a Cisco router.</p>

<p><figure class='code'><figcaption><span>
5. Create a free Github account and setup a new repository
</span><a href='https://github.com/join'>Join Github</a></figcaption><div class="highlight">
</figure>
For my blog I will be using <code>networkop</code> as a Github username and <code>simple-cisco-tdd</code> as a repository name.
Once respository is created, Github will provide instructions to setup repository on a local machine which will be done in the next step.</p>

<p><figure class='code'><figcaption><span>6. Setup a project directory and initialise git</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir ~/tdd_ansible <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ~/tdd_ansible
</span><span class='line'><span class="nv">$ </span>eacho <span class="s2">&quot;simple-cisco-tdd&quot;</span> &gt;&gt; README.md
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>git add README.md
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;first commit&quot;</span>
</span><span class='line'><span class="nv">$ </span>git remote add origin <a href="https://github.com/networkop/simple-cisco-tdd.git">https://github.com/networkop/simple-cisco-tdd.git</a>
</span><span class='line'><span class="nv">$ </span>git push -u origin master
</span><span class='line'>Username <span class="k">for</span> <a href="https://github.com:">https://github.com:</a> networkop
</span><span class='line'>Password <span class="k">for</span> <a href="https://networkop@github.com:">https://networkop@github.com:</a>
</span><span class='line'>Counting objects: 3, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>3/3<span class="o">)</span>, <span class="m">206</span> bytes <span class="p">|</span> <span class="m">0</span> bytes/s, <span class="k">done</span>.
</span><span class='line'>Total <span class="m">3</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>To <a href="https://github.com/networkop/simple-cisco-tdd.git">https://github.com/networkop/simple-cisco-tdd.git</a>
</span><span class='line'> * <span class="o">[</span>new branch<span class="o">]</span>      master -&gt; master
</span><span class='line'>Branch master <span class="nb">set </span>up to track remote branch master from origin.
</span></code></pre></td></tr></table></div></figure></p>

<p>The above result indicates that <code>README.md</code> file has been pushed to Github successfully. Needless to say that all pushed local files can be also viewed from Github&rsquo;s web page.</p>

<hr />

<p>This completes the initial environment setup. I highly recommend at this stage, hypervisor permitting, to take a snapshot of a current state of a virtual machine to avoid having to rebuild it every time something goes pear-shaped.
In the next post I will show how to setup Ansible to work with Cisco devices.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Simple Network TDD Framework]]></title>
    <link href="http://networkop.github.io/blog/2015/06/15/simple-tdd-framework/"/>
    <updated>2015-06-15T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/06/15/simple-tdd-framework</id>
    <content type="html"><![CDATA[<p>In the following series of posts I will show how to build a simple Test-Driven Development framework
for Cisco devices. This framework will allow a network engineer to define traffic patterns in a human-readable format and automatically check if those assumption hold. It will be built as a series of <a href="http://docs.ansible.com/list_of_files_modules.html">Ansible</a> <em>modules</em> and <em>playbooks</em>. The idea is to show an example of how programming can be used by network engineers even now, before all devices acquire their own APIs as well as introduce some well-known programming paradigms and best practices to network engineers thereby making a small step towards networking nirvana a.k.a. <abbr title="Software-Defined Network">SDN</abbr>. The reader is assumed to have only a basic networking, linux and python programming skills.</p>

<!--more-->


<h2>Before we begin (optional section)</h2>

<p>Before we go on, I&rsquo;d like to put a little disclaimer about terms being used in this post. <abbr title="Test-Driven Development">TDD</abbr>, and its counterpart <abbr title="Behaviour-Driven Development">BDD</abbr>,
are well-known and accepted practices in development world. Both rely on the assumption that tests will be written
before the code and will <em>drive</em> code development. This seemingly unnatural approach became extremely popular with the advent of <a href="http://agilemanifesto.org/">Agile</a> and is still being widely used, specifically in web development. What I will be developing will look more like a BDD rather than TDD, since it will be testing overall system behaviour rather than small self-contained portions of configuration. However, I still prefer to use the term TDD, firstly, because it&rsquo;s easier to understand for people from a non-dev background, secondly, because it&rsquo;s very hard/impossible to test small portions of network configuration (like routing protocol configuration), and lastly, since my tests will rely heavily on traceroutes, TDD may as well stand for Traceroute-Driven Development.</p>

<h2>How will it work?</h2>

<p>Traffic flow patterns, a.k.a. traffic paths is one bit of information that even higher-level management is able to comprehend. With a nice network diagram it is easy to show how low-latency traffic from Network_A will flow to Network_B through private VPN link on Router_X, while an internet-bound traffic will traverse a low-cost, high-latency Internet link on Router_Y. The TDD framework will use the same idea but in a text format</p>

<figure class='code'><figcaption><span>TDD scenario file example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>1. Testing of Primary Link
</span><span class='line'>  1. From Router1 to Router2 via Router4, Router5
</span><span class='line'>  2. From Router2 to Router1 via Router5, Router4
</span><span class='line'>2. Testing of Backup Link
</span><span class='line'>  1. From Router4 to Router1 via Router3
</span><span class='line'>  2. From Router4 to Router2 via Router7
</span></code></pre></td></tr></table></div></figure>


<p>This format can be understood by both network engineers and their clients and can be used as a basis for network acceptance and verification testing. At the same time it follows a strictly defined format which can be parsed, processed and actioned by a program. I&rsquo;ll show how to write an Ansible module that parses this text, runs a traceroute and checks if the test was successful.<br/>
These tests can also be used during regression testing of the network each time network configuration changes. This kind of verification offers a much more reliable result compared to visual examination of traceroute results and routing tables.</p>

<h2>Step-by-step procedure</h2>

<p>This is how I see the whole development process now (before I started). Some section may get added/removed in the process. I&rsquo;ll try to write at least one post a week aiming to complete the series in under one month.</p>

<ol>
<li><a href="http://networkop.github.io/blog/2015/06/17/dev-env-setup/">Development environment setup</a></li>
<li><a href="http://networkop.github.io/blog/2015/06/24/ansible-intro/">Getting started with Ansible for Cisco IOS</a></li>
<li>Developing Ansible library to gather facts from Cisco devices</li>
<li>Developing Ansible library to verify test scenarios</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iBGP Fall-over Trick]]></title>
    <link href="http://networkop.github.io/blog/2015/06/11/ibgp-fallover-trick/"/>
    <updated>2015-06-11T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/06/11/ibgp-fallover-trick</id>
    <content type="html"><![CDATA[<p>BGP fall-over is a neat BGP convergence optimisation technique whereby BGP peering is brought down as soon as the route to neighbor disappears from a routing table.
The difference between external and internal BGP is that the former usually peers over a directly-attached interface so that when the interface to neighbor is disconnected,
route is withdrawn from the routing table which triggers eBGP fall-over to bring down the neighborship.
iBGP, on the other hand, normally uses device loopbacks to establish peering sessions. What this means is if a summary or a default route is present in the routing table (either static or learned
via IGP), there is always a route to iBGP neighbor. In this case BGP has to wait for default 180 seconds (3 x keepalive timer) to bring down the neighborship and withdraw all the routes learned from dead neighbor.<br/>
To overcome that there&rsquo;s a route-map option for a <code>neighbor fall-over</code> command which allows user to specify the exact prefix for which to look in the routing table. In the example below, the router will
look for specific host routes representing neighbor&rsquo;s loopbacks and will trigger reconvergence as soon as those routes disappear.</p>

<!--more-->




<div class="highlight"><pre><code class="language-text" data-lang="text">!
router bgp 100
 neighbor 1.1.1.1 remote-as 100
 neighbor 1.1.1.1 fall-over route-map RM-BGP-FALLOVER-1
 neighbor 2.2.2.2 remote-as 200
 neighbor 2.2.2.2 fall-over route-map RM-BGP-FALLOVER-2
!
ip prefix-list PL-ROUTER-1 seq 5 permit 1.1.1.1/32
!
ip prefix-list PL-ROUTER-2 seq 5 permit 2.2.2.2/32
!
route-map RM-BGP-FALLOVER-1 permit 10
 match ip address prefix-list PL-ROUTER-1
!
route-map RM-BGP-FALLOVER-2 permit 10
 match ip address prefix-list PL-ROUTER-2
!</code></pre></div>


<p>It&rsquo;s obvious that this configuration is not very scalable as it requires a separate route-map and a separate prefix-list for each of the iBGP neighbors which,
on a device like a route-reflector, can easily turn into dozens of lines of code.</p>

<h2>Solution</h2>

<p>There is a nice and short way of how to accomplish the same task which relies on a prefix-list property often overlooked. Cisco&rsquo;s ip prefix-list are often used in the
most straight-forward way, e.g. to define a a link-local subnet we&rsquo;d use <code>169.254.0.0/16</code> or <code>0.0.0.0/0 le 32</code> for all possible prefixes. However, there&rsquo;s a way
to define, for example, a list of prefixes that start with 10.0. and have a length from /24 to /25 with <code>10.0.0.0/16 ge 24 le 25</code>. In this case the first /16 defines
the number of bits in the prefix to be matched and ge, le simple define the length boundaries. Using a similar logic it is possible to define all prefix-list that
would match all possible host-routes - <code>ip prefix-list PL-ALL-LOOPBACKS seq 5 permit 0.0.0.0/0 ge 32</code>. The first part <code>0.0.0.0/0</code> makes the router ignore the actual
bits in the prefix effectively making it match ALL prefixes, while the second part <code>ge 32</code> tells the router to only match prefixes that are => 32 effectively matching
only host-specific routes.<br/>
With that in mind, it is possible to re-write the former
config in a much more concise format so that all iBGP neighbors would use a single route-map with a single prefix-list.</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">!
router bgp 100
 neighbor 1.1.1.1 remote-as 100
 neighbor 1.1.1.1 fall-over route-map RM-BGP-FALLOVER
 neighbor 2.2.2.2 remote-as 200
 neighbor 2.2.2.2 fall-over route-map RM-BGP-FALLOVER
!
ip prefix-list PL-ALL-LOOPBACKS seq 5 permit 0.0.0.0/0 ge 32
!
route-map RM-BGP-FALLOVER permit 10
 match ip address prefix-list PL-ALL-LOOPBACKS
!</code></pre></div>


<p>What happens now is that Cisco router, when bringing up the neighbor, scans it&rsquo;s own routing table looking for a /32 host-route that matches the ip address of that neighbor and
attaches a listener to this route. If the neighbor goes down, the IGP will detect it a lot sooner than BGP and will withdraw that host-route; our router&rsquo;s bgp process will get notified
and will re-scan it&rsquo;s routing table for any other matches and, having found none, will bring down the neighborship immediately. Effectively this makes iBGP rely totally on timers of underlying IGP, which,
needless to say, dramatically speeds up convergence times for BGP.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Structured Approach to Troubleshooting of L3VPN Networks]]></title>
    <link href="http://networkop.github.io/blog/2015/06/10/l3vpn-mpls-troubleshoot/"/>
    <updated>2015-06-10T05:52:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/06/10/l3vpn-mpls-troubleshoot</id>
    <content type="html"><![CDATA[<p>With the amount of configuration involved in a typical L3VPN configuration, troubleshooting process can get pretty chaotic, especially
in a time-constrained environments like CCIE lab. That&rsquo;s why it is extremely important to have a well-structured approach to quickly
narrow down the potential problem area. I used the below algorithm while preparing for my lab exam.
Like most of the networking problems, troubleshooting of L3VPNs can and must be split into two different phases - control plane and data plane.
All steps must be done sequentially with each next step relying on the successful verification of all previous steps.</p>

<p><img class="centre" src="http://networkop.github.io/images/l3vpn.jpg" title="Test topology" ></p>

<dl>
<dt>Problem definition</dt>
<dd>CE-1 (10.0.0.1) can not reach CE-2 (10.0.0.2)</dd>
</dl>

<!--more-->


<h2>Troubleshooting of L3VPN control plane</h2>

<ol>
<li>Check if PE-2 can reach CE-2 from it&rsquo;s VRF <code>ping vrf A 10.0.0.2</code>. If not - make sure the PE-CE routing protocol is configured to propagate CE subnet.</li>
<li>Make sure that 10.0.0.2 is in vpnv4 BGP RIB on PE-2 with <code>show bgp vpnv4 unicast 10.0.0.2/32</code>. If not - make sure this route gets redistributed into
vpnv4 bgp <code>address family ipv4 vrf A</code>.</li>
<li>Check vpnv4 BGP peerings on PE-2 with <code>show ip bgp vpnv4 unicast all summary</code>. In our case it peers with VPNV4 Route-Reflector (3.3.3.3).
If not - check that the neighbor is configured and activated under <code>address family vpnv4</code> and that the neighbor address (3.3.3.3) is reachable.</li>
<li>On intermediate Route-Reflector P check that the CE-2 subnet is present in BGP RIB with <code>show ip bgp vpnv4 unicast 10.0.0.2/32</code>. If not - check that
PE-02 advertises this subnet to P with <code>show ip bgp vpnv4 unicast all neighbor 3.3.3.3 advertised</code></li>
<li>On PE-1 check that CE-2 subnet is present in vpnv4 BGP RIB with <code>show ip bgp vpnv4 unicast 10.0.0.2/32</code>. If not - make sure P is one of it&rsquo;s vpnv4 peers
and that P advertises this subnet to PE-1</li>
<li>Check that vrf A on PE-1 contains the advertised subnet 10.0.0.2 with <code>show ip route vrf A 10.0.0.2</code>. If not - make sure that import route target on PE-1 equals
to export route target on PE-2 and that this subnet is redistributed from BGP into PE-CE routing protocol</li>
</ol>


<h2>Troubleshooting of L3VPN data plane</h2>

<p>If control plane is working fine, next step is to troubleshoot the data plane. This can be most difficult since LDP can be so easily broken by summarisation
or filtering. However, in general, data plane troubleshooting will consist of the following
steps:</p>

<ol>
<li>Make sure PE-2 knows how to reach PE-1 over the LSP with <code>show mpls forwarding 1.1.1.1</code>.</li>
<li>Make sure PE-1 knows how to reach PE-2 over the LSP with <code>show mpls forwarding 2.2.2.2</code>.</li>
<li>MPLS-trace the path from PE-2 to PE-1 with <code>traceroute mpls ipv4 1.1.1.1 source 2.2.2.2</code>.</li>
<li>Do the same in the other direction. In case traceroute stops, jump on the last responded node and check that LDP peering
is running with all its neighbors with <code>show mpls ldp neighbor</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enterprise IP Routing Best Practices]]></title>
    <link href="http://networkop.github.io/blog/2015/06/03/ent-ip-routing-bcp/"/>
    <updated>2015-06-03T14:19:02-07:00</updated>
    <id>http://networkop.github.io/blog/2015/06/03/ent-ip-routing-bcp</id>
    <content type="html"><![CDATA[<p>What motivated me to write this post is a state of the IP routing of some of the enterprise networks I&rsquo;ve seen.
A quick <code>show ip route</code> command reveals a non-disentanglable mixture of dynamic and static route with multiple points of redistribution and complex,
rigid filtering rules, something you&rsquo;d only see in your bad dream or a CCIE-level lab. It certainly takes
a good engineer to understand how it works and even that can take up to several hours. I think the reason for that
is that people have generally been concentrated on learning about the routing protocol, how it works, all the knobs you can twist
to influence a routing decision logic. However, one thing often overlooked is the routing protocols best practice design,
i.e. <strong>when</strong> and <strong>how</strong> to use a particular protocol.
And since the latter is often an acquired skill, a lot of not-so-lucky engineers end up with wrong ideas and concepts
in the heads. Below I&rsquo;ll try to list what <em>I</em>{:.underline} consider a best practice design of today&rsquo;s enterprise networks.</p>

<!--more-->


<h2>OSPF, EIGRP, BGP? Which one to use?</h2>

<p>Golden rule is to always use a protocol where it was designed to be used. Use and constrain IGP to a single autonomous system.
For enterprise networks autonomous system can be:</p>

<ul>
<li>a single, geographically-constrained office network</li>
<li>remote branch office network</li>
<li>campus network</li>
<li>data centre</li>
</ul>


<p>Use BGP to interconnect these systems. When there&rsquo;s a choice to use iBGP vs eBGP, always prefer eBGP since it has less restrictions.
However for some designs iBGP is a better fit (i.e. Hub-and-Spoke topologies). Almost for every WAN technology there&rsquo;s a <em>preferred</em>
WAN protocol, e.g. eBGP for L3VPN, iBGP for DMVPN/FlexVPN, so always check with the vendor&rsquo;s design guide.</p>

<h2>IGP best practices</h2>

<p>The choice of a particular IGP is mainly irrelevant. EIGRP scales better in a well-structured hierarchical network, whereas link-state protocol like OSPF
don&rsquo;t require any underlying structure. In fact, best practice for OSPF design, for quite some time, has been to put all routers in a single Area 0 regardless
of their geographical location. This rule, like any, has its' exceptions and special dampening/ advertisement containment rules need to be applied
to links prone to flapping (e.g. aerial links). However, both EIGRP and OSPF have proven to be quite stable and scalable even with <em>not-so-good</em> designs.<br/>
I follow the these rules when designing an IGP:</p>

<ul>
<li>Advertise all routers' networks, i.e. <code>network 0.0.0.0 0.0.0.0</code> command</li>
</ul>


<blockquote><p>ideally within a single AS there will be a full-mesh reachability between the devices</p></blockquote>

<ul>
<li>Explicitly control which interfaces will form routing adjacencies with <code>passive interface</code> commands</li>
<li>statically set router-id to the address of loopback interface which uniquely identifies the device
(not included in any other summary and not advertise by anyone else)</li>
<li>When using EIGRP exclude bandwidth and leave only delay in metric calculation with <code>metric weights 0 0 0 1 0 0</code></li>
</ul>


<blockquote><p>as opposed to bandwidth, interface delay is uniquely used by EIGRP so changing it won&rsquo;t negatively affect any other processes</p></blockquote>

<ul>
<li>When using OSPF always update reference bandwidth on all routers to 100G with <code>auto-cost reference-bandwidth 100000</code></li>
<li>All WAN links should be known to IGP natively but should be passive at the same time</li>
<li>Avoid redistribution between IGP and BGP at all costs</li>
</ul>


<blockquote><p>redistribution can create routing loops due to loss of native routing protocol metric. troubleshooting these loops is one of the most difficult
tasks for a network engineer</p></blockquote>

<h2>BGP best practices</h2>

<p>Whenever I design a non-stub (i.e. transit) network I try to enable BGP on all transit devices. This rule helps me avoid using redistribution between
IGP and BGP. Assuming a standard dual-core, dual-wan link topology the core will become a route-reflector whereas WAN routers will become RR-clients.
The only issue is that a lot of devices used in the network core still come with limit or no BGP support. In this case redistribution can be an option, however
carefull planning and strict filtering rules need to be put in place in order to prevent any potential routing loops.
These are my BGP best practices:</p>

<ul>
<li>Always statically configure BGP router-id to be equal to ip address of loopback interface</li>
<li>Always send/receive both standard and extended communities <code>neighbor X.X.X.X send-community both</code></li>
<li>Always add description to a neighbor. You can&rsquo;t overdocument your network</li>
<li>When configuring iBGP always use loopbacks (advertised by your IGP) for peering. This will help a lot with performance optimisation described below</li>
<li>Always keep track of BGP AS numbers in use in the network</li>
<li>For every network that doesn&rsquo;t need to be transit assign community <code>local-as</code> in the inbound route-map</li>
<li>Whenever possible filter <strong>outbound</strong> rather than <strong>inbound</strong></li>
</ul>


<blockquote><p>this way only infromation <strong>that is needed</strong> is sent to the neighbor</p></blockquote>

<ul>
<li>Always configure <code>ip bgp community new-format</code> on all routers</li>
<li>Only inject <strong>summaries</strong> into BGP. The only exception can be routers' loopback address which can be used by remote SLA monitoring.</li>
</ul>


<blockquote><p>This is the key distinction between IGP and BGP. IGPs deal with all networks within an AS big or small.
BGP deals with networks that represent a whole AS, i.e. summaries.
Normally, the core device in the network originates a summary from a static <em>null</em> route and advertises it to all the neighbors.</p></blockquote>

<ul>
<li>Always tag all prefixes injected into BGP with communities. For example:</li>
</ul>


<blockquote><p>65000:0 - for site-specific summary<br/>
65000:1 - for smaller, site-specific subnets outside of summary range (e.g. DMZ)<br/>
65000:3 - for 3rd-party routes (e.g. provider-originated routes, interconnects with other clients)</p></blockquote>

<ul>
<li>Always filter based on communities rather than prefix lists or access-lists</li>
<li>Do not use route filtering as a security measure. Firewalls are designed to do that</li>
<li>For any route decision manipulation rely on explicitly configured metrics and not on, say, router-id or IGP metric</li>
</ul>


<blockquote><p>Use as few metric manipulations as possible. For example use local-preference for outbound and as-path for inbound path selection</p></blockquote>

<ul>
<li>Always tune BGP convergence timers (more on that below)</li>
</ul>


<h2>BGP performance tuning</h2>

<ul>
<li>BFD</li>
</ul>


<p>This seemingly <em>old</em> technology unfortunately still sees very little adoption in the enterprise market. It is the best option for
fast high-bandwidth links and should be used whenever possible</p>

<ul>
<li>external/internal fall-over</li>
</ul>


<p>This convergence optimisation techniques rely on the presence of route to neighbor in the routing table.
as soon the route is gone, the neighborship is brought down. Fast fall-over is enabled by default for eBGP neighbors
on Cisco devices and should be enabled manually per neighbor(-group) for iBGP neighbors.</p>

<pre><code># the following triggers fall-over only if host-route to neighbor disappears
router bgp 10
 neighbor 1.1.1.1 remote-as 10
 neigbhor 1.1.1.1 fall-over route-map RM-BGP-FALLOVER
!
ip prefix-list PL-ALL-LOOPBACKS 0.0.0.0/0 ge 32
!
route-map RM-BGP-FALLOVER
 match ip address prefix-list PL-ALL-LOOPBACKS
!
</code></pre>

<ul>
<li>BGP keepalive timer</li>
</ul>


<p>Default BGP timers 30/180 seconds are too big for most of the cases. However, if fast fall-over is properly used they never need to be modified.
Internal fall-over effectively makes BGP neighborships rely on IGP default timers instead, while external fall-over will work only for directly connected
neighbor (or if a route to this neighbor recurses over a directly connected interface). The only reason to change the default timer values would be if the route
to external neighbor can potentially recurse over an internal interface (e.g. in case default route is present). In this case using `neighbor X.X.X.X keepalive 10 30"
would set keepalive/dead timers to 10/30 seconds. The timer values are negotiated to the lowest values between the two peers during neighborship establishment.</p>

<ul>
<li>Prefix-independent convergence and ip next-hop tracking</li>
</ul>


<p>These two optimisation techniques do not require any configuration and are enabled by default in all recent code versions.
PIC decouples ip prefixes and next-hops and allows for quicker convergence when multiple BGP prefixes are present in BGP RIB with different next-hops.
IP NH-tracking triggers route recomputation based on changes in the routing table (i.e. next-hop becoming unavailable) rather than waiting for the periodic update
scanner to run every 60 seconds. There&rsquo;s plenty of additional information about both PIC (<a href="http://blog.ipspace.net/2012/01/prefix-independent-convergence-pic.html">one</a>, <a href="http://blog.ine.com/2010/11/22/understanding-bgp-convergence/">two</a>, <a href="http://www.cisco.com/c/en/us/td/docs/routers/7600/ios/15S/configuration/guide/7600_15_0s_book/BGP.html">three</a>) and
IP NH-tracking (<a href="http://blog.ine.com/2010/11/22/understanding-bgp-convergence/">one</a>, <a href="http://www.cisco.com/c/en/us/td/docs/ios/12_2sb/feature/guide/sbbnhop.html">two</a>) on the internet.</p>

<h2>Conclusion</h2>

<p>Enterprise network designers should more often look at their Service Provider counterparts and how they do things.
SP design practices have been evolving for years and proved to be stable and scalable. License permitting, we can
apply the same rules in enterprise networks and end up with a more stable and scalable network.</p>
]]></content>
  </entry>
  
</feed>
