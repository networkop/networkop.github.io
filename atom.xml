<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Network-oriented programming]]></title>
  <link href="http://networkop.github.io/atom.xml" rel="self"/>
  <link href="http://networkop.github.io/"/>
  <updated>2016-03-23T03:24:51-07:00</updated>
  <id>http://networkop.github.io/</id>
  <author>
    <name><![CDATA[Michael Kashin]]></name>
    <email><![CDATA[mmkashin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Network-CI Part 3 - OSPF to BGP Migration in Active/Standby DC]]></title>
    <link href="http://networkop.github.io/blog/2016/03/23/network-ci-demo-large/"/>
    <updated>2016-03-23T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2016/03/23/network-ci-demo-large</id>
    <content type="html"><![CDATA[<p>The final post in a series demonstrates how to use the <strong>network-ci</strong> tools to safely replace a core routing protocol inside a small Active/Standby Data Centre.</p>

<!--more-->


<h2>Current network overview</h2>

<p>Let&rsquo;s start by taking a high-level look at our DC network routing topology. The core routing protocol is OSPF, it is responsible for distributing routing information between the Core and WAN layers of the network. WAN layer consists of two MPLS L3VPN services running BGP as PE-CE protocol and two DMVPN Hubs running EIGRP. All WAN layer devices perform mutual redistribution between the respective WAN protocol and OSPF.</p>

<p><img class="center" src="http://networkop.github.io/images/network-ci-dc-before.png" title="Current network topology" ></p>

<h2>Target network overview</h2>

<p>The task is to replace OSPF with BGP as the core routing protocol inside the Data Centre. There are many advantages to using BGP inside a DC, in our case they are:</p>

<ul>
<li>Enhanced traffic routing and filtering policies</li>
<li>Reduced number of redistribution points</li>
<li>Because Ivan Pepelnjak <a href="http://blog.ipspace.net/2016/02/using-bgp-in-data-center-fabrics.html">said so</a></li>
</ul>


<p>We&rsquo;re not going getting rid of OSPF completely, but rather reduce its function to a simple distribution of <em>internal</em> DC prefixes. BGP will be running on top of OSPF and distribute all the DC and WAN <em>summary</em> prefixes.</p>

<p><img class="center" src="http://networkop.github.io/images/network-ci-dc-after.png" title="Target network topology" ></p>

<h2>Physical topology overview</h2>

<p>Now let&rsquo;s take a closer look at the network that we&rsquo;re going to emulate. All green devices on the left-hand side constitute the <strong>Active</strong> Data Centre, that is where all the traffic will flow under normal conditions. All green devices have red <strong>Standby</strong> counterparts. These devices will pick up the function of traffic forwarding in case their green peer becomes unavailable.</p>

<p><img class="center" src="http://networkop.github.io/images/network-ci-dc-full.png" title="Full demo topology" ></p>

<p>When simulating a real-life network it&rsquo;s often impossible to fit an exact replica inside a network emulator. That&rsquo;s why using <strong>mock</strong> devices is a crucial part in every simulation. The function of a mock is to approximate a set of network devices. There&rsquo;s a number of mock devices on our diagram colour-coded in purple. These devices simulate the remaining parts of the network. For example, <strong>Cloud</strong> devices may represent <abbr title=" Top-Of-the-Rack">TOR</abbr> switches, while <strong>MPLS/DMVPN</strong> devices represent remote WAN sites. Normally these devices will have some made-up configuration that best reflects real life, but not necessarily a copy-paste from an existing network device.</p>

<p>It&rsquo;s also important to pick the right amount of mock devices to strike the balance between accuracy and complexity. For example, for WAN sites it may suffice to create one site per unique combination of WAN links to make sure WAN failover works as expected.</p>

<h2>Traffic flow definition</h2>

<p>Let&rsquo;s define how we would expect the traffic to flow through our network. Let&rsquo;s assume that we should always try to use MPLS links when possible and only use DMVPN when both MPLS links are down. This translates to the following order of WAN links' precedence:</p>

<ol>
<li>Primary MPLS link</li>
<li>Standby MPLS link</li>
<li>Primary DMVPN link</li>
<li>Standby DMVPN link</li>
</ol>


<p>Based on that we can create the following traffic flows definition for network working under normal conditions.</p>

<figure class='code'><figcaption><span>/network/tests/traffic_flows.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>1 Failed None
</span><span class='line'>  From FW to MPLS-DMVPN via Primary-WAN, Primary-MPLS
</span><span class='line'>  From FW to DMVPN-ONLY via Primary-CORE-SW, Primary-DMVPN
</span><span class='line'>  From FW to MPLS-ONLY via Primary-WAN, Primary-MPLS
</span><span class='line'>  From Cloud-1 to FW Loopback0 via Primary-CORE-SW
</span><span class='line'>  From Cloud-2 to MPLS-DMVPN via Primary-WAN, Primary-MPLS
</span></code></pre></td></tr></table></div></figure>


<p>We expect all traffic to flow through active devices, even when the path may be suboptimal, like it&rsquo;s the case with traffic from Cloud-2. Similarly, we can create traffic flows definitions for different failure conditions. The complete <a href="https://github.com/networkop/network-ci/blob/master/acme-large/network/tests/traffic_flows.txt">traffic flows definition file</a> contains 2 additional failure scenarios covering the outage of the primary MPLS links and a complete outage of the primary core switch.</p>

<h2>Workflow example</h2>

<p>This is how you would approach a project like this.</p>

<ol>
<li>Get a copy of network-ci <a href="http://networkop.github.io/blog/2016/02/25/network-ci-dev-setup/">VM</a></li>
<li>Get a local copy of network-ci <a href="https://github.com/networkop/network-ci/tree/master/acme-large">tools</a></li>
<li>Copy configuration from real-life devices into the <a href="https://github.com/networkop/network-ci/tree/master/acme-large/config">config directory</a></li>
<li>Add configuration files for mock devices to the same directory</li>
<li>Review the <a href="https://github.com/networkop/network-ci/blob/master/acme-large/network/topology.py">topology definition file</a> to make sure it reflects our physical diagram</li>
<li>Review the UNL <a href="https://github.com/networkop/network-ci/blob/master/acme-large/network/unetlab.yml">configuration file</a> to make sure it points to the correct IP address assigned to your network-ci VM</li>
<li>Kick-off topology build inside UNL by running <code>./0_built_topo.py</code> script</li>
<li>Verify the traffic flows as expected with <code>2_test.py</code> script</li>
<li>Start the real-time monitoring with <code>1_monitor.py</code> script</li>
<li>Implement required changes on individual devices (all required changes can be found in <a href="https://github.com/networkop/network-ci/blob/master/acme-large/network/ospf-bgp.txt">ospf-bgp.txt</a> file)</li>
<li>Make sure that the network still behaves as before by running <code>2_test.py</code> script</li>
<li>Destroy the topology in UNL by running <code>3_destroy_topo.py</code></li>
</ol>


<h2>Continuous Integration</h2>

<p>In the <a href="http://networkop.github.io/blog/2016/03/03/network-ci-demo-small/">previous post</a> I&rsquo;ve showed how to use Jenkins to setup the CI environment for a small demo network. The same method can be applied to setup the job for our small Data Centre. It is simply a matter of changing the directory name from <strong>acme-small</strong> to <strong>acme-large</strong> in the first build step.</p>

<h2>Source code</h2>

<p>All code from this and previous posts is available on <a href="https://github.com/networkop/network-ci/tree/master/acme-large">Github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network-CI Part 2 - Small Network Demo]]></title>
    <link href="http://networkop.github.io/blog/2016/03/03/network-ci-demo-small/"/>
    <updated>2016-03-03T00:00:00-08:00</updated>
    <id>http://networkop.github.io/blog/2016/03/03/network-ci-demo-small</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll demonstrate how to use the network-ci tools to automate the build, test and upgrade of a small 4-node network topology.</p>

<!--more-->


<h2>Demo network overview</h2>

<p>The network consists of 4 nodes interconnected via point-to-point links and running EIGRP as a routing protocol.</p>

<p><img class="center" src="http://networkop.github.io/images/ci-acme-small.jpg" title="Small demo topology" ></p>

<p>To create a local development environment you can clone my <a href="https://github.com/networkop/network-ci/tree/master/acme-small">repository</a> and reset it to work with your own Github account using <code>git remote set-url origin https://github.com/USERNAME/OTHERREPOSITORY.git</code> command.<br/>
Local development environment contains the following files describing the modelled topology:</p>

<ol>
<li>Configuration files for each node under the <code>./config</code> directory</li>
<li>Network topology in <code>./network/topology.py</code> modelled as a list of pairs of interconnected devices</li>
<li>UNetLab configuration file containing the IP address and username/passwords to access the server</li>
<li>Traffic flow test definitions under <code>./network/test</code> directory</li>
</ol>


<h2>Test definitions</h2>

<p>Traffic flow test file contains an ordered set of test scenarios that will be performed automatically. The following is an example that illustrates main capabilities of our test tools:</p>

<figure class='code'><figcaption><span>./network/tests/traffic_flows.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>## Normal operations
</span><span class='line'>1 Failed None
</span><span class='line'>  From R1 to R3 via R2 or R4, R3
</span><span class='line'>  From R2 to R3 via R3
</span><span class='line'>  From R2 to R4 via R1 or R3
</span><span class='line'>
</span><span class='line'># Failed link between R1 and R2
</span><span class='line'>2 Failed R1 Gig1/1, R2 Gig0/0
</span><span class='line'>  From R1 to R2 via not R2, R3
</span><span class='line'>  From R2 to R4 via not R1, R4
</span></code></pre></td></tr></table></div></figure>


<p>Each scenario starts with a <strong>failure definition</strong>. It could be either <em>None</em>, which represents normal network conditions, or it could contain a list of interfaces that need to be failed. Following the failure definition are the actual tests. On each line we define source, destination and the path we expect the traffic to take. Path definition (everything following the &lsquo;via&rsquo; keyword) contains an ordered set of nodes and can use simple boolean operators like <strong>or</strong> or <strong>not</strong>.</p>

<p>Ping flow definition file is a lot shorter and simply contains a list of source/destination pairs to run a ping test between. All ping tests will execute concurrently and issue only 2 pings, therefore we&rsquo;ll only be able to detect connectivity loss if it lasts for more than 4 seconds.</p>

<h2>Jenkins setup</h2>

<p>In the previous post we&rsquo;ve automatically built a VM with Jenkins and UNetLab pre-installed. Before we can start using Jenkins we need to install a Github plugin, which can be done very easily from Jenkins GUI. Power up your <strong>vm-network-ci</strong> and open Jenkins home page at <code>http://VM_IP:8080</code>. From there navigate to <strong>Manage Jenkins -> Manage Plugins -> Available</strong>, search for and install the <strong>GitHub plugin</strong>.</p>

<h2>A quick Jenkins intro</h2>

<p>Inside Jenkins, <strong>a job</strong> represents a set of tasks that need to be automated for a particular project. Each job first waits for a trigger, which can be either a manual or an automatic event. When triggered, it connects to Github repository, downloads all the code to a local machine and executes a set of build steps defined in this job. A very simple workflow would looks like this:</p>

<ol>
<li>Developer commits and pushes a change to a Github repository</li>
<li>Github notifies Jenkins server by sending an HTTP POST request</li>
<li>Jenkins identifies the job that needs to be run and clones Github repo into a local directory</li>
<li>It then goes through and executes a set of build steps defined for this job</li>
<li>At the end you can optionally configure Jenkins to update the status of the build as described <a href="http://stackoverflow.com/questions/14274293/show-current-state-of-jenkins-build-on-github-repo">here</a></li>
</ol>


<h2>Using Jenkins for network testing</h2>

<ol>
<li>From Jenkins home page click on <strong>create new jobs</strong> and create a <em>Freestyle project</em> called <strong>acme-small</strong>.</li>
<li>Select the <strong>Github project</strong> option and enter a url of your Github repository (in my case its <a href="https://github.com/networkop/network-ci">https://github.com/networkop/network-ci</a>).</li>
<li>Under <strong>Source Code Management</strong> select <em>Git</em> and enter the same repository URL.</li>
<li>Under <strong>Additional Behaviours</strong> add a <em>Polling ignores commits in certain paths</em>. <br/>
Since I&rsquo;m keeping multiple subprojects in the same Github repo, I need to make sure that this job is only triggered if commit affected a particular directory.</li>
<li>Under <strong>Included Regions</strong> add <code>acme-small/.*</code> to only trigger builds for changes made to <strong>acme-small</strong> directory.</li>
<li>Optionally you can specify the build triggers to either build periodically or wait for changes to be pushed to Github.</li>
<li><p>Under <strong>Build</strong> add a new build step with the following shell commands:</p>

<pre><code class="`bash"> export UNL_IP="unl_ip_address"
 export PYTHONUNBUFFERED=1
 cd acme-small
 chmod +x 0_built_topo.py
 chmod +x 2_test.py
 chmod +x 3_destroy_topo.py
 ./0_built_topo.py
 ./2_test.py
 ./3_destroy_topo.py
</code></pre>

<p>The first two env variables setup the UNL&rsquo;s IP address of and disable IO buffering so that we can see the output produced by our scripts in real time. The remaining steps simply execute the build, test and destroy scripts in order.</p></li>
<li><p>Save the job and click on the <strong>Build Now</strong> to trigger the build manually.</p></li>
<li>In the <strong>Build History</strong> pane click on the latest build number (should be #1) and go to <em>Console Output</em>.</li>
<li>Observe how Jenkins builds, tests and destroys our demo topology</li>
</ol>


<h2>Network upgrade workflow</h2>

<p>Now imagine that a new requirements has come in to make sure that traffic from R1 to R3&rsquo;s Gig0/1 does not traverse R4 and goes via R2 instead, only falling back to R4 when R1-R2 link is down. In the following video I&rsquo;ll show how to use network-ci tools locally to implement and test this traffic engineering requirement.</p>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/GLOG9KZzP90" allowfullscreen></iframe></div>


<h2>Coming up</h2>

<p>In the next post I&rsquo;ll show how to apply the same workflow to automate the build, test and ugprade of a large 14-node topology.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network-CI Part 1 - Automatically Building a VM With UNetLab and Jenkins]]></title>
    <link href="http://networkop.github.io/blog/2016/02/25/network-ci-dev-setup/"/>
    <updated>2016-02-25T00:00:00-08:00</updated>
    <id>http://networkop.github.io/blog/2016/02/25/network-ci-dev-setup</id>
    <content type="html"><![CDATA[<p>Traditionally, the first post in the series describes how to setup a development environment. This time I&rsquo;ll do it DevOps-style. I&rsquo;ll show how to use Packer to automatically create and configure a VM with UNetLab and Jenkins pre-installed.</p>

<!--more-->


<p><img class="center" src="http://networkop.github.io/images/packer-unl-jenkins.png" title="Packer-UNL-Jenkins" ></p>

<h2>Packer intro</h2>

<p><a href="https://www.packer.io/">Packer</a> is a tool that can automatically create virtual machines for different hypervisors and cloud platforms. The goal is to produce identically configured VMs for either VirtualBox, VMWare, Amazon or Google clouds based on a single template file. If you&rsquo;re familiar with <a href="https://www.vagrantup.com/docs/">Vagrant</a>, then you can also use Packer to create custom Vagrant boxes. In our case, however, we&rsquo;re only concerned about VMWare since it&rsquo;s the only <a href="https://en.wikipedia.org/wiki/Hypervisor">type-2 hypervisor</a> that supports nested hardware virtualisation (e.g. Intel VT-x), a feature required by UNetLab to run some of the emulated images.</p>

<p>Packer builds VMs using a special template file. At the very least, this file describes how to:</p>

<ul>
<li><p>Build a VM</p></li>
<li><p>Provision and configure apps on a VM</p></li>
</ul>


<p>These two actions correspond to the <code>builders</code> and <code>provisioners</code> sections of the template file.</p>

<p>The <code>builders</code> section contains a set of instructions for a particular hypervisor or platform on how to build a VM. For example, it might contain the amount of  RAM, CPU and disk sizes, number and type of interfaces, OS boot instructions and so on.</p>

<p>The <code>provisioners</code> section contains a set of instructions to configure a VM. This section may be as simple as a list of shell scripts or may include a reference to Ansible playbook which will be executed after the VM is built.</p>

<p>You can find my Packer templates along with Ubuntu preseed and provisioner scripts in my <a href="https://github.com/networkop/packer-unl-jenkins">Gihub repository</a>. For those looking for deeper insights about how to build a packer template I can recommend an official Packer <a href="https://www.packer.io/intro/index.html">introduction docs</a>.</p>

<h2>Building a VM with Packer</h2>

<p>As I&rsquo;ve mentioned previously, I&rsquo;m using Windows as my primary development environment and VMWare Workstation as my hypervisor. Before you begin you also need to have <a href="https://www.packer.io/intro/getting-started/setup.html">Packer</a> and <a href="https://git-scm.com/download/win">git</a> installed.</p>

<figure class='code'><figcaption><span>1. Clone git repository</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='winbatch'><span class='line'>git clone https:<span class="n">//github.com/networkop/packer-unl-jenkins</span>
</span><span class='line'><span class="k">cd</span> packer-unl-jenkins
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>2. Start the build</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='winbatch'><span class='line'>packer build vmware.json
</span></code></pre></td></tr></table></div></figure>


<p>With a bit of luck, approximately 30 minutes later you should have a fully configured VM inside your VMWare Workstation waiting to be powered on. These are some of the features of this new VM:</p>

<ul>
<li>4 GB of RAM, 20GB of disk space, 2 dual-core vCPUs</li>
<li>1 Host-only and 1 NAT ethernet interfaces both using DHCP</li>
<li>Jenkins and UNetLab installed</li>
<li>Git and Python PIP packages installed</li>
<li>Username/password are <code>unl/admin</code></li>
</ul>


<p>Once powered on, you should be able to navigate to UNetLab&rsquo;s home page at <code>http://vm_ip:80</code> and Jenkins' home page and <code>http://vm_ip:8080</code>, where <code>vm_ip</code> is the IP of your new VM.</p>

<h2>IOU images</h2>

<p>Unfortunately IOU images are not publicly available so you&rsquo;re gonna have to find them yourself, which shouldn&rsquo;t be too hard. You&rsquo;ll also need to generate a license file for these images which, again, I&rsquo;m not going to discuss in this blog, but I can guarantee that you won&rsquo;t have to look farther than the 1st page of Google search to find all your answers. These are the remaining steps that you need to do:</p>

<ol>
<li>Obtain L2 and L3 IOU images</li>
<li>Generate a license file</li>
<li>Follow <a href="http://www.unetlab.com/2014/11/adding-cisco-iouiol-images/">these instructions</a> to install those images on the UNetLab server</li>
</ol>


<h2>non-DevOps way</h2>

<p>In case you&rsquo;re struggling with Packer here are the list of steps to setup a similar VM manually:</p>

<ol>
<li><a href="http://www.ubuntu.com/download/server">Download</a> your favourite Ubuntu Server image. Recommended release at the time of writing is 14.04.4.</li>
<li>Create a VM with at least 4GB of RAM, VT-x support and boot it off the Ubuntu ISO image.</li>
<li>Following instructions <a href="http://www.unetlab.com/2015/08/installing-unetlab-on-a-physical-server/">install Ubuntu and UNetLab</a>.</li>
<li>Install Jenkins as described on <a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu">their wiki website</a></li>
<li>Install additional packages like git and pip. Refer to my Packer <a href="https://github.com/networkop/packer-unl-jenkins/blob/master/scripts/packages.sh">packages script</a> for commands.</li>
</ol>


<h2>Coming up</h2>

<p>In the next post I&rsquo;ll show how to setup Jenkins to do automatic network testing and verification.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network Continuous Integration and Delivery]]></title>
    <link href="http://networkop.github.io/blog/2016/02/19/network-ci-intro/"/>
    <updated>2016-02-19T00:00:00-08:00</updated>
    <id>http://networkop.github.io/blog/2016/02/19/network-ci-intro</id>
    <content type="html"><![CDATA[<p>In this series of posts I&rsquo;ll introduce the tools I&rsquo;ve been using for continuous network development and how they can be used with automation servers like Jenkins for network continuous integration and delivery.</p>

<!--more-->


<h2>CI/CD vs ITIL</h2>

<p>How do you implement changes in your network? In today&rsquo;s world there&rsquo;s 95% chance that you have to write up an <abbr title=" Request For Change">RFC</abbr>, submit it at least a week before the planned implementation date, go through at least one <abbr title=" Change Admission Board">CAB</abbr> meeting and only then, assuming it got approved, can you implement it. But the most important question is &lsquo;how do you test&rsquo;? Do you simply content yourself with a few pings or do you make sure all main routes are in place? And how often do you get a call the next morning from a very nervous client asking you to &lsquo;please have a look at the network performance issues&rsquo;?</p>

<p>Software developers have solved most of these problems for themselves. DevOps movement has brought forth ideas of Continuous Integration and Delivery (CI/CD) to streamline the change process and &lsquo;embrace&rsquo; the change rather than protect against it. But how applicable are those ideas to the networks of today? Can we simply rip and replace our CAB meetings with a Jenkins server and live happily ever after?  As always, things are getting difficult as you move down from Layer 7.</p>

<h2>Problem #1 - How to test</h2>

<p>Ever since the dawn of networking, the only tools that engineers could use for testing were traceroutes and pings. It&rsquo;s not necessarily bad since, after all, networks are supposed to be a simple packet transports and shouldn&rsquo;t be endowed with application-layer knowledge. Note that I&rsquo;m talking about traditional or, in SDN-era terms, &lsquo;underlay&rsquo; networks. The biggest problem with network testability is not the lack of test tools but rather lack of automation. For every ping and every traceroute we had to login a device, carefully craft the command including source interface names, VRFs and other various options and then interpret the output.<br/>
I have already explored the idea of automated network testing in my previous blog posts - <a href="http://networkop.github.io/blog/2015/06/15/simple-tdd-framework/">Building Network TDD framework</a> and <a href="http://networkop.github.io/blog/2015/07/17/tdd-quickstart/">Network TDD quickstart</a>. I even got lucky enough to get invited to one of the <a href="http://blog.ipspace.net/2015/11/test-driven-network-development-with.html">greatest networking podcasts</a> hosted by Ivan Pepelnjak.</p>

<h2>Problem #2 - Where to test</h2>

<p>Another big problem is the lack of testable network software. We&rsquo;ve only had IOU, vSRX and vEOS for the past 3-4 years and even now a lot of the real-world functionality remains unvirtualizable. However having those images is a lot better than not, even though some of them tend to crash and behave unreliably from time to time.</p>

<h2>Network CI</h2>

<p>Here I&rsquo;ve come to the actual gist of my post. I want to demonstrate the tools that I&rsquo;ve built and how I use them to automate a lot of the repetitive tasks to prepare for network deployments and upgrades. This is what these tools can do:</p>

<ul>
<li>Create a replica of almost any real-world network topology inside a network emulation environment</li>
<li>Apply configuration to all built devices</li>
<li>Verify real-time connectivity between nodes</li>
<li>Verify traffic flows under various failure conditions against pre-defined set rules</li>
<li>Shutdown and delete the network topology</li>
</ul>


<p>All these steps can be done automatically without making a single click in a GUI or entering a single command in a CLI. This is a sneak peak of what to expect later in the series:</p>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/jiZs0969RWI" allowfullscreen></iframe></div>


<p>Please don&rsquo;t judge me too harshly, this is my first experience with screencasts.</p>

<h2>Coming up</h2>

<p>In the following posts I&rsquo;ll show how to:</p>

<ul>
<li><a href="http://networkop.github.io/blog/2016/02/25/network-ci-dev-setup/">Setup continuous delivery environment with Jenkins and UNetLab</a></li>
<li><a href="http://networkop.github.io/blog/2016/03/03/network-ci-demo-small/">Create test cases to enable automatic testing by Jenkins server</a></li>
<li><a href="http://networkop.github.io/blog/2016/03/03/network-ci-demo-large/">Safely replace a core routing protocol inside an Active/Standby DC</a></li>
</ul>


<p>If that sounds interesting to you - stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[REST for Network Engineers Part 3 - Advanced Operations With UnetLab]]></title>
    <link href="http://networkop.github.io/blog/2016/01/17/rest-unl-advanced/"/>
    <updated>2016-01-17T00:00:00-08:00</updated>
    <id>http://networkop.github.io/blog/2016/01/17/rest-unl-advanced</id>
    <content type="html"><![CDATA[<p>In this post we&rsquo;ll look at how to create arbitrary topologies and push configuration to Nodes in UNetlab via REST SDK. We&rsquo;ll conclude by extending our sample application to create and configure a 3-node topology and enable full connectivity between all nodes.</p>

<!--more-->


<h2>Extracting Node&rsquo;s UUID</h2>

<p>In the <a href="http://networkop.github.io/blog/2016/01/06/rest-basic-operations/">previous post</a> we have learned how to create a Node. To perform further actions on it we need to know it&rsquo;s UUID. According to HTTP specification <code>201 - Created</code> response SHOULD return a <code>Location</code> header with resource URI, which would contain resource UUID. However, UNetLab&rsquo;s implementation does not return a Location header so we need to extract that information ourselves. To do that we&rsquo;ll use the previously defined <code>.get_nodes()</code> method which returns all attributes of all configured Nodes in the following format:</p>

<p><img class="centre" src="http://networkop.github.io/images/rest-unl-get-nodes.png" title="REST SDK GET ALL NODES" ></p>

<p>The best place to extract UUID would be when Node is being created. After the <code>Create</code> request has been sent to a server we&rsquo;ll send another <code>Read</code> request and extract all attributes of a Node based on its name.</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/restunl/unetlab.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">UnlNode</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">lab</span><span class="p">,</span> <span class="n">device</span><span class="p">):</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get_node</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_get_node</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">get_nodes</span><span class="p">()</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s">&#39;data&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">get_obj_by_name</span><span class="p">(</span><span class="n">nodes</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">device</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p> To extract data from the payload we need to call <code>.json()</code> on the returned HTTP response and look for the <code>data</code> key inside that JSON object. The returned value will contain all attributes including the UUID and access URL which we&rsquo;ll use later. To help us find a Node object matching a name we&rsquo;ll use a helper function defined below:</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/restunl/helper.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_obj_by_name</span><span class="p">(</span><span class="n">objects</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">obj_id</span> <span class="ow">in</span> <span class="n">objects</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">objects</span><span class="p">[</span><span class="n">obj_id</span><span class="p">][</span><span class="s">&quot;name&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="n">name</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">objects</span><span class="p">[</span><span class="n">obj_id</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>Needless to say that we MUST have unique names for all nodes otherwise it won&rsquo;t be possible to do the matching. It&rsquo;s quite a safe assumption to make in most cases however no built-in error checking will be performed by the REST SDK to prevent you from doing it.</p>

<h2>UnlNet implementation</h2>

<p>Before we start connecting Nodes together we need to create a Network. As per the <a href="http://networkop.github.io/blog/2016/01/06/rest-basic-operations/">design</a>, UnlNet will be a class holding a pointer to the UnlLab object which created it. The structure of the class will be very similar to UnlNode.</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/restunl/unetlab.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">REST_SCHEMA</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>              <span class="o">...</span> <span class="p">,</span>
</span><span class='line'>              <span class="s">&#39;create_net&#39;</span><span class="p">:</span> <span class="s">&#39;/labs/{lab_name}/networks&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&#39;get_nets&#39;</span><span class="p">:</span> <span class="s">&#39;/labs/{lab_name}/networks&#39;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UnlLab</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_net</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UnlNet</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_nets</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">api_call</span> <span class="o">=</span> <span class="n">REST_SCHEMA</span><span class="p">[</span><span class="s">&#39;get_nets&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">api_url</span> <span class="o">=</span> <span class="n">api_call</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">api_call</span><span class="p">,</span> <span class="n">lab_name</span><span class="o">=</span><span class="n">append_unl</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">get_object</span><span class="p">(</span><span class="n">api_url</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UnlNet</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">lab</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="n">api_call</span> <span class="o">=</span> <span class="n">REST_SCHEMA</span><span class="p">[</span><span class="s">&#39;create_net&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">lab</span><span class="o">.</span><span class="n">unl</span><span class="p">,</span> <span class="n">lab</span><span class="p">,</span> <span class="n">name</span>
</span><span class='line'>        <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;bridge&#39;</span><span class="p">,</span> <span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">}</span>
</span><span class='line'>        <span class="n">api_url</span> <span class="o">=</span> <span class="n">api_call</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">api_call</span><span class="p">,</span> <span class="n">lab_name</span><span class="o">=</span><span class="n">append_unl</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">add_object</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">net</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get_net</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">net</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_get_net</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">nets</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">get_nets</span><span class="p">()</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s">&#39;data&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">get_obj_by_name</span><span class="p">(</span><span class="n">nets</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Connecting Nodes to a network</h2>

<p>Official <a href="http://www.unetlab.com/2015/09/using-unetlab-apis/">Unetlab API guide</a> is still under development and doesn&rsquo;t specify how to connect a Node to a network. If you want to find out the syntax for this or any other unspecified API call you can always try that in a Web GUI while capturing traffic with Wireshark. That is how I&rsquo;ve discovered that to connect a Node to a network we need to send an Update request with payload containing mapping between Node&rsquo;s interface ID and Network ID.</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/restunl/unetlab.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">REST_SCHEMA</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="o">...</span> <span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;connect_interface&#39;</span><span class="p">:</span> <span class="s">&#39;/labs/{lab_name}/nodes/{node_id}/interfaces&#39;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UnlNode</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">connect_interface</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">intf_name</span><span class="p">,</span> <span class="n">net</span><span class="p">):</span>
</span><span class='line'>        <span class="n">api_call</span> <span class="o">=</span> <span class="n">REST_SCHEMA</span><span class="p">[</span><span class="s">&#39;connect_interface&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">api_url</span> <span class="o">=</span> <span class="n">api_call</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">api_call</span><span class="p">,</span> <span class="n">lab_name</span><span class="o">=</span><span class="n">append_unl</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">name</span><span class="p">),</span> <span class="n">node_id</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="n">get_intf_id</span><span class="p">(</span><span class="n">intf_name</span><span class="p">):</span> <span class="n">net</span><span class="o">.</span><span class="n">id</span><span class="p">}</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">update_object</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<p>The ID of an interface &ldquo;Ethernet x/y” of an IOU device can be easily calculated based on the formula <code>id = x + (y * 16)</code> as described <a href="http://evilrouters.net/2011/01/09/creating-a-netmap-file-for-iou/">here</a>. This will be accomplished with yet another helper function:</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/restunl/helper.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_intf_id</span><span class="p">(</span><span class="n">intf_name</span><span class="p">):</span>
</span><span class='line'>    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;\d+&#39;</span><span class="p">,</span> <span class="n">intf_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="mi">16</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Connecting Nodes to each other</h2>

<p>To create multi-access topologies we would need to maintain an internal mapping between Node&rsquo;s interface and the network it&rsquo;s attached to. However, if we assume that all links are point-to-point, we can not only simplify our implementation but also enable REST client to ignore the notion of a network all together.  We&rsquo;ll simply assume that when device A connects to B our implementation will create a network called <code>A_B</code> in the background and connect both devices to it. This method will perform two separate REST calls and thus will return both responses in a tuple:</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/restunl/unetlab.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">UnlNode</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">connect_node</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">local_intf</span><span class="p">,</span> <span class="n">other_node</span><span class="p">,</span> <span class="n">other_intf</span><span class="p">):</span>
</span><span class='line'>    <span class="n">net</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">create_net</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;_&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="bp">self</span><span class="o">.</span><span class="n">device</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">other_node</span><span class="o">.</span><span class="n">device</span><span class="o">.</span><span class="n">name</span><span class="p">]))</span>
</span><span class='line'>    <span class="n">resp1</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">connect_interface</span><span class="p">(</span><span class="n">local_intf</span><span class="p">,</span> <span class="n">net</span><span class="p">)</span>
</span><span class='line'>    <span class="n">resp2</span> <span class="o">=</span> <span class="n">other_node</span><span class="o">.</span><span class="n">connect_interface</span><span class="p">(</span><span class="n">other_intf</span><span class="p">,</span> <span class="n">net</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">resp1</span><span class="p">,</span> <span class="n">resp2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assuming all links are point-to-point certainly decreases visibility of created networks and we would not be able to perform selective changes on them in the future. However it is a safe assumption to make for 99% of the networks that I&rsquo;m dealing with.</p>

<h2>Node Start, Stop and Delete</h2>

<p>These simple actions can easily be coded using TDD. I will omit the actual implementation and simply provide unit tests for readers to exercise their TDD skills again.</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/tests/test_unl.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">AdvancedUnlNodeTest</span><span class="p">(</span><span class="n">UnlTests</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">AdvancedUnlNodeTest</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">setUp</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">device_one</span> <span class="o">=</span> <span class="n">Router</span><span class="p">(</span><span class="s">&#39;R1&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">device_two</span> <span class="o">=</span> <span class="n">Router</span><span class="p">(</span><span class="s">&#39;R2&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">lab</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">create_lab</span><span class="p">(</span><span class="n">LAB_NAME</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">node_one</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">device_one</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">node_two</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">device_two</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">tearDown</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">delete_lab</span><span class="p">(</span><span class="n">LAB_NAME</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">AdvancedUnlNodeTest</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">tearDown</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_start_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">stop_all_nodes</span><span class="p">()</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">start_all_nodes</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_stop_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">start_all_nodes</span><span class="p">()</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">stop_all_nodes</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_delete_node</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">delete_node</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">node_one</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_del_all_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">del_all_nodes</span><span class="p">()</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">get_nodes</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp_2</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s">&#39;data&#39;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_lab_cleanup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">resp_1</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">stop_all_nodes</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">del_all_nodes</span><span class="p">()</span>
</span><span class='line'>        <span class="n">resp_2</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">get_nodes</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">resp_1</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp_2</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s">&#39;data&#39;</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final, <code>lab_cleanup()</code> method is simply a shortcut to <code>stop_nodes()</code> followed by <code>del_all_nodes()</code>.<br/>
As always, link to full code is available at the end of this post.</p>

<h2>Pushing configuration to Nodes</h2>

<p>At this point of time UnetLab does not support configuration import so we&rsquo;re stuck with the only access method available - telnet. To push configuration into the Node we&rsquo;re gonna have to establish a telnet session to Node&rsquo;s URI (which we&rsquo;ve extracted earlier) and write all configuration into that session.</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/restunl/unetlab.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">UnlNode</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">device</span><span class="o">.</span><span class="n">send_config</span><span class="p">(</span><span class="n">wrap_conf</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another helper function <code>wrap_conf()</code> prepends <code>enable</code> and appends <code>end</code> to make configuration suitable for pasting into the new IOU device.</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/restunl/device.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Router</span><span class="p">(</span><span class="n">Device</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">send_config</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">config</span><span class="p">):</span>
</span><span class='line'>        <span class="n">session</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">url_ip</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">url_port</span><span class="p">)</span>
</span><span class='line'>        <span class="n">send_and_wait</span><span class="p">(</span><span class="n">session</span><span class="p">,</span> <span class="s">&#39;</span><span class="se">\r\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">send_and_wait</span><span class="p">(</span><span class="n">session</span><span class="p">,</span> <span class="n">config</span><span class="p">)</span>
</span><span class='line'>        <span class="n">session</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>The biggest problem is that Nodes, when started, take some time to boot before we can access the CLI prompt. To overcome that I had to implement a dirty hack in a form of <code>send_and_wait()</code> helper function that simulates pressing the <code>Enter</code> button every 0.1 second until it sees a CLI prompt (either <code>&gt;</code> or <code>#</code>).</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/restunl/helper.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">send_and_wait</span><span class="p">(</span><span class="n">session</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
</span><span class='line'>        <span class="n">session</span><span class="o">.</span><span class="n">read_very_eager</span><span class="p">()</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>        <span class="n">session</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="k">while</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">stop_char</span> <span class="ow">in</span> <span class="n">result</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="k">for</span> <span class="n">stop_char</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&#39;&gt;&#39;</span><span class="p">,</span> <span class="s">&#39;#&#39;</span><span class="p">]):</span>
</span><span class='line'>            <span class="n">session</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\r\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">+=</span> <span class="n">session</span><span class="o">.</span><span class="n">read_very_eager</span><span class="p">()</span>
</span><span class='line'>            <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s hope that UNL team will implement config import soon so that we can get rid of this kludgy workaround.</p>

<h2>Extending our sample app</h2>

<p>At this stage we&rsquo;ve got all the code to finish our sample app. The goal is to create and configure the following 3-node topology:</p>

<p><img class="centre" src="http://networkop.github.io/images/rest-sample-app.png" title="REST SDK SAMPLE TOPO" ></p>

<p>We&rsquo;ll assume that all configs will be stored as text files under the <code>./config</code> directory and will have device names as their filename. A helper function <code>read_file</code> will read the contents of a configuration text file into a Python string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">TOPOLOGY</span> <span class="o">=</span> <span class="p">{(</span><span class="s">&#39;R1&#39;</span><span class="p">,</span> <span class="s">&#39;Ethernet0/0&#39;</span><span class="p">):</span> <span class="p">(</span><span class="s">&#39;R2&#39;</span><span class="p">,</span> <span class="s">&#39;Ethernet0/0&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="p">(</span><span class="s">&#39;R2&#39;</span><span class="p">,</span> <span class="s">&#39;Ethernet0/1&#39;</span><span class="p">):</span> <span class="p">(</span><span class="s">&#39;R3&#39;</span><span class="p">,</span> <span class="s">&#39;Ethernet0/0&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="p">(</span><span class="s">&#39;R1&#39;</span><span class="p">,</span> <span class="s">&#39;Ethernet0/1&#39;</span><span class="p">):</span> <span class="p">(</span><span class="s">&#39;R3&#39;</span><span class="p">,</span> <span class="s">&#39;Ethernet0/1&#39;</span><span class="p">)}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">app_1</span><span class="p">():</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># Creating topology in UnetLab</span>
</span><span class='line'>        <span class="n">nodes</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">a_name</span><span class="p">,</span> <span class="n">a_intf</span><span class="p">),</span> <span class="p">(</span><span class="n">b_name</span><span class="p">,</span> <span class="n">b_intf</span><span class="p">)</span> <span class="ow">in</span> <span class="n">TOPOLOGY</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>            <span class="c"># Create a mapping between a Node&#39;s name and an object</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">a_name</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class='line'>                <span class="n">nodes</span><span class="p">[</span><span class="n">a_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">lab</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="n">Router</span><span class="p">(</span><span class="n">a_name</span><span class="p">))</span>
</span><span class='line'>                <span class="k">print</span><span class="p">(</span><span class="s">&quot;*** NODE {} CREATED&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">a_name</span><span class="p">))</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">b_name</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class='line'>                <span class="n">nodes</span><span class="p">[</span><span class="n">b_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">lab</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="n">Router</span><span class="p">(</span><span class="n">b_name</span><span class="p">))</span>
</span><span class='line'>                <span class="k">print</span><span class="p">(</span><span class="s">&quot;*** NODE {} CREATED&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">b_name</span><span class="p">))</span>
</span><span class='line'>            <span class="c"># Extract Node objects using their names and connect them</span>
</span><span class='line'>            <span class="n">node_a</span> <span class="o">=</span> <span class="n">nodes</span><span class="p">[</span><span class="n">a_name</span><span class="p">]</span>
</span><span class='line'>            <span class="n">node_b</span> <span class="o">=</span> <span class="n">nodes</span><span class="p">[</span><span class="n">b_name</span><span class="p">]</span>
</span><span class='line'>            <span class="n">node_a</span><span class="o">.</span><span class="n">connect_node</span><span class="p">(</span><span class="n">a_intf</span><span class="p">,</span> <span class="n">node_b</span><span class="p">,</span> <span class="n">b_intf</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;*** NODES {0} and {1} ARE CONNECTED&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">a_name</span><span class="p">,</span> <span class="n">b_name</span><span class="p">))</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;*** TOPOLOGY IS BUILT&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">lab</span><span class="o">.</span><span class="n">start_all_nodes</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;*** NODES STARTED&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># Reading and pushing configuration</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">node_name</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class='line'>            <span class="n">conf</span> <span class="o">=</span> <span class="n">read_file</span><span class="p">(</span><span class="s">&#39;..</span><span class="se">\\</span><span class="s">config</span><span class="se">\\</span><span class="s">{}.txt&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">node_name</span><span class="p">))</span>
</span><span class='line'>            <span class="n">nodes</span><span class="p">[</span><span class="n">node_name</span><span class="p">]</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="n">conf</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;*** NODE {} CONFIGURED&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">node_name</span><span class="p">))</span>
</span><span class='line'>        <span class="nb">raw_input</span><span class="p">(</span><span class="s">&#39;PRESS ANY KEY TO STOP THE LAB&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;*** APP FAILED : {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;*** CLEANING UP THE LAB&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">lab</span><span class="o">.</span><span class="n">cleanup</span><span class="p">()</span>
</span><span class='line'>        <span class="n">unl</span><span class="o">.</span><span class="n">delete_lab</span><span class="p">(</span><span class="n">LAB_NAME</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you run this app for the first time, the lab with 3 nodes will be spun up and configured. When you get to the <code>PRESS ANY KEY</code> prompt you can login into Web GUI and navigate to lab <code>test_1</code> and validate that all configs have been pushed and devices can ping each other&rsquo;s loopbacks.</p>

<h2>Source code</h2>

<p>All code from this post can be found in my <a href="https://github.com/networkop/rest-blog-unl-client/tree/2e847b8a809a1c9c4c0962b61c1c72325a405090">public repository on Github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[REST for Network Engineers Part 2 - Basic Operations With UnetLab]]></title>
    <link href="http://networkop.github.io/blog/2016/01/06/rest-basic-operations/"/>
    <updated>2016-01-06T00:00:00-08:00</updated>
    <id>http://networkop.github.io/blog/2016/01/06/rest-basic-operations</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll show how to build REST SDK to authenticate, create labs and nodes in <a href="http://www.unetlab.com/">UnetLab</a>. I&rsquo;ll briefly cover the difference between composition and inheritance design patterns and demonstrate how to use test-driven development.</p>

<!--more-->


<h2>REST SDK Design</h2>

<p>As it is with networks, design is a very crucial part of programming. I won&rsquo;t pretend to be an expert in that field and merely present the way I&rsquo;ve built REST SDK. Fortunately, a lot of design will mimic the objects and their relationship on the server side. I&rsquo;ll slightly enhance it to improve code re-use and portability. Here are the basic objects:</p>

<ol>
<li>RestServer - implements basic application-agnostic HTTP CRUD logic</li>
<li>UnlServer - an extension of a RestServer with specific authentication method (cookie-based) and several additional methods</li>
<li>Device - an instance of a network device with specific attributes like type, image name, number of CPUs</li>
<li>UnlLab - a lab instance existing inside a UnlServer</li>
<li>UnlNode - a node instance existing inside a UnlLab</li>
<li>UnlNet - a network instance also existing inside a UnlLab object</li>
</ol>


<p>All these objects and their relationships are depicted on the following simplified <abbr title="Unified Modeling Language">UML</abbr> diagram. If you&rsquo;re interested in what different connections mean you can read <a href="http://www.codeproject.com/Articles/618/OOP-and-UML">this guide</a>.</p>

<p><img class="centre" src="http://networkop.github.io/images/rest-oop-design.png" title="REST SDK UML Diagram" ></p>

<p>Here I&rsquo;ve used inheritance to <em>extend</em> RestServer functionality to make a UnlServer. This makes sense because UnlServer object will re-use a lot of the methods from the RestServer. I could have combined them in a single object but I&rsquo;ve decided to split the application-agnostic bit into a separate component to allow it to be re-used by other RESTful clients in the future.</p>

<p>The other objects are aggregated and interact through code composition, where Lab holds a pointer to the UnlServer where it was created, Nodes and Nets point to the Lab in which they live. Composition creates loose coupling between objects, while still allowing method delegation and code re-use.</p>

<p>For additional information about Composition vs Inheritance you can go <a href="http://learnpythonthehardway.org/book/ex44.html">here</a>, <a href="http://lgiordani.com/blog/2014/08/20/python-3-oop-part-3-delegation-composition-and-inheritance/">here</a> or <a href="http://python-textbok.readthedocs.org/en/latest/Object_Oriented_Programming.html#avoiding-inheritance">here</a>.</p>

<h2>REST SDK Implementation</h2>

<blockquote><p>Throughout this post I&rsquo;ll be omitting a lot of the non-important code. For full working code refer to the link at the end of this post.</p></blockquote>

<h3>RestServer implementation</h3>

<p>When RestServer object is created, <code>__init__()</code> function takes the server IP address and constructs a <code>base_url</code>, a common prefix for all API calls. The 4 CRUD actions are encoded into names of the methods implementing them, for example to send an Update one would need to call <code>.update_object()</code>. This convention will make the implementation of UnlServer a lot more readable. Each of the 4 CRUD methods call <code>_send_request()</code> with correct HTTP verb preset (the leading underscore means that this method is private and should only be called from within the RestServer class).</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/restunl/server.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">RestServer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">address</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">cookies</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">base_url</span> <span class="o">=</span> <span class="s">&#39;/&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&#39;http:/&#39;</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="s">&#39;api&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_send_request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="n">url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">base_url</span> <span class="o">+</span> <span class="n">path</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span>  <span class="n">json</span><span class="o">=</span><span class="n">data</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">cookies</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">requests</span><span class="o">.</span><span class="n">exceptions</span><span class="o">.</span><span class="n">RequestException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&#39;*** Error calling </span><span class="si">%s</span><span class="s">: </span><span class="si">%s</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">response</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_object</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">api_call</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_send_request</span><span class="p">(</span><span class="s">&#39;GET&#39;</span><span class="p">,</span> <span class="n">api_call</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_object</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">api_call</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_send_request</span><span class="p">(</span><span class="s">&#39;POST&#39;</span><span class="p">,</span> <span class="n">api_call</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">update_object</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">api_call</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_send_request</span><span class="p">(</span><span class="s">&#39;PUT&#39;</span><span class="p">,</span> <span class="n">api_call</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">del_object</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">api_call</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_send_request</span><span class="p">(</span><span class="s">&#39;DELETE&#39;</span><span class="p">,</span> <span class="n">api_call</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">set_cookies</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cookie</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">cookies</span> <span class="o">=</span> <span class="n">cookie</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this stage RestServer does very simple exception and no HTTP response error handling. I&rsquo;ll show how to extend it to do authentication error handling in the future posts.</p>

<h3>UnlServer implementation</h3>

<p>At the very top of the <code>unetlab.py</code> file we have a <code>REST_SCHEMA</code> global variable providing mapping between actions and their respective <a href="http://www.unetlab.com/2015/09/using-unetlab-apis/">API calls</a>. This improves code readability (at least to me) and makes future upgrades to API easier to implement.<br/>
UnlServer class is extending the functionality of a RestServer by implementing UNetLab-specific methods. For example, <code>login()</code> sends username and password using the <code>add_object()</code> method of the parent class and sets the cookies extracted from the response to allow all subsequent methods to be authenticated.</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/restunl/unetlab.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">REST_SCHEMA</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;login&#39;</span><span class="p">:</span> <span class="s">&#39;/auth/login&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;logout&#39;</span><span class="p">:</span> <span class="s">&#39;/auth/logout&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;/status&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;list_templates&#39;</span><span class="p">:</span> <span class="s">&#39;/list/templates/&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UnlServer</span><span class="p">(</span><span class="n">RestServer</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">address</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">UnlServer</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">address</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">pwd</span><span class="p">):</span>
</span><span class='line'>        <span class="n">api_call</span> <span class="o">=</span> <span class="n">REST_SCHEMA</span><span class="p">[</span><span class="s">&#39;login&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="n">user</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;password&quot;</span><span class="p">:</span> <span class="n">pwd</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">add_object</span><span class="p">(</span><span class="n">api_call</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">set_cookies</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">cookies</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">logout</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">api_call</span> <span class="o">=</span> <span class="n">REST_SCHEMA</span><span class="p">[</span><span class="s">&#39;logout&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_object</span><span class="p">(</span><span class="n">api_call</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_status</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">api_call</span> <span class="o">=</span> <span class="n">REST_SCHEMA</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_object</span><span class="p">(</span><span class="n">api_call</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_templates</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">api_call</span> <span class="o">=</span> <span class="n">REST_SCHEMA</span><span class="p">[</span><span class="s">&#39;list_templates&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_object</span><span class="p">(</span><span class="n">api_call</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see all methods follow the same pattern:</p>

<ol>
<li>Extract an API url from <code>REST_SCHEMA</code> global variable</li>
<li>Send a request using one of the 4 CRUD methods of the parent RestServer class</li>
<li>Return the response</li>
</ol>


<p>Now let&rsquo;s see how we can use TDD approach to build out the rest of the code.</p>

<h2>Test-driven development</h2>

<p>The easiest way to test RESTful application is by observing the status code of the returned HTTP response. If it is 200 or 201 then it can be considered successful. The biggest challenge is to make sure each test case is independent from one another. One option is to include all the code required by a test case inside the function that implements it. This, however, may lead to long and unwieldy spaghetti-code and breaks the <abbr title="Do Not Repeat Yourself">DRY</abbr> principle.<br/>
To help avoid that, TDD frameworks often have <code>fixtures</code> - functions that are run before and after every test case, designed to setup and cleanup the test environment. In our case we can use fixtures to login before each test case is run and logoff after it&rsquo;s finished. Let&rsquo;s see how we can use Python&rsquo;s built-in <a href="https://docs.python.org/2/library/unittest.html">unittest</a> framework to drive the REST SDK development process.<br/>
First let&rsquo;s define our base class <code>UnlTests</code> who&rsquo;s sole purpose will be to implement authentication fixtures. All the test cases will go into child classes that can either reuse and extend these fixtures. This is how test cases for the already existing code look like:</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/tests/test_unl.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">UnlTests</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">unl</span> <span class="o">=</span> <span class="n">UnlServer</span><span class="p">(</span><span class="n">UNETLAB_ADDRESS</span><span class="p">)</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="n">USERNAME</span><span class="p">,</span> <span class="n">PASSWORD</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">tearDown</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">logout</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BasicUnlTests</span><span class="p">(</span><span class="n">UnlTests</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_status</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">get_status</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_templates</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">get_templates</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point if you add all the necessary import statements and populate global variables with correct IP addresses and credentials all tests should pass. Now let&rsquo;s add another test case to retrieve <a href="http://www.unetlab.com/2015/09/using-unetlab-apis/#toc2">user information</a> from UNL:</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/tests/test_unl.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">BasicUnlTests</span><span class="p">(</span><span class="n">UnlTests</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_user_info</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">get_user_info</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rerun the tests and watch the last one fail saying <code>'UnlServer' object has no attribute 'get_user_info'</code>. Now let&rsquo;s go back to our UNL SDK code and add that attribute:</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/restunl/unetlab.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">REST_SCHEMA</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">...</span> <span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;get_user_info&#39;</span><span class="p">:</span> <span class="s">&#39;/auth&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UnetLab</span><span class="p">(</span><span class="n">RestServer</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_user_info</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">api_call</span> <span class="o">=</span> <span class="n">REST_SCHEMA</span><span class="p">[</span><span class="s">&#39;get_user_info&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_object</span><span class="p">(</span><span class="n">api_call</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rerun the <code>test_unl.py</code> now and watch all tests succeed again. The same iterative approach can be used to add any number of new methods at the same time making sure none of the existing functionality is affected.<br/>
Note that these are very simple tests and they only verify the response code and not its contents. The better approach would be to look inside the payload and verify, for example, that username is <code>admin</code>.</p>

<h3>UnlLab and UnlNode implementation</h3>

<p>Now let&rsquo;s revert back to normal coding style for a second and create classes for Labs and Nodes. As per the design, these should be separate objects but they should contain a pointer to the context in which they exist. Therefore, it makes sense to instantiate a Lab inside a UnlServer, a Node inside a Lab and pass in the <code>self</code> (UnlServer or Lab) as an argument. For example, here is how a lab will be created:</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/restunl/unetlab.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">REST_SCHEMA</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">...</span> <span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;create_lab&#39;</span><span class="p">:</span> <span class="s">&#39;/labs&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UnlServer</span><span class="p">(</span><span class="n">RestServer</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_lab</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UnlLab</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UnlLab</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">unl</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="n">api_call</span> <span class="o">=</span> <span class="n">REST_SCHEMA</span><span class="p">[</span><span class="s">&#39;create_lab&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>           <span class="s">&quot;path&quot;</span><span class="p">:</span> <span class="s">&quot;/&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>
</span><span class='line'>           <span class="s">&quot;version&quot;</span><span class="p">:</span> <span class="s">&quot;1&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">unl</span> <span class="o">=</span> <span class="n">unl</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">add_object</span><span class="p">(</span><span class="n">api_call</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So to create a Lab we need to issue a <code>.create_lab()</code> call on UnlServer object and give it a labname. That function will return a new Lab object with the following attributes preset:</p>

<ul>
<li>Lab name - <code>self.name</code></li>
<li>UnlServer that created it - <code>self.unl</code></li>
<li>HTTP response returned by the server after the Create CRUD action - <code>self.resp</code></li>
</ul>


<p>The latter can be used to check if the creation was successful (and potentially throw an error if it wasn&rsquo;t). The structure of the payload can be found in <a href="http://www.unetlab.com/2015/09/using-unetlab-apis/#toc30">API docs</a>.</p>

<p>Nodes will be created in a similar way with a little exception. Apart from the name, Node also needs to know about the particulars of the device it will represent (like device type, image name etc.). That&rsquo;s where Device class comes in. The implementation details are very easy and can be found on <a href="https://github.com/networkop/rest-blog-unl-client/blob/c72f7bdc11427ac5efe9ec18401f0d63c57221ba/restunl/device.py">Github</a> so I won&rsquo;t provide them here. The only function of a Device at this stage is to create a dictionary that can be used as a payload in <code>create_node</code> <a href="http://www.unetlab.com/2015/09/using-unetlab-apis/#toc34">API request</a>.</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/restunl/unetlab.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">REST_SCHEMA</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">...</span> <span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;create_node&#39;</span><span class="p">:</span> <span class="s">&#39;/labs/{lab_name}/nodes&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UnlLab</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_node</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">device</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UnlNode</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">device</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UnlNode</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">lab</span><span class="p">,</span> <span class="n">device</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">unl</span> <span class="o">=</span> <span class="n">lab</span><span class="o">.</span><span class="n">unl</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">lab</span> <span class="o">=</span> <span class="n">lab</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">device</span> <span class="o">=</span> <span class="n">device</span>
</span><span class='line'>        <span class="n">api_call</span> <span class="o">=</span> <span class="n">REST_SCHEMA</span><span class="p">[</span><span class="s">&#39;create_node&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">api_url</span> <span class="o">=</span> <span class="n">api_call</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">api_call</span><span class="p">,</span> <span class="n">lab_name</span><span class="o">=</span><span class="n">append_unl</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>        <span class="n">payload</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">device</span><span class="o">.</span><span class="n">to_json</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">add_object</span><span class="p">(</span><span class="n">api_url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take a quick look at how the <code>api_url</code> is created. We&rsquo;re using <code>.format()</code> method (built-into <code>string</code> module) to substitute a named variable <code>{format}</code> with the actual name of the lab (<code>self.lab.name</code>). That labname gets appended with an extension by a helper function <code>append_unl</code>. That helper function, along with the others we&rsquo;ll define in the future, can also be found on <a href="https://github.com/networkop/rest-blog-unl-client/blob/c72f7bdc11427ac5efe9ec18401f0d63c57221ba/restunl/helper.py">Github</a>.</p>

<h2>Back to TDD</h2>

<p>Let&rsquo;s use TDD again to add the last two actions we&rsquo;ll cover in this post.</p>

<ul>
<li>Get list of all Nodes</li>
<li>Delete a lab</li>
</ul>


<figure class='code'><figcaption><span>/rest-blog-unl-client/tests/test_unl.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">BasicUnlLabTest</span><span class="p">(</span><span class="n">UnlTests</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_create_lab</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">delete_lab</span><span class="p">(</span><span class="n">LAB_NAME</span><span class="p">)</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">create_lab</span><span class="p">(</span><span class="n">LAB_NAME</span><span class="p">)</span><span class="o">.</span><span class="n">resp</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">delete_lab</span><span class="p">(</span><span class="n">LAB_NAME</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_delete_lab</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">create_lab</span><span class="p">(</span><span class="n">LAB_NAME</span><span class="p">)</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">delete_lab</span><span class="p">(</span><span class="n">LAB_NAME</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_get_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">lab</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">create_lab</span><span class="p">(</span><span class="n">LAB_NAME</span><span class="p">)</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="n">lab</span><span class="o">.</span><span class="n">get_nodes</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">unl</span><span class="o">.</span><span class="n">delete_lab</span><span class="p">(</span><span class="n">LAB_NAME</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a challenge, try implementing the SDK logic for the last two failing methods yourself using <a href="http://www.unetlab.com/2015/09/using-unetlab-apis/">UNL API</a> as a reference. You can always refer the the link at the end of the post if you run into any problems.</p>

<h2>Simple App</h2>

<p>So far we&rsquo;ve created and deleted objects with REST API but haven&rsquo;t seen the actual result. Let&rsquo;s start writing an app that we&rsquo;ll continue to expand in the next post. In this post we&rsquo;ll simply login and create a lab containing a single node.</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/samples/app-1.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">restunl.unetlab</span> <span class="kn">import</span> <span class="n">UnlServer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">restunl.device</span> <span class="kn">import</span> <span class="n">Router</span>
</span><span class='line'>
</span><span class='line'><span class="n">LAB_NAME</span> <span class="o">=</span> <span class="s">&#39;test_1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">app_1</span><span class="p">():</span>
</span><span class='line'>    <span class="n">unl</span> <span class="o">=</span> <span class="n">UnlServer</span><span class="p">(</span><span class="s">&#39;192.168.247.20&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">unl</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="s">&#39;admin&#39;</span><span class="p">,</span> <span class="s">&#39;unl&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="s">&quot;*** CONNECTED TO UNL&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lab</span> <span class="o">=</span> <span class="n">unl</span><span class="o">.</span><span class="n">create_lab</span><span class="p">(</span><span class="n">LAB_NAME</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="s">&quot;*** CREATED LAB&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">node_1</span> <span class="o">=</span> <span class="n">lab</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="n">Router</span><span class="p">(</span><span class="s">&#39;R1&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="s">&quot;*** CREATED NODE&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app_1</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run this once, then login the UNL web GUI and navigate to <code>test_1</code> lab. Examine how node <strong>R1</strong> is configured and compare it to the defaults set in a <a href="https://github.com/networkop/rest-blog-unl-client/blob/c72f7bdc11427ac5efe9ec18401f0d63c57221ba/restunl/device.py">Device module</a>.</p>

<h2>Source code</h2>

<p>All code from this post can be found in my <a href="https://github.com/networkop/rest-blog-unl-client/tree/c72f7bdc11427ac5efe9ec18401f0d63c57221ba">public repository on Github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[REST for Network Engineers Part 1 - Development Environment Setup]]></title>
    <link href="http://networkop.github.io/blog/2016/01/03/dev-env-setup-rest/"/>
    <updated>2016-01-03T00:00:00-08:00</updated>
    <id>http://networkop.github.io/blog/2016/01/03/dev-env-setup-rest</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll show how to setup environment for <a href="http://www.unetlab.com/">UnetLab</a> REST SDK development on Windows. I&rsquo;ll be running UNL inside a VM and using PyCharm as Python IDE on the host OS.</p>

<!--more-->


<h2>UnetLab Installation</h2>

<p>Since UNL is a separate project with its own evolving documentation I won&rsquo;t try to reproduce it in my blog and I&rsquo;ll simply refer all my readers to <a href="http://www.unetlab.com/download/index.html">UNL download page</a>, <a href="http://www.unetlab.com/documentation/index.html">UNL installation instructions</a> and <a href="http://www.unetlab.com/2014/11/first-unetlab-boot-configuration/">UNL first boot configuration</a>.<br/>
At the time of writing UNL is distributed as an image packaged in Open Virtualization Format. I&rsquo;m using VMWare Workstation as a type-2 hypervisor to import and run this image. Check with the <a href="http://www.unetlab.com/documentation/index.html">UNL how-to page</a> for the list of currently supported hypervisors.<br/>
I&rsquo;ll be using Cisco IOU as a network device emulator in my topologies. Similarly, you can find IOU installation instructions on <a href="http://www.unetlab.com/2014/11/adding-cisco-iouiol-images/">UNL website</a>. The rest of this post assumes you&rsquo;ve got UNL up and running and you can successfully create, start and connect to an IOU device by navigating through native GUI interface.</p>

<h2>Installing Python and Dependencies</h2>

<p>For development purposes I&rsquo;ll be using <a href="https://www.python.org/downloads/release/python-2711/">Python 2.7</a>. You&rsquo;ll need to install a package management system <a href="https://pip.pypa.io/en/latest/installing/">pip</a> to gain access to <a href="http://docs.python-requests.org/en/latest/user/install/">requests</a> library that we&rsquo;ll be using to talk HTTP to our REST server. To install <strong>requests</strong> or any other package using <strong>pip</strong> on a Windows machine, you can use the following command:</p>

<figure class='code'><figcaption><span>Installing Python HTTP library</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="n">python</span> <span class="n">-m</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">requests</span>
</span></code></pre></td></tr></table></div></figure>


<h2>PyCharm and Github integration</h2>

<p>There&rsquo;s a plethora of <abbr title="Intergrated Development Environment">IDE</abbr>s <a href="https://wiki.python.org/moin/IntegratedDevelopmentEnvironments">available for Python</a>. My personal choice is <a href="https://www.jetbrains.com/pycharm/">PyCharm</a> - an open-source IDE with built-in debugger, syntax checker, code completion and GIT integration. Here is how you setup PyCharm to work with Github:</p>

<ol>
<li><strong>Create</strong> a new repository on <a href="https://github.com">Github</a>.</li>
<li>In PyCharm navigate to <code>VCS -&gt; Checkout from Version Control -&gt; Github</code>, paste in the link to a newly created repository and click <code>Clone</code>. This will <strong>create a clone</strong> of an empty code repository on your local machine. From now on you&rsquo;ll see two VCS buttons in PyCharm toolbar to pull and push code to Github.</li>
<li><strong>Add</strong> newly created files and directories to git by right-clicking on them and selecting <code>Git -&gt; Add</code></li>
<li>At the end of your work <strong>push</strong> the code to Github by clicking the green VCS button, write your comment in <code>Commit message</code> window, enter your Github username in <code>Author</code> field and select <code>Commit and Push</code>.</li>
<li>To get the latest version of code from Github click the blue VCS button to <strong>pull</strong> changes to local directory.</li>
</ol>


<p>Just remember that your Github repository is your source of truth and you need to push changes to it every time you finish work and pull code from it every time you restart it. It makes sense even if you work alone since it creates a good habit which may come very useful in the future.  <br/>
For additional information about git workflow and working with Github you can check out (no pun intended) <a href="https://help.github.com/categories/bootcamp/">Github help</a> and <a href="https://guides.github.com/">Github guides</a>.</p>

<h2>Project Skeleton</h2>

<p>Now that we&rsquo;ve fully integrated with Github we can setup our basic directory structure. In project Navigation Bar under the project&rsquo;s main directory create 3 subdirectories:</p>

<ul>
<li><code>restunl</code> - to store all code implementing REST SDK logic</li>
<li><code>samples</code> - to store sample applications</li>
<li><code>tests</code> - to store test cases for REST SDK</li>
</ul>


<p>Next we need to tell git which files we DON&rsquo;T want to track. To do that add filename patterns to <code>.gitignore</code> file and put this file into every directory. Rule of thumb is to only track your code and not your auxiliary files like compiled python code (.pyc), PyCharm settings (.idea) or local git files (.git).</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.idea
</span><span class='line'>.git
</span><span class='line'>*.pyc
</span></code></pre></td></tr></table></div></figure>


<p>Finally, in order to be able to import code between different directories within the project, we need to add an empty <code>__init__.py</code> file to each non-root directory which tells Python to treat that directory as <a href="https://docs.python.org/2/tutorial/modules.html#packages">a package</a>. The final version of skeleton will look like this:</p>

<p><img class="centre" src="http://networkop.github.io/images/restunl-skeleton.png" title="Project Skeleton" ></p>

<h2>Before you REST</h2>

<p>Here are a few things you need to know about the REST server before you start working with it:</p>

<ol>
<li>IP address and Port - the same IP address you use to access UNL from your web browser (in my case it&rsquo;s 192.168.247.20:80)</li>
<li>Username and password for authentication - default UNL credentials (admin/unl)</li>
<li>REST API documentation - in our case it&rsquo;ll be <a href="http://www.unetlab.com/2015/09/using-unetlab-apis/">UnetLab API documentation</a></li>
</ol>


<h2>Using REST for the first time</h2>

<p>Let&rsquo;s try to query the status of our UnetLab server. According <a href="http://www.unetlab.com/2015/09/using-unetlab-apis/">UNL documentation</a> the correct request should look like this:</p>

<figure class='code'><figcaption><span>UNL status API call</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -s -c /tmp/cookie -b /tmp/cookie -X GET -H <span class="s1">&#39;Content-type: application/json&#39;</span> http://127.0.0.1/api/status
</span></code></pre></td></tr></table></div></figure>


<p>Take note of the HTTP method (GET) and URL (<a href="http://ip_address/api/status">http://ip_address/api/status</a>), we&rsquo;ll use these values in our test program. Disregard the cookies and Content-type headers for now, we&rsquo;ll get back to them in the future posts. In our project&rsquo;s root directory create a <code>test.py</code> file with the following code:</p>

<figure class='code'><figcaption><span>/rest-blog-unl-client/test.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s">&#39;http://192.168.247.20/api/status&#39;</span>
</span><span class='line'><span class="n">method</span> <span class="o">=</span> <span class="s">&#39;GET&#39;</span>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span><span class="p">[</span><span class="s">&#39;code&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code calls <code>.request</code> method of requests library and passes in an HTTP method type and the URL. The value returned by this call would be an HTTP response. Since payload is encoded as JSON we need to parse the content of the HTTP response (<code>response.content</code>) by calling a <code>.loads</code> method of json library. Once parsed, we can work with any part of JSON payload same way we would with a Python dictionary. If you&rsquo;ve done everything right, the result of the last print statement should be <code>200</code>. Feel free to experiment and print, for example, the current version of UNL. Refer to <a href="http://www.unetlab.com/2015/09/using-unetlab-apis/">API documentation</a> for the exact structure of the payload.</p>

<h2>Conclusion</h2>

<p>Now that we&rsquo;ve setup our development environment we&rsquo;ll move on to the actual REST SDK development in the next post. Don&rsquo;t forget to add all your newly created files and directories to git and push them to Github.</p>

<p>All code from this post can be found in my <a href="https://github.com/networkop/rest-blog-unl-client/tree/63d8d13e48e61e896185eb7afee3759c1f2cd5a9">public repository on Github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[REST API for Network Engineers]]></title>
    <link href="http://networkop.github.io/blog/2016/01/01/rest-for-neteng/"/>
    <updated>2016-01-01T00:00:00-08:00</updated>
    <id>http://networkop.github.io/blog/2016/01/01/rest-for-neteng</id>
    <content type="html"><![CDATA[<p>This is the first, introductory, post in a series dedicated to REST APIs for Network Engineers. In this post we&rsquo;ll learn what REST API is, what are the most common tools and ways to consume it. Later in the series I&rsquo;ll show how to build a REST client to control <a href="http://www.unetlab.com/">UnetLab</a>, a very popular network emulation environment.</p>

<!--more-->


<h2>Management interface evolution</h2>

<p>Since the early dawn of networking, devices have been configured through <abbr title="Virtual Terminal User Interface">VTY</abbr>s. The transport has evolved from telnet to ssh but the underlying rule still maintained that network is configured manually, device-by-device by a human administrator. It&rsquo;s obvious that this approach does not scale and is prone to human error, however it still remains the most prevalent method of network device configuration. <br/>
The first attempt to tackle these issues has been made in 1988 with the introduction of SNMP. The basic idea was to monitor and manage network devices using a strictly-defined data structures called <abbr title="Management Information Base">MIB</abbr>s. Unfortunately, due to several architectural issues and poor vendor implementation, SNMP has ended up being used mainly for basic monitoring tasks.<br/>
The idea of programmatic management of network devices later resulted in the creation of NETCONF protocol. Despite being almost 10 years old, this protocol is still not widely used due to limited vendor support, however things may improve as the <abbr title="Yet Another Next Generation">YANG</abbr>-based network configuration gains greater adoption.<br/>
Finally, with the advent of SDN, REST has become a new de-facto standard for network provisioning. It is supported by most of the latest products of all the major vendors. Let&rsquo;s take a closer look at what REST is and how it works.</p>

<h2>REpresentational State Transfer overview</h2>

<p>Technically speaking, REST is not a protocol but a <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">software architectural pattern</a>. To put it in simple words, it describes <strong>a way</strong> to exchange information rather than the structure of that information. Think of it as another transport (like telnet or ssh for VTY) for payloads of any format. Most commonly payload will get encoded as <abbr title="JavaScript Object Notation">JSON</abbr>, however the structure of JSON is not defined and is different for each application. This rather <em>weak</em> definition opens up huge opportunities for potential use cases:</p>

<ol>
<li><p>The most basic use case is a Web application with client retrieving and updating information on a server. A good example in networking world would be the native interfaces of Cisco ACI or VMWare NSX. Each time you create an object (a network or a tenant) in a Web GUI, your client sends a request to server&rsquo;s REST interface.</p></li>
<li><p>The more advanced use case is for communication between distributed software components over a network environment. This is how all management and control plane communications are designed inside OpenStack. For example, every time a new VM is created, <abbr title="Compute controller">Nova</abbr> sends a request to <abbr title="Network controller">Neutron</abbr>&rsquo;s REST API interface to allocate an IP address and a port for that VM.</p></li>
</ol>


<h2>REST under the hood</h2>

<p>REST is an API that allows clients to perform read/write operations on data stored on the server. REST uses HTTP to perform a set of actions commonly known as <strong>CRUD</strong>:</p>

<ul>
<li>Create</li>
<li>Read</li>
<li>Update</li>
<li>Delete</li>
</ul>


<p>Assuming we want to manipulate a &lsquo;device&rsquo; object on a server we can send an <code>HTTP GET</code> request to <code>/api/devices</code> and get a response with a payload containing a full list of known devices.<br/>
If we want to add a new device, we need to construct a payload with device attributes (e.g. IP address, Hostname) and send it attached to an <code>HTTP POST</code> request.<br/>
To update a device we need to send the full updated payload with <code>HTTP PUT</code> method.</p>

<p><img class="centre" src="http://networkop.github.io/images/rest-crud.png" title="Basic REST actions" ></p>

<p>Note that both Update and Delete API calls refer to a specific number in url <code>/api/devices/{ID}</code>. That is a <abbr title="Universally Unique IDentifier">UUID</abbr> that server assigns to every new object and is returned in <code>Location</code> header of <code>201 Created</code> message sent in response to Create request.</p>

<h2>REST API Constraints</h2>

<p>For API to be considered <strong>RESTful</strong> it needs comply with a number of <a href="http://www.restapitutorial.com/lessons/whatisrest.html">formal constraints</a>. One of the most important constraint of all is the stateless nature of the interface. That means that no cookie or session information should be stored on the server, and every request is treated independently from every other request. The implication here is that all state needs to be maintained on the client and information needs to be cacheable in order to improve interface responsiveness.</p>

<p>It&rsquo;s worth noting that an API can still be considered RESTful even if a server <em>does</em> store a session cookie, however all requests must still be treated independently. The last point means there&rsquo;s no <em>configuration modes</em> like we&rsquo;ve seen in traditional CLIs where all commands issued in &ldquo;interface configuration mode&rdquo; will be applied to that specific interface. With RESTful API each request from a client must reference a full path to an object including its UUID within the system.</p>

<h2>Using REST</h2>

<h3>cURL</h3>

<p>cURL is a light-weight Linux command-line tool for transferring data. It&rsquo;s very simple to get started and very frequently used to make HTTP requests. For example, this is how you would issue a Read request to get a list of devices configured on an imaginary SDN controller:</p>

<figure class='code'><figcaption><span>Get all devices using cURL</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -X GET http://sdn-controller.org:8181/api/devices
</span></code></pre></td></tr></table></div></figure>


<p>Obviously this tool is very good for fast prototyping and troubleshooting but becomes too cumbersome for anything involving more than a few commands.</p>

<h3>Browser plugins</h3>

<p>There&rsquo;s plenty of GUI-based clients that can be added-on to most popular browsers. <a href="https://www.getpostman.com/">Postman</a> and <a href="https://addons.mozilla.org/en-us/firefox/addon/restclient/">RESTClient</a> are amongst the most popular ones. In addition to basic functionality, these plugins allow you to store and issue sequence of requests which can be very handy for live demonstrations. Unfortunately that&rsquo;s where most of the people stop learning about REST API and assume this is the intended way to interact with a server.</p>

<h3><abbr title="Software Development Kit">SDK</abbr></h3>

<p>SDK is a collection of tools and libraries that allow users to build a full-blown applications with complex internal logic. Instead of caring about the exact syntax of API calls, SDK libraries provide a simple programming interface. For example, this is how you would run the same command we did earlier with cURL:</p>

<figure class='code'><figcaption><span>Get all devices using SDK</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">controller</span> <span class="o">=</span> <span class="n">sdk</span><span class="o">.</span><span class="n">Controller</span><span class="p">(</span><span class="s">&#39;sdn-controller.org&#39;</span><span class="p">,</span> <span class="mi">8181</span><span class="p">)</span>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="n">get_devices</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We first create an instance of a controller with specific hostname and port number and then issue a <code>.get_devices()</code> call on it to obtain the list of all known devices. SDK library will do all the dirty work constructing HTTP request in the background and return the parsed information from HTTP response. We can then use that information to perform some complex logic, like start only Router devices (but not switches and firewalls):</p>

<figure class='code'><figcaption><span>Start all Routers using SDK</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">routers_started</span> <span class="o">=</span> <span class="p">[</span><span class="n">device</span><span class="o">.</span><span class="n">start</span><span class="p">()</span> <span class="k">for</span> <span class="n">device</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">get_payload</span><span class="p">()</span> <span class="k">if</span> <span class="n">device</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s">&#39;Router&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we can use all capabilities of a programming language to write a succinct and powerful code, something that would be extremely difficult to do with cURL or Postman. That&rsquo;s why the focus of this series of posts will be on the SDK, how to build one from scratch and how to use it.</p>

<h2>UNetLab REST SDK</h2>

<p>In the upcoming posts I&rsquo;ll show how to develop a REST SDK to control UnetLab. My final goal would be to be able to create and fully configure an arbitrary network topology. The whole series will be broken up into several posts going over:</p>

<ol>
<li><a href="http://networkop.github.io/blog/2016/01/03/dev-env-setup-rest/">UnetLab SDK development environment setup</a>.
I&rsquo;ll show how to setup PyCharm to work with UNL running in a hypervisor on a Windows machine.</li>
<li><a href="http://networkop.github.io/blog/2016/01/06/rest-basic-operations/">First steps with REST API for UNetLab</a>.
In this post I&rsquo;ll show how to work with HTTP and perform basic operations like login/logoff and object creation in UNL.</li>
<li><a href="http://networkop.github.io/blog/2016/01/17/rest-unl-advanced/">Advanced actions with UNetLab SDK</a>.
The final post will demonstrate how to push configuration to devices inside UNL. To wrap up I&rsquo;ll write a sample app to spin up and provision a three-node topology without making a single GUI click.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating the Build of FlexVPN Network]]></title>
    <link href="http://networkop.github.io/blog/2015/11/13/automating-flexvpn-config/"/>
    <updated>2015-11-13T00:00:00-08:00</updated>
    <id>http://networkop.github.io/blog/2015/11/13/automating-flexvpn-config</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll show how to automatically build configuration files for Hubs and Spokes in FlexVPN network topology. I will also introduce two concepts that are frequently used in software development world - <abbr title="Do Not Repeat Yourself">DRY</abbr> and &ldquo;Convention over Configuration&rdquo;. This post is a precursor to the upcoming FlexVPN configuration post on <a href="http://packetpushers.com">Packetpushers</a>.</p>

<!--more-->


<h2>FlexVPN network overview</h2>

<p>FlexVPN topology will consist of two FlexVPN &ldquo;clouds&rdquo;. Each cloud has a Hub router and multiple Spokes. Each Spoke is connected to each of the two Hubs thereby participating in both FlexVPN clouds. The two Hubs are interconnected by a direct site-to-site FlexVPN tunnel. To provide additional redundancy one Hub (HUB-1) and one Spoke (SPOKE-1) will have dual WAN links.</p>

<p><img class="centre" src="http://networkop.github.io/images/flexvpn-topo.png" title="FlexVPN topology" ></p>

<h2>Assumptions</h2>

<p>All FlexVPN devices will be using PKI-based authentication. However, in this post I will not cover the setup of PKI infrastructure and simply assume that all Hubs and Spokes are already enrolled with the appropriate CA. Following are the assumptions about the specifics of PKI setup on each router:</p>

<ul>
<li>Each FlexVPN cloud is defined by a unique domain name (e.g. cloud.one for HUB-1)</li>
<li>Each Spoke has one X.509 certificate per FlexVPN cloud</li>
<li>Spokes encode their WAN bandwidth in X.509 Organizational Unit (OU) attribute (e.g. RED corresponds to 50Mpbs)</li>
<li>Each certificate&rsquo;s trustpoint will be called &ldquo;PKI-CLOUD-X&rdquo;, where X is 1 or 2 depending on FlexVPN cloud</li>
</ul>


<p>As an example, SPOKE-3 will have the following trustpoint configured for FlexVPN cloud #1:</p>

<figure class='code'><figcaption><span>PKI trustpoint #1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>crypto pki trustpoint PKI-CLOUD-1
</span><span class='line'> enrollment url http://120.0.0.2:80
</span><span class='line'> serial-number
</span><span class='line'> fingerprint 2BE13A4FF167CEB770A24B2D6716033E
</span><span class='line'> subject-name CN=SPOKE-3.cloud.one,OU=GREEN
</span><span class='line'> vrf FVRF
</span><span class='line'> revocation-check crl
</span><span class='line'> rsakeypair CLOUD-1
</span><span class='line'> auto-enroll
</span></code></pre></td></tr></table></div></figure>


<h2>Convention over Configuration</h2>

<p>This is where it&rsquo;d make sense to introduce the concept of Convention over Configuration. The fact that we&rsquo;ve assumed that all trustpoints will have the prefix of &ldquo;PKI-CLOUD-&rdquo; (convention) makes configuration templates a lot easier. Without it we could have allowed ANY naming of PKI trustpoint but then it should have been defined as a separate variable for every Spoke. Effectively we&rsquo;re sacrificing some level flexibility in favour of brevity (and simplicity). This principle has been popularised by Ruby on Rails web framework and is widely used in other modern web frameworks.</p>

<h2>FlexVPN inventory file</h2>

<p>Before we start working with Ansible, we need to populate host inventory file. A parent &ldquo;FLEXVPN&rdquo; group will include two children groups - &ldquo;HUBS&rdquo; and &ldquo;SPOKES&rdquo;. The latter will be subdivided into three groups - &ldquo;GREEN&rdquo;, &ldquo;BLUE&rdquo; or &ldquo;RED&rdquo;. Each spoke will be assigned to a group base on its X.509 OU value. Additionally, in order to keep configuration templates simpler, we&rsquo;ll treat multi-vrf SPOKE-1 as two different routers - SPOKE1_1 and SPOKE1_2:</p>

<figure class='code'><figcaption><span>./hosts </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">[</span><span class="nv">FLEXVPN</span><span class="p-Indicator">:</span><span class="nv">children</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="l-Scalar-Plain">HUBS</span>
</span><span class='line'><span class="l-Scalar-Plain">SPOKES</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">[HUBS]</span>
</span><span class='line'><span class="l-Scalar-Plain">HUB-1</span>
</span><span class='line'><span class="l-Scalar-Plain">HUB-2</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">[SPOKES:children]</span>
</span><span class='line'><span class="l-Scalar-Plain">GREEN</span>
</span><span class='line'><span class="l-Scalar-Plain">BLUE</span>
</span><span class='line'><span class="l-Scalar-Plain">RED</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">[RED]</span>
</span><span class='line'><span class="l-Scalar-Plain">SPOKE-1_1</span>
</span><span class='line'><span class="l-Scalar-Plain">SPOKE-1_2</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">[BLUE]</span>
</span><span class='line'><span class="l-Scalar-Plain">SPOKE-2</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">[GREEN]</span>
</span><span class='line'><span class="l-Scalar-Plain">SPOKE-3</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Front-door VRF configuration</h2>

<p>Another assumption is that all routers will have their Front-door VRF configured. Normally this would imply configuring an IP address on Internet-facing interface and a vrf-specific default route. In case of HUB-1, where there are two physical links in a single VRF, it is assumed that appropriate SLA-tied static routes are configured to enable dynamic failover between the two links. Here&rsquo;s the example of how it&rsquo;s done on HUB-1:</p>

<figure class='code'><figcaption><span>show run vrf FVRF-1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>interface Ethernet0/0
</span><span class='line'> vrf forwarding FVRF-1
</span><span class='line'> ip address 120.0.0.2 255.0.0.0
</span><span class='line'>!
</span><span class='line'>interface Ethernet0/1
</span><span class='line'> vrf forwarding FVRF-1
</span><span class='line'> ip address 121.0.0.2 255.0.0.0
</span><span class='line'>!
</span><span class='line'>ip route vrf FVRF-1 0.0.0.0 0.0.0.0 120.0.0.1 track 1
</span><span class='line'>ip route vrf FVRF-1 0.0.0.0 0.0.0.0 121.0.0.1 250
</span></code></pre></td></tr></table></div></figure>


<h2>Environment variables and the DRY principle</h2>

<p>One of the most obvious things to turn into a variable is the FVRF name and interface. We&rsquo;ll put it into an Ansible&rsquo;s global variable file <code>./group_vars/all</code>. The same file will have a default BGP AS number for iBGP routing and a table mapping different OU values to their corresponding bandwidth in Kbps.</p>

<figure class='code'><figcaption><span>./group_vars/all</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">bgp_asn</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">fvrf</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">FVRF</span>
</span><span class='line'>  <span class="l-Scalar-Plain">interface</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Ethernet0/0</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">bandwidth</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">RED</span><span class="p-Indicator">:</span>   <span class="l-Scalar-Plain">50000</span>
</span><span class='line'>  <span class="l-Scalar-Plain">GREEN</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">20000</span>
</span><span class='line'>  <span class="l-Scalar-Plain">BLUE</span><span class="p-Indicator">:</span>  <span class="l-Scalar-Plain">10000</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each of these variables can be overridden by a more specific host variable located in <code>./host_vars/</code> directory like it is the case with <a href="https://github.com/networkop/flexvpn/blob/master/host_vars/SPOKE-1_1">SPOKE1</a>.  All host-specific variables, like domain names, FlexVPN subnets, public addresses for Hub devices are also being stored in the same directory. Here&rsquo;s an example of how HUB-1 overrides the default FVRF name and defines a few variables of its own:</p>

<figure class='code'><figcaption><span>./host_vars/HUB-1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">primary</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">domain_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cloud.one</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">nbma_ip</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dynamic</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">dynamic</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">120.0.0.2</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">121.0.0.2</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">vpn_ip</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">169.254.1.1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">subnet</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">169.254.1.0/24</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">fvrf</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">FVRF-1</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Here it makes sense to talk about the <strong>DRY principle</strong>. All Spokes in their configuration files will use information like Hub&rsquo;s NBMA address and domain name. So, in theory, we could have created a host variable file for each Spoke and stored that information there. However, in that case we would have multiple duplicate variables all storing the same value. This, obviously, creates a lot of problems when it comes to updating those variables. Instead of updating a value in a single place we now have to go and update every single Spoke&rsquo;s host variables file. That&rsquo;s why it&rsquo;s important to NOT have ANY duplicates of ANY information in ANY part of your code, even if it comes at a price of an increased code complexity. This is widely accepted as best practice and used in almost every programming language and CS discipline.</p>

<h2>FlexVPN configuration templates</h2>

<p>I will omit the actual configuration templates for the sake of brevity. Those who are interested can check out my <a href="https://github.com/networkop/flexvpn">FlexVPN Github repository</a>. Here&rsquo;s how you can generate a full-blown config for FlexVPN network:</p>

<figure class='code'><figcaption><span>1. Clone Github repository</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/networkop/flexvpn.git
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>2. Update variables to match the network design</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>./hosts
</span><span class='line'>./group_vars/all
</span><span class='line'>./host_vars/
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>3. Generate configuration files</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ansible-playbook site.yml
</span></code></pre></td></tr></table></div></figure>


<p>All generated configuration files will be stored in <code>./files/</code> directory.</p>

<h2>Conclusion</h2>

<p>Thanks to DRY and Convention over Configuration principles it&rsquo;s possible to devise a configuration template that will be the same for all Spokes. The actual configuration will consist of multiple components like IKEv2, dynamic VTI, AAA and BGP configuration. I&rsquo;ll try to explain how they all tie together in my upcoming post on <a href="http://packetpushers.com">Packetpushers</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating New Network Build - Part 2 (BGP)]]></title>
    <link href="http://networkop.github.io/blog/2015/09/03/automating-bgp-config/"/>
    <updated>2015-09-03T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/09/03/automating-bgp-config</id>
    <content type="html"><![CDATA[<p>In this post we&rsquo;ll have a look at how to automate a typical BGP setup. This is where configuration may get particularly messy especially in presence of backdoor links and complex routing failover policies. However, as I will show, it is still possible to create a standard set of routing manipulation policies and selectively apply them to the required adjacencies to achieve the desired effect.</p>

<!--more-->


<h2>Requirements and assumptions</h2>

<p>The new office network is designed with several layers of WAN redundancy. Primary WAN link is the preferred option to reach all other WAN destination except for the Main office which is connected via a dedicated high-throughput link. Secondary WAN link should only be used in case both primary and backdoor links are unavailable.<br/>
All routed devices within Branch-2 will be running iBGP AS#3 with BR2-CORE playing a role of route-reflector for the two WAN routers. iBGP convergence timers should rely on IGP&rsquo;s timers (OSPF default timers of 10 and 40 seconds). Site&rsquo;s core switch should originate a site summary prefix as well as any other non-standard prefixes falling outside of the standard site summary (e.g. links to 3rd Parties, DMZ etc.). All prefixes originated by the site should be tagged with specific community values in order to be easily identifiable at the remote end.</p>

<p><img class="centre" src="http://networkop.github.io/images/full-network-topo.png" title="Full network topology" ></p>

<h2>eBGP configuration automation</h2>

<p>Each site will have a unique set of eBGP peers, hence, it is logical to put all eBGP-related variables into a site-specific directory <code>group_vars/branch-2/</code>. In order to understand how to configure each eBGP neighbor the following values need to be defined for each eBGP neighbor:</p>

<ol>
<li>IP addresses</li>
<li>AS number</li>
<li>(optional) Routing manipulation policies</li>
</ol>


<p>The above values correspond to the following Ansible variables:</p>

<figure class='code'><figcaption><span>./group_vars/branch-2/bgp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">ebgp_peers</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">BR2-WAN1</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">1.1.1.2</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">remote-as 1000</span>
</span><span class='line'>  <span class="l-Scalar-Plain">BR2-WAN2</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">2.2.3.2</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">remote-as 2000</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">route-map RM-BGP-PREPEND-OUT out</span>
</span><span class='line'>  <span class="l-Scalar-Plain">BR2-CORE</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">10.0.2.49</span><span class="p-Indicator">:</span>
</span><span class='line'>       <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">remote-as 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here <code>ebgp_peers</code> variable contains a mapping between network devices and their eBGP neighbors identified by their IP addresses. BGP path manipulation policies ideally should belong to global variables and are defined under the company-wide <code>routing</code> group</p>

<figure class='code'><figcaption><span>./group_vars/routing/route-maps</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">bgp_out_rmap_prepend</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">set as-path prepend {{ site_ASN }} {{ site_ASN }} {{ site_ASN }} {{ site_ASN }} {{ site_ASN }} {{ site_ASN }} {{ site_ASN }}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All information defined above will be reused by the <code>bgp</code> template of the <code>routing</code> ansible roles:</p>

<figure class='code'><figcaption><span>./roles/routing/template/bgp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">route-map RM-BGP-PREPEND-OUT permit 10</span>
</span><span class='line'><span class="l-Scalar-Plain">{%- for clause in bgp_out_rmap_prepend %}</span>
</span><span class='line'>  <span class="l-Scalar-Plain">{{ clause }}</span>
</span><span class='line'><span class="l-Scalar-Plain">{% endfor -%}</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">router bgp {{ site_ASN }}</span>
</span><span class='line'><span class="l-Scalar-Plain">{%- if inventory_hostname in ebgp_peers %}</span>
</span><span class='line'>  <span class="l-Scalar-Plain">{%- for neighbor_ip in ebgp_peers[inventory_hostname] %}</span>
</span><span class='line'>    <span class="l-Scalar-Plain">{%- for option in ebgp_peers[inventory_hostname][neighbor_ip] %}</span>
</span><span class='line'>  <span class="l-Scalar-Plain">neighbor {{ neighbor_ip }} {{ option }}</span>
</span><span class='line'>    <span class="l-Scalar-Plain">{% endfor -%}</span>
</span><span class='line'>  <span class="l-Scalar-Plain">{% endfor -%}</span>
</span><span class='line'><span class="l-Scalar-Plain">{% endif -%}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>iBGP configuration automation</h2>

<p>Each site will be running a simple iBGP topology with a single route-reflector with two clients. Each routed device within the new branch will need to have it&rsquo;s iBGP role  defined (server or client).</p>

<figure class='code'><figcaption><span>./group_vars/branch-2/bgp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">ibgp_topo</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">route_reflector</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">BR2-CORE</span><span class="p-Indicator">]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">rr_clients</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">BR2-WAN1</span><span class="p-Indicator">,</span> <span class="nv">BR2-WAN2</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">bgp_originate_redistribute</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">BR2-CORE</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">summary</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">static</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">bgp_originate_network</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">BR2-WAN1</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Loopback0</span>
</span><span class='line'>  <span class="l-Scalar-Plain">BR2-WAN2</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Loopback0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Special variables that start with <code>bgp_originate_</code> define which subnets should be originated by which router. RR-server will originate site-wide summary and any 3rd party subnets while WAN routers will inject their own loopbacks in order to be remotely accessible even if BR2-CORE goes down. Specific route maps responsible for prefix origination should be defined in the global scope:</p>

<figure class='code'><figcaption><span>./group_vars/routing/route-maps</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">bgp_redistr_route_maps</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">static</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">match tag {{ tags.static }}</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">set community {{ bgp_comm_static }}</span>
</span><span class='line'>  <span class="l-Scalar-Plain">summary</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">match tag {{ tags.summary }}</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">set community {{ bgp_comm_summary }}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The resulting configuration for BR2-CORE will looks like this:</p>

<figure class='code'><figcaption><span>./files/BR2-CORE.bgp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>route-map RM-BGP-FROM-STATIC permit 10
</span><span class='line'>  match tag 110
</span><span class='line'>  set community 3:1
</span><span class='line'>route-map RM-BGP-FROM-SUMMARY permit 10
</span><span class='line'>  match tag 210
</span><span class='line'>  set community 3:0
</span><span class='line'>
</span><span class='line'>route-map RM-BGP-PREPEND-OUT permit 10
</span><span class='line'>  set as-path prepend 3 3 3 3 3 3 3
</span><span class='line'>!
</span><span class='line'>ip prefix-list PL-ALL-LOOPBACKS permit 0.0.0.0/0 le 32 ge 32
</span><span class='line'>!
</span><span class='line'>route-map RM-BGP-FALLOVER permit 10
</span><span class='line'>  match ip address prefix PL-ALL-LOOPBACKS
</span><span class='line'>!
</span><span class='line'>router bgp 3
</span><span class='line'>  redistribute static route-map RM-BGP-FROM-SUMMARY
</span><span class='line'>  redistribute static route-map RM-BGP-FROM-STATIC
</span><span class='line'>  neighbor 10.0.2.49 remote-as 2
</span><span class='line'>  neighbor RR-CLIENTS peer-group
</span><span class='line'>  neighbor RR-CLIENTS remote-as 3
</span><span class='line'>  neighbor RR-CLIENTS update-source Loopback0
</span><span class='line'>  neighbor RR-CLIENTS fall-over route-map RM-BGP-FALLOVER
</span><span class='line'>  neighbor RR-CLIENTS route-reflector-client
</span><span class='line'>  neighbor 10.0.3.2 peer-group RR-CLIENTS
</span><span class='line'>  neighbor 10.0.3.3 peer-group RR-CLIENTS
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>This post concludes the series of articles describing how to automate enteprise network configuration. We first looked at how to automate <a href="http://networkop.github.io/blog/2015/08/14/automating-legacy-networks/">legacy network configuration</a>, interface and OSPF configuration for the <a href="http://networkop.github.io/blog/2015/08/26/automating-network-build-p1/">new network build</a> and, finally, BGP configuration. Full version of files and scripts can be found in <a href="https://github.com/networkop/cisco-ansible-provisioning">my github repository</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating New Network Build - Part 1]]></title>
    <link href="http://networkop.github.io/blog/2015/08/26/automating-network-build-p1/"/>
    <updated>2015-08-26T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/08/26/automating-network-build-p1</id>
    <content type="html"><![CDATA[<p>This post will demonstrate how to automate the build of a typical enterprise branch network consisting of a pair of WAN routers, a core switch and 3 access layer switches. I will show how to create the initial bootstrap configuration and enable basic routing with OSPF.</p>

<!--more-->


<h2>Prerequisites</h2>

<p>It is assumed that by this time all detailed network design information is known including interfaces numbers, VLANs, IP addresses and <abbr title="Link Aggregation Group">LAGs</abbr>. This information will be used as an input to configuration automation scripts.</p>

<p><img class="centre" src="http://networkop.github.io/images/new-office-design.png" title="New Office Network Topology" ></p>

<p>The inventory file is updated with a new <code>branch-2</code> group</p>

<figure class='code'><figcaption><span>./hosts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[branch-2]
</span><span class='line'>BR2-CORE ansible_ssh_host=10.0.3.1
</span><span class='line'>BR2-WAN1 ansible_ssh_host=10.0.3.2
</span><span class='line'>BR2-WAN2 ansible_ssh_host=10.0.3.3
</span><span class='line'>BR2-AS01 ansible_ssh_host=10.0.3.130
</span><span class='line'>BR2-AS02 ansible_ssh_host=10.0.3.131
</span><span class='line'>BR2-AS03 ansible_ssh_host=10.0.3.132
</span></code></pre></td></tr></table></div></figure>


<h2>Creating device bootstrap configuration</h2>

<p>A lot of times when building a new network it is required to create a bootstrap config that would have some basic AAA configuration along with the layer 2 and layer 3 links configuration. Since we went through the AAA configuration in the <a href="http://networkop.github.io/blog/2015/08/14/automating-legacy-networks/">previous post</a> I will omit that bit and get straight to the configuration of L2/L3 links. My personal rule of thumb is to configure all intra-site links as layer 2 trunks, including the links between the routed devices. This allows for greater flexibility in the future in case some traffic will need to get steered through a particular device.<br/>
The goal is to have configuration that would be copy-paste-friendly and would not require re-ordering or re-running. Therefore, it is important to apply configuration in the specific order:</p>

<ol>
<li>Layer 2 LAGs</li>
<li>Layer 2 port configuration</li>
<li>Layer 3 ip addressing</li>
</ol>


<p>The input information will be provided through a file called <code>interconnects</code> stored in the site-specific variable directory <code>branch-2</code>. Below is an abridged version of the file demonstrating the configuration of interfaces on the core switch. As always full version is available in my <a href="https://github.com/networkop/cisco-ansible-provisioning">github repository</a>.</p>

<figure class='code'><figcaption><span>./group_vars/branch-2/interconnects</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">link_aggregation</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">BR2-CORE</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Po11</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">Eth0/2</span><span class="p-Indicator">,</span> <span class="nv">Eth0/3</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">l2_links</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">BR2-CORE</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Eth0/0</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">11</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Eth0/1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">12</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Eth1/0</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10,20,30,40,50</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Eth1/1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">except 40</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Po11</span><span class="p-Indicator">:</span>   <span class="l-Scalar-Plain">10-50</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">l3_intf</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">BR2-CORE</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Loopback0</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10.0.3.1/32</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Vlan11</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10.0.1.38/29</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Vlan12</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10.0.1.46/29</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Vlan10</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10.0.3.65/27</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Vlan20</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10.0.3.97/27</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Vlan30</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10.0.3.129/27</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Vlan40</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10.0.3.193/27</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Vlan50</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10.0.3.161/27</span>
</span></code></pre></td></tr></table></div></figure>


<p>This information is used by the <code>bootstrap</code> Ansible role to construct an interface configuration script. Here&rsquo;s the example of LAG configuration template. It iterates over all devices in <code>link_aggregation</code> variable and configures LACP protocol on each participating interface.</p>

<figure class='code'><figcaption><span>./roles/bootstrap/templates/bootstrap.conf.j2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='jinja'><span class='line'><span class="cp">{%</span> <span class="k">if</span> <span class="nv">inventory_hostname</span> <span class="k">in</span> <span class="nv">link_aggregation</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">{%</span> <span class="k">for</span> <span class="nv">channel_number</span> <span class="k">in</span> <span class="nv">link_aggregation</span><span class="o">[</span><span class="nv">inventory_hostname</span><span class="o">]</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">{%</span> <span class="k">for</span> <span class="nv">interface</span> <span class="k">in</span> <span class="nv">link_aggregation</span><span class="o">[</span><span class="nv">inventory_hostname</span><span class="o">][</span><span class="nv">channel_number</span><span class="o">]</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">interface </span><span class="cp">{{</span> <span class="nv">interface</span> <span class="cp">}}</span><span class="x"></span>
</span><span class='line'><span class="x">  channel-group </span><span class="cp">{{</span> <span class="nv">channel_number.split</span><span class="o">(</span><span class="s2">&quot;Po&quot;</span><span class="o">)[</span><span class="m">1</span><span class="o">]</span> <span class="cp">}}</span><span class="x"> mode active</span>
</span><span class='line'><span class="x">  no shutdown</span>
</span><span class='line'><span class="x">   </span><span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>When configuring IP address information it&rsquo;s handy to use the built-in Ansible&rsquo;s <code>ipaddr</code> filter which can translate a prefix notation into Cisco&rsquo;s standard <code>ip_address netmask</code> as shown below:</p>

<figure class='code'><figcaption><span>./roles/bootstrap/templates/bootstrap.conf.j2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='jinja'><span class='line'><span class="x"> </span><span class="cp">{%</span> <span class="k">if</span> <span class="nv">inventory_hostname</span> <span class="k">in</span> <span class="nv">l3_intf</span> <span class="k">and</span> <span class="nv">inventory_hostname</span> <span class="k">in</span> <span class="nv">groups</span><span class="o">[</span><span class="s1">&#39;routers&#39;</span><span class="o">]</span> <span class="k">and</span> <span class="k">not</span> <span class="nv">inventory_hostname</span> <span class="k">in</span> <span class="nv">groups</span><span class="o">[</span><span class="s1">&#39;switches&#39;</span><span class="o">]</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">{%</span> <span class="k">for</span> <span class="nv">interface</span> <span class="k">in</span> <span class="nv">l3_intf</span><span class="o">[</span><span class="nv">inventory_hostname</span><span class="o">]</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">interface </span><span class="cp">{{</span> <span class="nv">interface</span> <span class="cp">}}</span><span class="x"></span>
</span><span class='line'><span class="x">  ip address </span><span class="cp">{{</span> <span class="nv">l3_intf</span><span class="o">[</span><span class="nv">inventory_hostname</span><span class="o">][</span><span class="nv">interface</span><span class="o">]</span> <span class="o">|</span> <span class="nf">ipaddr</span><span class="o">(</span><span class="s1">&#39;address&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="x"> </span><span class="cp">{{</span> <span class="nv">l3_intf</span><span class="o">[</span><span class="nv">inventory_hostname</span><span class="o">][</span><span class="nv">interface</span><span class="o">]</span> <span class="o">|</span> <span class="nf">ipaddr</span><span class="o">(</span><span class="s1">&#39;netmask&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</span><span class='line'><span class="x">  no shutdown</span>
</span><span class='line'><span class="x">  </span><span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Creating OSPF routing configuration</h2>

<p>OSPF configuration will adhere to the following simple conventions:</p>

<ul>
<li>All routed devices participate in OSPF</li>
<li>Every device advertises all its directly connected links</li>
<li>All links are passive by default with the exception of inter-device links</li>
<li>A single OSPF area 0 is used</li>
</ul>


<p>Another important aspect is separation of site-specific from enterprise-global configuration. The rule of thumb in this case would be to put as much information as possible into the global scope, keeping the site scope small. In our case all global variables and settings should reside under <code>./group_vars/routing</code> directory:</p>

<figure class='code'><figcaption><span>./group_vars/routing/igp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'> <span class="l-Scalar-Plain">---</span>
</span><span class='line'><span class="l-Scalar-Plain">ospf</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">global</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">default auto-cost reference-bandwidth 100000</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">router-id </span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">network 0.0.0.0 255.255.255.255 area 0</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">passive-interface default</span>
</span></code></pre></td></tr></table></div></figure>


<p>Site-specific OSPF variables will only contain a list of <em>active</em> interfaces that should form OSPF adjacencies:</p>

<figure class='code'><figcaption><span>./group_vars/branch-2/igp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">ospf_intf_list</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">BR2-CORE</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">Vlan11</span><span class="p-Indicator">,</span> <span class="nv">Vlan12</span><span class="p-Indicator">]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">BR2-WAN1</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">Eth0/1.11</span><span class="p-Indicator">]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">BR2-WAN2</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">Eth0/1.12</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once again, a special <code>routing</code> role is created with a template making use of all of the configured variables:</p>

<figure class='code'><figcaption><span>./roles/routing/templates/igp.j2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='jinja'><span class='line'><span class="x">router ospf 1</span>
</span><span class='line'><span class="cp">{%</span> <span class="k">for</span> <span class="nv">option</span> <span class="k">in</span> <span class="nv">ospf.global</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">{{</span> <span class="nv">option</span> <span class="cp">}}</span><span class="x"></span>
</span><span class='line'><span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="cp">{%</span> <span class="k">for</span> <span class="nv">interface</span> <span class="k">in</span> <span class="nv">ospf_intf_list</span><span class="o">[</span><span class="nv">inventory_hostname</span><span class="o">]</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">  no passive-interface </span><span class="cp">{{</span> <span class="nv">interface</span> <span class="cp">}}</span><span class="x"></span>
</span><span class='line'><span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The resulting configuration for the core switch would like like this:</p>

<figure class='code'><figcaption><span>./files/BR2-CORE.igp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>router ospf 1
</span><span class='line'>  default auto-cost reference-bandwidth 100000
</span><span class='line'>  router-id 10.0.3.1
</span><span class='line'>  network 0.0.0.0 255.255.255.255 area 0
</span><span class='line'>  passive-interface default
</span><span class='line'>  no passive-interface Vlan11
</span><span class='line'>  no passive-interface Vlan12
</span></code></pre></td></tr></table></div></figure>


<p>Just a reminder that full versions of templates, files and playbooks can be found on <a href="https://github.com/networkop/cisco-ansible-provisioning">github</a>.</p>

<hr />

<p>That&rsquo;s it for the basic L2/L3 and routing configuration. In the next post I will show how to automate a standard BGP configuration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating Legacy Network Configuration]]></title>
    <link href="http://networkop.github.io/blog/2015/08/14/automating-legacy-networks/"/>
    <updated>2015-08-14T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/08/14/automating-legacy-networks</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll show how to take an already established network, pull out some of the common configuration pieces and put them all into a standard Ansible environment. A lot of configuration files will be omitted for the sake of brevity, however all of them can be found on my <a href="https://github.com/networkop/cisco-ansible-provisioning">github repository</a>.</p>

<!--more-->


<h2>Legacy network overview</h2>

<p>The network I&rsquo;m using for demonstration is a cut-down version of a typical enterprise network. At this point of time it consists of a branch office network and a central DC network interconnected via redundant WAN links.
The branch office consists of a main computer room hosting all core network devices and interconnecting with access switches on each of the office floors. Data Centre consists of a comms rack hosting all networking devices and a compute rack with <abbr title="Top-Of-the-Rack">TOR</abbr> switch connected back to the core.</p>

<p><img class="centre" src="http://networkop.github.io/images/legacy-network-design.png" title="Legacy Network Topology" ></p>

<h2>Ansible environment setup</h2>

<p>As per the Ansible&rsquo;s <a href="http://docs.ansible.com/ansible/playbooks_best_practices.html">best practices</a> all configuration tasks are split into separate <code>roles</code>. Variables will be assigned to groups and we&rsquo;ll use host-specific variables to override them if necessary. A special directory <code>./files</code> will store all Ansible-generated configuration files.</p>

<figure class='code'><figcaption><span>Ansible directory structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>drwxr-xr-x  <span class="m">2</span> root root <span class="m">4096</span> Jul <span class="m">12</span> 20:54 host_vars
</span><span class='line'>drwxrwxrwx  <span class="m">2</span> root root <span class="m">4096</span> Jul <span class="m">12</span> 16:32 files
</span><span class='line'>drwxr-xr-x  <span class="m">7</span> root root <span class="m">4096</span> Jul <span class="m">12</span> 20:56 group_vars
</span><span class='line'>drwxr-xr-x  <span class="m">7</span> root root <span class="m">4096</span> Jul <span class="m">12</span> 15:18 roles
</span><span class='line'>-rw-r--r--  <span class="m">1</span> root root  <span class="m">120</span> Jul <span class="m">12</span> 19:57 ansible.cfg
</span><span class='line'>-rw-r--r--  <span class="m">1</span> root root  <span class="m">549</span> Jul <span class="m">12</span> 15:20 hosts
</span><span class='line'>-rw-r--r--  <span class="m">1</span> root root  <span class="m">104</span> Jul <span class="m">12</span> 15:20 init.yml
</span><span class='line'>-rw-r--r--  <span class="m">1</span> root root  <span class="m">240</span> Jul <span class="m">12</span> 15:20 site.yml
</span></code></pre></td></tr></table></div></figure>


<p>All network devices will be defined within two sets of groups - geographical and functional. This dual-homing of devices in multiple groups will give us greater flexibility when it comes to variable assignment and device configuration.</p>

<figure class='code'><figcaption><span>./hosts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>acme:children<span class="o">]</span>
</span><span class='line'>DC
</span><span class='line'>branch-1
</span><span class='line'>
</span><span class='line'><span class="o">[</span>DC<span class="o">]</span>
</span><span class='line'>DC-CORE <span class="nv">ansible_ssh_host</span><span class="o">=</span>10.0.1.1
</span><span class='line'>DC-WAN-1 <span class="nv">ansible_ssh_host</span><span class="o">=</span>10.0.1.2
</span><span class='line'>DC-WAN-2 <span class="nv">ansible_ssh_host</span><span class="o">=</span>10.0.1.3
</span><span class='line'>DC-TOR <span class="nv">ansible_ssh_host</span><span class="o">=</span>10.0.1.130
</span><span class='line'>
</span><span class='line'><span class="o">[</span>branch-1<span class="o">]</span>
</span><span class='line'>BR-1-CORE <span class="nv">ansible_ssh_host</span><span class="o">=</span>10.0.2.1
</span><span class='line'>BR-1-WAN-1 <span class="nv">ansible_ssh_host</span><span class="o">=</span>10.0.2.2
</span><span class='line'>BR-1-WAN-2 <span class="nv">ansible_ssh_host</span><span class="o">=</span>10.0.2.3
</span><span class='line'>BR-1-AS01 <span class="nv">ansible_ssh_host</span><span class="o">=</span>10.0.2.130
</span><span class='line'>BR-1-AS02 <span class="nv">ansible_ssh_host</span><span class="o">=</span>10.0.2.131
</span><span class='line'>BR-1-AS03 <span class="nv">ansible_ssh_host</span><span class="o">=</span>10.0.2.132
</span><span class='line'>
</span><span class='line'><span class="o">[</span>routers<span class="o">]</span>
</span><span class='line'>DC-CORE
</span><span class='line'>DC-WAN-1
</span><span class='line'>DC-WAN-2
</span><span class='line'>BR-1-CORE
</span><span class='line'>BR-1-WAN-1
</span><span class='line'>BR-1-WAN-2
</span><span class='line'>
</span><span class='line'><span class="o">[</span>switches:children<span class="o">]</span>
</span><span class='line'>access_switches
</span><span class='line'>core_switches
</span><span class='line'>
</span><span class='line'><span class="o">[</span>core_switches<span class="o">]</span>
</span><span class='line'>DC-CORE
</span><span class='line'>BR-1-CORE
</span><span class='line'>
</span><span class='line'><span class="o">[</span>access_switches<span class="o">]</span>
</span><span class='line'>DC-TOR
</span><span class='line'>BR-1-AS01
</span><span class='line'>BR-1-AS02
</span><span class='line'>BR-1-AS03
</span></code></pre></td></tr></table></div></figure>


<h2>Create variables</h2>

<p>Now we need to create variables we&rsquo;ll use in our template files. To do that we&rsquo;ll create another directory structure within the <code>./group_vars</code> directory</p>

<figure class='code'><figcaption><span>ls -la ./group_vars</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Jul <span class="m">13</span> 04:41 access_switches
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root  <span class="m">118</span> Jul <span class="m">12</span> 15:21 all
</span><span class='line'>drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Jul <span class="m">12</span> 20:55 branch-1
</span><span class='line'>drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Jul <span class="m">12</span> 20:56 branch-2
</span><span class='line'>drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Jul <span class="m">12</span> 20:54 DC
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root  <span class="m">120</span> Jul <span class="m">12</span> 15:21 passwords
</span><span class='line'>drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Jul <span class="m">12</span> 15:20 routers
</span><span class='line'>drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Jul <span class="m">13</span> 04:41 switches
</span></code></pre></td></tr></table></div></figure>


<p>The two files - <code>all</code> and <code>passwords</code> will contain variables relevant to network as a whole and confidential information respectively. Each of the directories within <code>./group_vars</code> corresponds to a particular inventory group. Within those directories there are files containing group-specific variables, like the one below:</p>

<figure class='code'><figcaption><span>./group_vars/routers/common</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>---
</span><span class='line'>management_interface: Loopback0
</span><span class='line'>
</span><span class='line'>external_interface_bw:
</span><span class='line'>  DC-WAN-1:
</span><span class='line'>    Ethernet0/1: 10000
</span><span class='line'>  DC-WAN-2:
</span><span class='line'>    Ethernet0/1: 5000
</span><span class='line'>  BR-1-WAN-1:
</span><span class='line'>    Ethernet0/0: 10000
</span><span class='line'>  BR-1-WAN-2:
</span><span class='line'>    Ethernet0/0: 5000
</span></code></pre></td></tr></table></div></figure>


<p>This file contains management interface for all routed devices as well as external interface bandwidth information which will be used for QoS configuration later.</p>

<h2>Create device configuration templates</h2>

<p>To get started, we need to dump running configuration from all network devices and put it into Jinja templates. This only needs to be done once by running <code>ansible-playbook init.yml</code> command. This playbook uses <code>raw</code> module to get the running configuration from each device and stores this information in <code>./roles/non-standard/templates/{{inventory_hostname}}.j2</code> files.</p>

<h2>System management configuration automation</h2>

<p>Now, it&rsquo;s finally time to do some automation. Since all our devices have similar configuration of AAA, SYSLOG, NTP, VTY and SNMP we can easily remove these parts from <code>non-standard</code> templates and put them into a <code>management</code> role.
To do this we&rsquo;ll:</p>

<ol>
<li>Create a template configuration file for each of the system management components (aaa, syslog etc.)</li>
<li>Remove all IP addresses from those templates and replace them with variables</li>
<li>Remove the duplicate lines from each of the templates in <code>non-standard</code> role</li>
</ol>


<p>The main management template will have a number of references to other template files</p>

<figure class='code'><figcaption><span>./roles/management/templates/management.j2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='jinja'><span class='line'><span class="cp">{%</span> <span class="k">include</span> <span class="s2">&quot;services.j2&quot;</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">!</span>
</span><span class='line'><span class="cp">{%</span> <span class="k">include</span> <span class="s2">&quot;aaa.j2&quot;</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">!</span>
</span><span class='line'><span class="x">clock timezone </span><span class="cp">{{</span> <span class="nv">time_zone_name</span> <span class="cp">}}</span><span class="x"> </span><span class="cp">{{</span> <span class="nv">time_zone_hours</span> <span class="cp">}}</span><span class="x"> </span><span class="cp">{{</span> <span class="nv">time_zone_minutes</span> <span class="cp">}}</span><span class="x"></span>
</span><span class='line'><span class="x">!</span>
</span><span class='line'><span class="x">ip domain-name </span><span class="cp">{{</span> <span class="nv">domain_name</span> <span class="cp">}}</span><span class="x"></span>
</span><span class='line'><span class="x">no ip domain-lookup</span>
</span><span class='line'><span class="x">!</span>
</span><span class='line'><span class="cp">{%</span> <span class="k">include</span> <span class="s2">&quot;logging.j2&quot;</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">!</span>
</span><span class='line'><span class="cp">{%</span> <span class="k">include</span> <span class="s2">&quot;snmp.j2&quot;</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">!</span>
</span><span class='line'><span class="cp">{%</span> <span class="k">include</span> <span class="s2">&quot;ntp.j2&quot;</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">!</span>
</span><span class='line'><span class="cp">{%</span> <span class="k">include</span> <span class="s2">&quot;ssh.j2&quot;</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">!</span>
</span><span class='line'><span class="cp">{%</span> <span class="k">include</span> <span class="s2">&quot;vty.j2&quot;</span> <span class="cp">%}</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Each of the included template files will contain only relevant configuration and will have some of its values replaced with variables:</p>

<figure class='code'><figcaption><span>./roles/management/templates/snmp.j2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='jinja'><span class='line'><span class="x">snmp-server community </span><span class="cp">{{</span> <span class="nv">snmp_ro_community</span> <span class="cp">}}</span><span class="x"> RO</span>
</span><span class='line'><span class="x">snmp-server trap-source </span><span class="cp">{{</span> <span class="nv">management_interface</span> <span class="cp">}}</span><span class="x"></span>
</span><span class='line'><span class="x">snmp-server contact </span><span class="cp">{{</span> <span class="nv">snmp_contact</span> <span class="cp">}}</span><span class="x"></span>
</span><span class='line'><span class="cp">{%</span> <span class="k">for</span> <span class="nv">ip</span> <span class="k">in</span> <span class="nv">snmp_servers</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">snmp-server host </span><span class="cp">{{</span> <span class="nv">ip</span> <span class="cp">}}</span><span class="x"> </span><span class="cp">{{</span> <span class="nv">snmp_servers</span><span class="o">[</span><span class="nv">ip</span><span class="o">]</span> <span class="cp">}}</span><span class="x"></span>
</span><span class='line'><span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Access switchport configuration</h2>

<p>The trickiest part with automating switchport configuration is picking the right data structure to hold that information. There can be many switchport numbering schemes depending on whether the switches are stacked or the module number within the switch. I&rsquo;ve decided to store all switchport allocation as port ranges defined for a particular VLAN. The variable will be a hash (dictionary) with VLAN number as keys and another dictionary as value. That other dictionary will have a <code>EtherTypeSwitch/Module</code> as a key and list of ranges as values, where each range is defined with a start and stop value. In our case the switches are not stacked so the <code>EtherTypeSwitch/Module</code> key can be reduced to simply <code>EtherTypeModule</code>. The below variable defines VLAN 10 on ports <code>Ethernet0/0-3</code> and <code>Ethernet2/0-3</code>:</p>

<figure class='code'><figcaption><span>./group_vars/switches/access_switches/access_ports</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>---
</span><span class='line'>access_ports:
</span><span class='line'>  10:
</span><span class='line'>    Ethernet0:
</span><span class='line'>      - - 0
</span><span class='line'>        - 3
</span><span class='line'>    Ethernet2:
</span><span class='line'>      - - 0
</span><span class='line'>        - 3
</span><span class='line'>  30:
</span><span class='line'>    Ethernet3:
</span><span class='line'>      - - 0
</span><span class='line'>        - 3
</span><span class='line'>  50:
</span><span class='line'>    Ethernet5:
</span><span class='line'>      - - 0
</span><span class='line'>        - 3
</span><span class='line'>  40:
</span><span class='line'>    Ethernet4:
</span><span class='line'>      - - 0
</span><span class='line'>        - 3
</span><span class='line'>  999:
</span><span class='line'>    Ethernet0:
</span><span class='line'>      - - 1
</span><span class='line'>        - 3
</span></code></pre></td></tr></table></div></figure>


<p>Should the switch configuration differ from the above &lsquo;standard&rsquo; (e.g. DC-TOR in our case) it can be included in a host-specific file under <code>./host_vars</code> directory which will override the variable defined above.<br/>
The template which will generate the switchport configuration is designed to have VLAN-specific configuration elements like port shutdown in case the VLAN is unused or an additional voice vlan number.</p>

<figure class='code'><figcaption><span>roles/access-ports/templates/access-ports.j2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='jinja'><span class='line'><span class="cp">{%</span>- <span class="k">for</span> <span class="nv">vlan</span> <span class="k">in</span> <span class="nv">access_ports</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">{%</span>- <span class="k">for</span> <span class="nv">sw_module</span> <span class="k">in</span> <span class="nv">access_ports</span><span class="o">[</span><span class="nv">vlan</span><span class="o">]</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">{%</span>- <span class="k">for</span> <span class="nv">int_range</span> <span class="k">in</span> <span class="nv">access_ports</span><span class="o">[</span><span class="nv">vlan</span><span class="o">][</span><span class="nv">sw_module</span><span class="o">]</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">      </span><span class="cp">{%</span>- <span class="k">for</span> <span class="nv">x</span> <span class="k">in</span> <span class="nv">range</span><span class="o">(</span><span class="nv">int_range</span><span class="o">[</span><span class="m">0</span><span class="o">],</span><span class="nv">int_range</span><span class="o">[</span><span class="m">1</span><span class="o">])</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">        interface range </span><span class="cp">{{</span> <span class="nv">sw_module</span> <span class="cp">}}</span><span class="x">/</span><span class="cp">{{</span> <span class="nv">x</span> <span class="cp">}}</span><span class="x"></span>
</span><span class='line'><span class="x">        switchport mode access</span>
</span><span class='line'><span class="x">        switchport access vlan </span><span class="cp">{{</span> <span class="nv">vlan</span> <span class="cp">}}</span><span class="x"></span>
</span><span class='line'><span class="x">        switchport spanning-tree portfast</span>
</span><span class='line'><span class="x">        </span><span class="cp">{%</span> <span class="k">if</span> <span class="nv">vlan</span> <span class="o">==</span> <span class="m">999</span> -<span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">        shutdown</span>
</span><span class='line'><span class="x">        </span><span class="cp">{%</span> <span class="k">endif</span> -<span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">        </span><span class="cp">{%</span> <span class="k">if</span> <span class="nv">vlan</span> <span class="o">==</span> <span class="m">10</span> -<span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">        switchport voice vlan 20</span>
</span><span class='line'><span class="x">        </span><span class="cp">{%</span> <span class="k">endif</span> -<span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">      </span><span class="cp">{%</span> <span class="k">endfor</span> -<span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">{%</span> <span class="k">endfor</span> -<span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">{%</span> <span class="k">endfor</span> -<span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="cp">{%</span> <span class="k">endfor</span> -<span class="cp">%}</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>VLANs configuration</h2>

<p>The other common bit amongst most of the switches is VLAN and STP configuration. This can be easily extracted and put into a separate <code>vlans</code> role. To allocate VLANs we&rsquo;ll use the following variable:</p>

<figure class='code'><figcaption><span>group_vars/switches/vlans</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">vlans</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">10</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">DATA</span>
</span><span class='line'>  <span class="l-Scalar-Plain">20</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">VOICE</span>
</span><span class='line'>  <span class="l-Scalar-Plain">30</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">MGMT</span>
</span><span class='line'>  <span class="l-Scalar-Plain">40</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">PRINTER</span>
</span><span class='line'>  <span class="l-Scalar-Plain">50</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">WLAN</span>
</span><span class='line'>  <span class="l-Scalar-Plain">999</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">UNUSED</span>
</span></code></pre></td></tr></table></div></figure>


<h2>QoS configuration</h2>

<p>QoS configuration automation is relatively easy. Once we&rsquo;ve identifies the common configuration commands and removed them from <code>non-standard</code> templates, we will put them into their own <code>wan-qos</code> role and use the <code>external_interface_bw</code> variable defined above to populate the QoS template.</p>

<h2>Site Playbook</h2>

<p>Finally we&rsquo;ll combine all the roles defined above in a single playbook which will generate configuration files for all devices under <code>./files</code> directory.</p>

<figure class='code'><figcaption><span>./site.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">acme</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">connection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">local</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vars_files</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">group_vars/passwords</span>
</span><span class='line'>  <span class="l-Scalar-Plain">roles</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">non-standard</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">management</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">routers</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">connection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">local</span>
</span><span class='line'>  <span class="l-Scalar-Plain">roles</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">wan-qos</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">switches</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">connection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">local</span>
</span><span class='line'>  <span class="l-Scalar-Plain">roles</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">access-ports</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">vlans</span>
</span></code></pre></td></tr></table></div></figure>


<p>By this time <code>.non-standard</code> files should only contain inter-device link and routing configuration. All management, access switchport, VLANs and QoS configuration has been removed and allocated to different roles.</p>

<hr />

<p>This post demonstrated how to abstract common pieces of configuration and lay the groundwork for future site provisioning and enterprise-wide configuration changes. In the next post I&rsquo;ll show how to use the information collected so far to automate the build of a new branch office network.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network Configuration Automation]]></title>
    <link href="http://networkop.github.io/blog/2015/08/07/configuration-automation/"/>
    <updated>2015-08-07T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/08/07/configuration-automation</id>
    <content type="html"><![CDATA[<p>This post will give a brief overview of network configuration automation, describe its challenges and benefits and will set off a series of posts showing how to automate a configuration of a typical enterprise network.</p>

<!--more-->


<h2>Automating Network Configuration</h2>

<p>Automation and programmability steadily make their way into a networking domain. The idea was born in application development world where makefiles served a role of automated installation scripts. It later spread into application testing and deployment so now hardly anyone does these two things by hand. Next in line were the operating systems largely thanks to the raising popularity of <abbr title="Platform-as-a-Service">PaaS</abbr> solutions. Until recently network configuration has been the prerogative of us, network engineers. However it&rsquo;s hard maintain this mindset when everything surrounding the network industry changes so rapidly. In fact, one of the reasons why idea of <abbr title="Software-Defined Network">SDN</abbr> has become so popular was because it allowed faster deployment and configuration changes in a much more scalable manner. As usual, one of the first adopters of these new tools and paradigms were <abbr title="Internet Service Providers">ISPs</abbr>. This comes as no surprise since one of the major benefits automation gives is ability to manage large-scale systems. Another area where automation has been very successful is <abbr title="Data Centre">DC</abbr> networking. Now what makes these two networking domains so suitable for automation? One of the main requirements for DC and ISP network is ability to scale to enormous proportions without any detrimental effect to services provided to end clients. And amongst other things making it possible is a use of <strong>standard repeatable design patterns</strong>. That is exactly where automation fits in.</p>

<ol>
<li>Take a small part of the network (a DC pod or an ISP region)</li>
<li>Identify a pattern (a spine/route-reflector with two leafs/RR-clients)</li>
<li>Abstract it by taking out all variable parts (ip addresses, BGP AS numbers) until it looks exactly the same as in any other region/POD</li>
<li>Put this abstract pattern inside an automation system</li>
<li>All the information extracted during step #3 goes into environmental variables</li>
</ol>


<p>Now all what needs to be done to configure another POD/region is simply create a new set of environmental variables (ip addresses, hostnames) and run them through the automation system.<br/>
However remember that network configuration automation will not substitute a good design. In fact, it&rsquo;s a standards-based, scalable design that makes automation possible.</p>

<h2>Enterprise network automation</h2>

<p>Everyone who has ever dealt with enterprise networks knows that repeatable standard design patterns have nothing to do with a typical enterprise network. In best case scenario there is a standard for IGP, EGP, STP flavour and a single set of WAN providers. Most of the times, however, enterprise network is a tight knot of semi-permanent solutions mixed with a number of ad-hoc workarounds resulted from fault troubleshooting. So is there a point in even <em>trying</em> to bring order into this mess? According to chaos theory, order is everywhere even though it is sometimes concealed behind a visual chaos. We only need to look closer to see recognisable patterns emerging:</p>

<ul>
<li>All network devices in the same administrative domain share some management configuration (syslog, snmp, AAA)</li>
<li>Most of the access switches have similar switchport configuration (data/voice, management, video)</li>
<li>QoS configuration including ACLs and class-maps normally remains the same on all devices</li>
</ul>


<p>Cumulatively, these three configuration parts may constitute around 70% of total device configuration. And there are not too many things that need to be done do automate them. QoS configuration will only differ in interface reference bandwidth, switchport configuration will differ in VLAN number and management template will only have different source interface IP addresses for management protocols.<br/>
Ok, so what happens to the remaining 30% you would ask. The answer is nothing. Automation is not all-or-nothing game. We can have big chunks of configuration stored as a collection of static text and not worry about it. It will even be possible to quantify the scaling property of a design as a ratio between automated and total (automated + non-standard) device configuration. Something like a test coverage in application development world.</p>

<h2>Automating a typical enterprise network</h2>

<p>In the upcoming series of posts I will show how to:</p>

<ul>
<li>Pull legacy network configuration into automation system</li>
<li>Completely automate the build of a new branch office</li>
</ul>


<p>I will use a cut-down version of a typical enterprise network I&rsquo;ve used in my <a href="http://networkop.github.io/blog/2015/07/17/tdd-quickstart/">previous posts</a>. I&rsquo;ll once again use Ansible as automation system and specifically its' <code>template</code> module which uses <a href="http://jinja.pocoo.org/docs/dev/">Jinja2</a> templating language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network TDD Quickstart Guide]]></title>
    <link href="http://networkop.github.io/blog/2015/07/17/tdd-quickstart/"/>
    <updated>2015-07-17T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/07/17/tdd-quickstart</id>
    <content type="html"><![CDATA[<p>This post gives a quick overview of how to use network Test Driven Development framework. As an example I&rsquo;ll use a simplified version of a typical enterprise network with a Data Centre/HQ and a Branch office. A new branch is being added and the task is to configure routing for that branch using a TDD approach. First we&rsquo;ll devise a set of TDD scenarios to be tested and then, going through each one of them, modify routing to make sure those scenarios don&rsquo;t fail (a so-called red-green-refactor approach)</p>

<!--more-->


<h2>Network overview</h2>

<p>Let&rsquo;s assume you&rsquo;re working in a proverbial Acme Inc. It has a Data Centre hosting all centralised services and a single office branch (Branch #1). Sites are interconnected using active/backup WAN links. The company decides to expand and adds a new office in a city nearby. In additional to standard dual WAN links it&rsquo;s possible to buy a cheap and high throughput backdoor link between the two branches.</p>

<p><img class="centre" src="http://networkop.github.io/images/tdd-big-topo.png" title="Acme Inc. Topology" ></p>

<h2>Network configuration</h2>

<p>Acme Inc. uses OSPF for intra-site routing and BGP for WAN routing. A standard configuration assumes that the core router at each site is the route reflector for the two WAN routers.</p>

<figure class='code'><figcaption><span>CORE ROUTER CONFIG</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>interface Loopback0
</span><span class='line'> ip address 10.0.X.1 255.255.255.255
</span><span class='line'>!
</span><span class='line'>router ospf 100
</span><span class='line'> network 0.0.0.0 255.255.255.255 area 0
</span><span class='line'>!
</span><span class='line'>router bgp X
</span><span class='line'> bgp log-neighbor-changes
</span><span class='line'> timers bgp 1 5
</span><span class='line'> neighbor RR-CLIENTS peer-group
</span><span class='line'> neighbor RR-CLIENTS remote-as 1
</span><span class='line'> neighbor RR-CLIENTS update-source Loopback0
</span><span class='line'> neighbor RR-CLIENTS route-reflector-client
</span><span class='line'> neighbor 10.0.X.2 peer-group RR-CLIENTS
</span><span class='line'> neighbor 10.0.X.3 peer-group RR-CLIENTS
</span></code></pre></td></tr></table></div></figure>


<p>WAN routers originate site summary by first injecting their own Loopback IP address into BGP RIB and then aggregating it to site summary boundary (/24).</p>

<figure class='code'><figcaption><span>WAN ROUTER 1 CONFIG</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>router ospf 100
</span><span class='line'> network 0.0.0.0 255.255.255.255 area 0
</span><span class='line'>!
</span><span class='line'>router bgp X
</span><span class='line'> bgp log-neighbor-changes
</span><span class='line'> network 10.0.X.2 mask 255.255.255.255
</span><span class='line'> aggregate-address 10.0.X.0 255.255.255.0
</span><span class='line'> neighbor &lt;PRIMARY_PE_IP&gt; remote-as &lt;PRIMARY_WAN_AS&gt;
</span><span class='line'> neighbor 10.0.X.1 remote-as 1
</span><span class='line'> neighbor 10.0.X.1 update-source Loopback0
</span></code></pre></td></tr></table></div></figure>


<p>No special path manipulation is done on either WAN routers by default.</p>

<figure class='code'><figcaption><span>WAN ROUTER 2 CONFIG</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>router ospf 100
</span><span class='line'> network 0.0.0.0 255.255.255.255 area 0
</span><span class='line'>!
</span><span class='line'>router bgp X
</span><span class='line'> bgp log-neighbor-changes
</span><span class='line'> network 10.0.X.2 mask 255.255.255.255
</span><span class='line'> aggregate-address 10.0.X.0 255.255.255.0
</span><span class='line'> neighbor &lt;BACKUP_PE_IP&gt; remote-as &lt;BACKUP_WAN_AS&gt;
</span><span class='line'> neighbor 10.0.X.1 remote-as 1
</span><span class='line'> neighbor 10.0.X.1 update-source Loopback0
</span></code></pre></td></tr></table></div></figure>


<p>The same pattern is repeated on all sites with the exception of an additional backdoor link between the branch sites over which the two cores run eBGP. Inter-device transit subnets can be anything within the site-allocated range.</p>

<h2>Devising TDD scenarios</h2>

<p>After careful consideration of all links' bandwidths you devise a set of TDD scenarios and along with the high-level network topology present them to your management for endorsement. The idea is to always try to use the primary WAN link if possible. However for the inter-branch communication, backdoor link should be the preferred option. When the primary link fails at the new branch, all traffic to and from the DC should traverse the backdoor link only falling back to the secondary WAN link in case both primary and backdoor link fail. This corresponds to the 4 TDD scenarios (shown with coloured arrows on the above diagram):</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>./scenarios/all.txt </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>1. Testing of Primary Link (default scenario)
</span><span class='line'>
</span><span class='line'>1.1 From DC-CORE to BR2-CORE via DC-WAN1,BR2-WAN1
</span><span class='line'>1.2 From BR2-CORE to DC-CORE via BR2-WAN1, DC-WAN1
</span><span class='line'>1.3 From BR2-WAN1 to BR1-WAN1 via BR2-CORE,BR1-CORE
</span><span class='line'>1.4 From BR1-WAN1 to BR2-WAN1 via BR1-CORE, BR2-CORE
</span><span class='line'>
</span><span class='line'>2. Primary WAN failed at Branch #2
</span><span class='line'>
</span><span class='line'>2.1 From DC-CORE to BR2-CORE via DC-WAN1,BR1-WAN1,BR1-CORE
</span><span class='line'>2.2 From BR2-CORE to DC-CORE via BR1-CORE, BR1-WAN1, DC-WAN1
</span><span class='line'>2.3 From BR2-WAN2 to BR1-WAN2 via BR2-CORE, BR1-CORE
</span><span class='line'>2.4 From BR1-WAN2 to BR2-WAN2 via BR1-CORE, BR2-CORE
</span><span class='line'>
</span><span class='line'>3. Backdoor link failed
</span><span class='line'>
</span><span class='line'>3.1 From BR2-WAN2 to BR1-WAN2 via BR2-WAN1, BR1-WAN1
</span><span class='line'>3.2 FROM BR1-WAN2 to BR2-WAN2 via BR1-WAN1, BR2-WAN1
</span><span class='line'>
</span><span class='line'>4. Both Primary and Backdoor links failed at Branch #2
</span><span class='line'>
</span><span class='line'>4.1 From DC-CORE to BR2-CORE via DC-WAN2, BR2-WAN2
</span><span class='line'>4.2 From BR2-CORE to DC-CORE via BR2-WAN2, DC-WAN2
</span><span class='line'>4.3 From BR2-CORE to BR1-CORE via BR2-WAN2, BR1-WAN2
</span><span class='line'>4.4 From BR1-CORE to BR2-CORE via BR1-WAN2, BR2-WAN2
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Preparing the test environment</h2>

<p>First, you need to get a Linux machine connected to internet and to your network. A simply VM inside a VirtualBox would do. Now clone the git repository:</p>

<figure class='code'><figcaption><span>Cloning git repository</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/networkop/simple-cisco-tdd.git tdd-acme-inc
</span><span class='line'><span class="nb">cd </span>tdd-acme-int
</span></code></pre></td></tr></table></div></figure>


<p>Populate Ansible hosts inventory. In this case hosts are assigned to the group corresponding to their site and all the site groups are assigned to a parent group.</p>

<figure class='code'><figcaption><span>./myhosts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[dc-devices]
</span><span class='line'>DC-CORE ansible_ssh_host=10.0.1.1
</span><span class='line'>DC-WAN1 ansible_ssh_host=10.0.1.2
</span><span class='line'>DC-WAN2 ansible_ssh_host=10.0.1.3
</span><span class='line'>
</span><span class='line'>[br1-devices]
</span><span class='line'>BR1-CORE ansible_ssh_host=10.0.2.1
</span><span class='line'>BR1-WAN1 ansible_ssh_host=10.0.2.2
</span><span class='line'>BR1-WAN2 ansible_ssh_host=10.0.2.3
</span><span class='line'>
</span><span class='line'>[br2-devices]
</span><span class='line'>BR2-CORE ansible_ssh_host=10.0.3.1
</span><span class='line'>BR2-WAN1 ansible_ssh_host=10.0.3.2
</span><span class='line'>BR2-WAN2 ansible_ssh_host=10.0.3.3
</span><span class='line'>
</span><span class='line'>[cisco-devices:children]
</span><span class='line'>dc-devices
</span><span class='line'>br1-devices
</span><span class='line'>br2-devices
</span></code></pre></td></tr></table></div></figure>


<p>Optionally, you can define your username/password credentials.</p>

<figure class='code'><figcaption><span>./group_vars/cisco-devices.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">ansible_ssh_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco</span>
</span><span class='line'><span class="l-Scalar-Plain">ansible_ssh_pass</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do the IP address information gathering and scenario processing first.</p>

<figure class='code'><figcaption><span>Run the fact gathering</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./ansible-playbook cisco-ip-collect.yml
</span></code></pre></td></tr></table></div></figure>


<p>Verify that IP addresses and scenarios are now recorded in a global group variable file.</p>

<figure class='code'><figcaption><span>Verify the content of all.yml file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat ./group_vars/all.yml
</span></code></pre></td></tr></table></div></figure>


<h2>Test the default scenario</h2>

<p>Now it&rsquo;s time to test. First, the default scenario:</p>

<figure class='code'><figcaption><span>Testing scenario #1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ansible-playbook cisco_tdd.yml
</span><span class='line'>Enter scenario number <span class="o">[</span>1<span class="o">]</span>: 1
</span><span class='line'>...
</span><span class='line'>skipping: <span class="o">[</span>DC-WAN1<span class="o">]</span>
</span><span class='line'>skipping: <span class="o">[</span>BR1-CORE<span class="o">]</span>
</span><span class='line'>skipping: <span class="o">[</span>DC-WAN2<span class="o">]</span>
</span><span class='line'>skipping: <span class="o">[</span>BR1-WAN2<span class="o">]</span>
</span><span class='line'>skipping: <span class="o">[</span>BR2-WAN2<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>BR2-CORE<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;DC-CORE&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;BR2-WAN1&#39;</span>, <span class="s1">&#39;DC-WAN1&#39;</span><span class="o">]})</span>
</span><span class='line'>ok: <span class="o">[</span>BR2-WAN1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;BR1-WAN1&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;BR2-CORE&#39;</span>, <span class="s1">&#39;BR1-CORE&#39;</span><span class="o">]})</span>
</span><span class='line'>ok: <span class="o">[</span>BR1-WAN1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;BR2-WAN1&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;BR1-CORE&#39;</span>, <span class="s1">&#39;BR2-CORE&#39;</span><span class="o">]})</span>
</span><span class='line'>ok: <span class="o">[</span>DC-CORE<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;BR2-CORE&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;DC-WAN1&#39;</span>, <span class="s1">&#39;BR2-WAN1&#39;</span><span class="o">]})</span>
</span></code></pre></td></tr></table></div></figure>


<p>All tests succeeded.</p>

<h2>Testing the primary link failure</h2>

<p>Now, let&rsquo;s simulate the failure of a primary WAN link by shutting down the uplink on the WAN router:</p>

<figure class='code'><figcaption><span>BR2-WAN1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>BR2-WAN1#conf t
</span><span class='line'>Enter configuration commands, one per line.  End with CNTL/Z.
</span><span class='line'>BR2-WAN1(config)#int eth 0/0
</span><span class='line'>BR2-WAN1(config-if)#shut
</span></code></pre></td></tr></table></div></figure>


<p>And now run the second scenario:</p>

<figure class='code'><figcaption><span>Testing scenario #2 - failed</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ansible-playbook cisco_tdd.yml
</span><span class='line'>Enter scenario number <span class="o">[</span>1<span class="o">]</span>: 2
</span><span class='line'>...
</span><span class='line'>failed: <span class="o">[</span>DC-CORE<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;BR2-CORE&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;DC-WAN1&#39;</span>, <span class="s1">&#39;BR1-WAN1&#39;</span><span class="o">]})</span> <span class="o">=</span>&gt; <span class="o">{</span><span class="s2">&quot;failed&quot;</span>: <span class="nb">true</span>, <span class="s2">&quot;item&quot;</span>: <span class="o">{</span><span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;BR2-CORE&quot;</span>, <span class="s2">&quot;value&quot;</span>: <span class="o">[</span><span class="s2">&quot;DC-WAN1&quot;</span>, <span class="s2">&quot;BR1-WAN1&quot;</span><span class="o">]}}</span>
</span><span class='line'>msg: Failed scenario Primary WAN failed at Branch <span class="c">#2.</span>
</span><span class='line'>Traceroute from DC-CORE to BR2-CORE has not traversed <span class="o">[</span><span class="s1">&#39;DC-WAN1&#39;</span>, <span class="s1">&#39;BR1-WAN1&#39;</span><span class="o">]</span>
</span><span class='line'> Actual path taken: DC-CORE -&gt; DC-WAN2 -&gt; 2.2.2.2 -&gt; BR2-WAN2 -&gt; BR2-CORE
</span><span class='line'>ok: <span class="o">[</span>BR1-WAN2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;BR2-WAN2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;BR1-CORE&#39;</span>, <span class="s1">&#39;BR2-CORE&#39;</span><span class="o">]})</span>
</span><span class='line'>failed: <span class="o">[</span>BR2-CORE<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;DC-CORE&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;BR1-CORE&#39;</span>, <span class="s1">&#39;BR1-WAN1&#39;</span><span class="o">]})</span> <span class="o">=</span>&gt; <span class="o">{</span><span class="s2">&quot;failed&quot;</span>: <span class="nb">true</span>, <span class="s2">&quot;item&quot;</span>: <span class="o">{</span><span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;DC-CORE&quot;</span>, <span class="s2">&quot;value&quot;</span>: <span class="o">[</span><span class="s2">&quot;BR1-CORE&quot;</span>, <span class="s2">&quot;BR1-WAN1&quot;</span><span class="o">]}}</span>
</span><span class='line'>msg: Failed scenario Primary WAN failed at Branch <span class="c">#2.</span>
</span><span class='line'>Traceroute from BR2-CORE to DC-CORE has not traversed <span class="o">[</span><span class="s1">&#39;BR1-CORE&#39;</span>, <span class="s1">&#39;BR1-WAN1&#39;</span><span class="o">]</span>
</span><span class='line'> Actual path taken: BR2-CORE -&gt; BR2-WAN2 -&gt; 2.2.3.2 -&gt; DC-WAN2 -&gt; DC-CORE
</span><span class='line'>ok: <span class="o">[</span>BR2-WAN2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;BR1-WAN2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;BR2-CORE&#39;</span>, <span class="s1">&#39;BR1-CORE&#39;</span><span class="o">]})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right, here is where it gets interesting. You see that the two scenarios have failed. Specifically traffic between the new branch and the DC has not traversed the backdoor link preferring the backup WAN instead. So we need to make the backup WAN less preferred. The easiest way is to use <code>as-path prepend</code> feature. Let&rsquo;s modify the configuration of our backup WAN router:</p>

<figure class='code'><figcaption><span>BR2-WAN1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>route-map RM-BGP-PREPEND-IN permit 10
</span><span class='line'> set as-path prepend last-as 4
</span><span class='line'>route-map RM-BGP-PREPEND-OUT permit 10
</span><span class='line'> set as-path prepend 3 3 3 3
</span><span class='line'>!
</span><span class='line'>router bgp 3
</span><span class='line'>neighbor 2.2.3.2 route-map RM-BGP-PREPEND-IN in
</span><span class='line'>neighbor 2.2.3.2 route-map RM-BGP-PREPEND-OUT out
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s run the same test again:</p>

<figure class='code'><figcaption><span>Testing scenario #2 - success</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ansible-playbook cisco_tdd.yml
</span><span class='line'>Enter scenario number <span class="o">[</span>1<span class="o">]</span>: 2
</span><span class='line'>ok: <span class="o">[</span>DC-CORE<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;BR2-CORE&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;DC-WAN1&#39;</span>, <span class="s1">&#39;BR1-WAN1&#39;</span><span class="o">]})</span>
</span><span class='line'>ok: <span class="o">[</span>BR1-WAN2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;BR2-WAN2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;BR1-CORE&#39;</span>, <span class="s1">&#39;BR2-CORE&#39;</span><span class="o">]})</span>
</span><span class='line'>ok: <span class="o">[</span>BR2-CORE<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;DC-CORE&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;BR1-CORE&#39;</span>, <span class="s1">&#39;BR1-WAN1&#39;</span><span class="o">]})</span>
</span><span class='line'>ok: <span class="o">[</span>BR2-WAN2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;BR1-WAN2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;BR2-CORE&#39;</span>, <span class="s1">&#39;BR1-CORE&#39;</span><span class="o">]})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks better now. Let&rsquo;s move on.</p>

<h2>Testing the Backdoor link failure</h2>

<p>Next in order, backdoor link failure. First let&rsquo;s restore our primary WAN link first:</p>

<figure class='code'><figcaption><span>BR2-WAN1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>BR2-WAN1#conf t
</span><span class='line'>Enter configuration commands, one per line.  End with CNTL/Z.
</span><span class='line'>BR2-WAN1(config)#int eth 0/0
</span><span class='line'>BR2-WAN1(config-if)#no shut
</span></code></pre></td></tr></table></div></figure>


<p>And bring down the link between the two branches:</p>

<figure class='code'><figcaption><span>BR2-CORE</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>BR2-CORE#conf t
</span><span class='line'>Enter configuration commands, one per line.  End with CNTL/Z.
</span><span class='line'>BR2-CORE(config)#int eth 0/2
</span><span class='line'>BR2-CORE(config-if)#shut
</span></code></pre></td></tr></table></div></figure>


<p>Run the third scenario:</p>

<figure class='code'><figcaption><span>Testing scenario #3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@netops:~/quickstart# ansible-playbook cisco_tdd.yml
</span><span class='line'>Enter scenario number <span class="o">[</span>1<span class="o">]</span>: 3
</span><span class='line'>ok: <span class="o">[</span>BR1-WAN2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;BR2-WAN2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;BR1-WAN1&#39;</span>, <span class="s1">&#39;BR2-WAN1&#39;</span><span class="o">]})</span>
</span><span class='line'>ok: <span class="o">[</span>BR2-WAN2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;BR1-WAN2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;BR2-WAN1&#39;</span>, <span class="s1">&#39;BR1-WAN1&#39;</span><span class="o">]})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking good. Now even the backup WAN routers traverse the primary WAN to talk to each other. Just as we expected.</p>

<h2>Testing of backup WAN</h2>

<p>Finally, let&rsquo;s see what would happen when both primary WAN and backdoor links go down. First, bring down the primary WAN link again:</p>

<figure class='code'><figcaption><span>BR2-WAN1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>BR2-WAN1#conf t
</span><span class='line'>Enter configuration commands, one per line.  End with CNTL/Z.
</span><span class='line'>BR2-WAN1(config)#int eth 0/0
</span><span class='line'>BR2-WAN1(config-if)#shut
</span></code></pre></td></tr></table></div></figure>


<p>Run the last scenario:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ansible-playbook cisco_tdd.yml
</span><span class='line'>Enter scenario number <span class="o">[</span>1<span class="o">]</span>: 4
</span><span class='line'>ok: <span class="o">[</span>DC-CORE<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;BR2-CORE&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;DC-WAN2&#39;</span>, <span class="s1">&#39;BR2-WAN2&#39;</span><span class="o">]})</span>
</span><span class='line'>ok: <span class="o">[</span>BR1-CORE<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;BR2-CORE&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;BR1-WAN2&#39;</span>, <span class="s1">&#39;BR2-WAN2&#39;</span><span class="o">]})</span>
</span><span class='line'>ok: <span class="o">[</span>BR2-CORE<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;DC-CORE&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;BR2-WAN2&#39;</span>, <span class="s1">&#39;DC-WAN2&#39;</span><span class="o">]})</span>
</span><span class='line'>ok: <span class="o">[</span>BR2-CORE<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;BR1-CORE&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;BR2-WAN2&#39;</span>, <span class="s1">&#39;BR1-WAN2&#39;</span><span class="o">]})</span>
</span></code></pre></td></tr></table></div></figure>


<p>All tests passed. Now the network at the new branch is behaving exactly as we expect it to.</p>

<h2>Conclusion</h2>

<p>The above scenario, of course, is a gross simplification of a real life, however the demonstrated approach can be applied to varied network topologies. The desired state may be achieved through not one but several red-green-refactor cycles. The benefit of using this approach is not only confidence that you haven&rsquo;t broken anything by fixing one particular failure condition scenario, but also for future growth and development, when new devices are added or traffic flows are modified, these same tests can be re-run to ensure that the agreed assumptions still hold.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verifying TDD Scenarios]]></title>
    <link href="http://networkop.github.io/blog/2015/07/10/test-verification/"/>
    <updated>2015-07-10T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/07/10/test-verification</id>
    <content type="html"><![CDATA[<p>Now that Ansible has done all the information gathering for us it&rsquo;s time to finally make use of it. In this post I will show how to use Ansible to run traceroutes from and to the hosts defined in a test scenario and perform verification of the results of those tests. Should any of those tests fail, Ansible will provide a meaningful description of what exactly failed and why. While doing all this I&rsquo;ll introduce a couple of new Ansible features like conditional looping and interactive prompts.</p>

<!--more-->


<h2>TDD Playbook</h2>

<p>In order to run and verify tests I will create a separate playbook. It makes sense to separate it from the <a href="http://networkop.github.io/blog/2015/07/03/parser-modules/">previous playbook</a> simply because this time it will be used multiple times, while the information gathering playbook can only be run once. The new playbook will have to accomplish the following tasks:</p>

<ol>
<li>Select which scenario to test</li>
<li>Run tests as specified in that scenario</li>
<li>Parse test results</li>
<li>Verify that test results conform to the specification</li>
</ol>


<h2>Selecting test scenario</h2>

<p>Our <code>scenarios/all.txt</code> file contains multiple test scenarios each defined by a name. Each test scenario represent a certain state in the network, e.g. scenario #1 tests how the network behaves in a normal state with no outages or link failures, scenario #2 tests how traffic should be rerouted in the event of primary link failure. Inside each scenario there are one or more test steps each testing a behaviour of a particular traffic flow, e.g. traffic from router R1 to router R4 should traverse R2 followed by R3. Each steps contains keywords <code>From</code>, <code>To</code> and <code>Via</code> which identify  source, destination and transit routers. This is how a typical scenario file looks like.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>~/tdd_ansible/scenarios/all.txt </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>1. Testing of Primary Link
</span><span class='line'>1.1 From R1 to R3 via R2
</span><span class='line'>1.2 From R1 to R4 via R2, R3
</span><span class='line'>1.3 From R2 to R4 via R3
</span><span class='line'>1.4 From R1 to R2 via R2
</span><span class='line'>2. Testing of Backup Link
</span><span class='line'>2.1 From R1 to R3 via R4
</span><span class='line'>2.2 From R1 to R2 via R4,R3
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>In the <a href="http://networkop.github.io/blog/2015/07/03/parser-modules/">previous post</a> I showed how to parse and store these scenarios in YAML dictionary in <code>group_vars/all.yml</code> file, which makes this information automatically available to any future playbooks. So in the new playbook all we need to do is let the user decide which scenario to test:</p>

<figure class='code'><figcaption><span>~/tdd_ansible/cisco_tdd.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Run traceroute commands</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco-devices</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">remote_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">vars_prompt</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">scenario_num</span>
</span><span class='line'>      <span class="l-Scalar-Plain">prompt</span><span class="p-Indicator">:</span> <span class="s">&quot;Enter</span><span class="nv"> </span><span class="s">scenario</span><span class="nv"> </span><span class="s">number&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span> <span class="s">&quot;1&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">private</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">no</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">extracting scenario name and steps</span>
</span><span class='line'>      <span class="l-Scalar-Plain">set_fact</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">scenario_steps</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">scenarios[scenario_num][1]</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">scenario_name</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">scenarios[scenario_num][0]</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This playbook contains a standard header followed by a <code>vars_prompt</code> section which prompts user to select a particular scenario number and stores the selection in <code>scenario_num</code> variable. The first task in the playbook extracts scenario name and steps from <code>scenarios</code> dictionary stored in <code>group_vars/all.yml</code> file and stores them in respective variables. Of course this task is optional and it&rsquo;s possible to reference the same data using full notation, however I prefer things to be more readable even if it leads to some inefficient memory use.</p>

<h2>Run test specified in scenario steps</h2>

<p>Now it&rsquo;s time to run traceroutes to see how the packets flow in the network. As we did in one of the <a href="http://networkop.github.io/blog/2015/06/24/ansible-intro/">previous posts</a> we&rsquo;ll use the <code>raw</code> module to run traceroutes. However this time, instead of running a full-mesh any-to-any traceroutes we&rsquo;ll only run them if they were defined in one of the test steps. Indeed, why would we run a traceroute between devices if we&rsquo;re not going to verify it? Ansible&rsquo;s conditionals will help us with that. For each of the hosts in <code>cisco-devices</code> group we&rsquo;ll look into scenario_steps dictionary and see if there were any tests defined and if there were, we&rsquo;ll run a traceroute to each of the destination hosts.</p>

<figure class='code'><figcaption><span>~/tdd_ansible/cisco_tdd.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">run traceroutes as per the defined scenario steps</span>
</span><span class='line'>  <span class="l-Scalar-Plain">raw</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">traceroute {{ hostvars[item.key][&#39;ansible_ssh_host&#39;] }} source Loopback0 probe 1 numeric</span>
</span><span class='line'>  <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">scenario_steps[inventory_hostname] is defined</span>
</span><span class='line'>  <span class="l-Scalar-Plain">with_dict</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">scenario_steps[inventory_hostname]|default({})</span>
</span><span class='line'>  <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">trace_result</span>
</span></code></pre></td></tr></table></div></figure>


<p>When both a loop (<code>with_dict</code>) and a conditional (<code>when</code>) are defined in a task, Ansible does the looping first. That&rsquo;s why if a test scenario is not defined for a particular host (e.g. <code>R3</code>) the conditional check will fail and stop execution of the playbook. To overcome that we can use Ansible (Jinja) templates inside the <code>with_dict</code> loop. Appending <code>|default({})</code> will instruct Ansible create an empty dictionary in case <code>scenario_steps[inventory_hostname]</code> does not exist which will make conditional return <code>False</code> and skip this host altogether.</p>

<h2>Parse test results</h2>

<p>There&rsquo;s no silver bullet when it comes to parsing of the outcome of traceroute command. We&rsquo;ll have to use Python to traverse the textual output line by line looking for <code>msec</code> and storing all found IPs in a list.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>~/tdd_ansible/library/cisco_trace_parse.py </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TraceParse</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">module</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">std_out</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;std_out&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;dest_host&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>        <span class="n">path</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">std_out</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&#39;msec&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>                <span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="n">result</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span><span class="p">]</span> <span class="o">=</span> <span class="n">path</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">module</span> <span class="o">=</span> <span class="n">AnsibleModule</span><span class="p">(</span>
</span><span class='line'>        <span class="n">argument_spec</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>            <span class="n">std_out</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;str&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">dest_host</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;str&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">traceParser</span> <span class="o">=</span> <span class="n">TraceParse</span><span class="p">(</span><span class="n">module</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">traceParser</span><span class="o">.</span><span class="n">parse</span><span class="p">()</span>
</span><span class='line'>    <span class="n">module</span><span class="o">.</span><span class="n">exit_json</span><span class="p">(</span><span class="n">changed</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">ansible_facts</span><span class="o">=</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># import module snippets</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">ansible.module_utils.basic</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The playbook task will run through each hosts' trace_results variable and pass it to the trace parse module.</p>

<figure class='code'><figcaption><span>~/tdd_ansible/cisco_tdd.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">parse traceroute ouput</span>
</span><span class='line'>  <span class="l-Scalar-Plain">cisco_trace_parse</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">dest_host</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">item.item.key</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">std_out</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">item.stdout</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">connection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">local</span>
</span><span class='line'>  <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">item.stdout is defined</span>
</span><span class='line'>  <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">trace_result.results</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Test verification</h2>

<p>Finally we need to compare the captured output with the scenario steps. This time all the information collected by Ansible in the previous tasks needs to be passed to a module.</p>

<figure class='code'><figcaption><span>~/tdd_ansible/cisco_tdd.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">verify traceroutes against pre-defined scenarios</span>
</span><span class='line'>  <span class="l-Scalar-Plain">cisco_tdd_verify</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">dest_host</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">item.key</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">src_host</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">inventory_hostname</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">scenario</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">scenario_steps</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ip2host</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">ip2host</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">hostvars[inventory_hostname][item.key]</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">scenario_name</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">scenario_name</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">scenario_steps[inventory_hostname] is defined</span>
</span><span class='line'>  <span class="l-Scalar-Plain">with_dict</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">scenario_steps[inventory_hostname]|default({})</span>
</span><span class='line'>  <span class="l-Scalar-Plain">connection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">local</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ansible module contains a class with a single public method <code>compare</code>. The first thing it does is converts the list of IP addresses of transit devices into a list of hostnames. That&rsquo;s where the IP-to-Hostname dictionary created in the <a href="http://networkop.github.io/blog/2015/07/03/parser-modules/">previous playbook</a> is first used. IP address is used as a lookup key and the Hostname is extracted from the first element of the returned list (second element, the interface name, is currently unused). The private method <code>__validatepath</code> is used to confirm that devices listed after <code>Via</code> in a test scenario are present in the traceroute path in the specified order. If this verification fails, the whole module fails and the error message is passed back to Ansible playbook.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>~/tdd_ansible/library/cisco_tdd_verify.py </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ResultCompare</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">module</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;dest_host&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">src_host</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;src_host&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">trace_path</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;path&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ref_scenario</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;scenario&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ip2host</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;ip2host&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">scenario_name</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;scenario_name&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">compare</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">trace_path_new</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">dev</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">trace_path</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">dev</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ip2host</span><span class="p">:</span>
</span><span class='line'>                <span class="n">trace_path_new</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ip2host</span><span class="p">[</span><span class="n">dev</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">trace_path_new</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dev</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">src_host</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ref_scenario</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ref_scenario</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">src_host</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">ref_path</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ref_scenario</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">src_host</span><span class="p">][</span><span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span><span class="p">]</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span> <span class="n">__validatepath</span><span class="p">(</span><span class="n">trace_path_new</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">msg</span> <span class="o">=</span> <span class="s">&quot;Failed scenario &quot;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">scenario_name</span> <span class="o">+</span>  <span class="s">&quot;.</span><span class="se">\r\n</span><span class="s">Traceroute from &quot;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">src_host</span> <span class="o">+</span> <span class="s">&quot; to &quot;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span> <span class="o">+</span> <span class="s">&quot; has not traversed &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">ref_path</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">msg</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\r\n</span><span class="s"> Actual path taken: &quot;</span> <span class="o">+</span> <span class="s">&#39; -&gt; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="bp">self</span><span class="o">.</span><span class="n">src_host</span><span class="p">]</span> <span class="o">+</span> <span class="n">trace_path_new</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span>
</span><span class='line'>                    <span class="k">return</span> <span class="mi">1</span><span class="p">,</span> <span class="n">msg</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;no error&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__validatepath</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
</span><span class='line'>        <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">device</span> <span class="ow">in</span> <span class="n">path</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">device</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">ref_scenario</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">src_host</span><span class="p">][</span><span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span><span class="p">][</span><span class="n">index</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ref_scenario</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">src_host</span><span class="p">][</span><span class="bp">self</span><span class="o">.</span><span class="n">dest_host</span><span class="p">]):</span>
</span><span class='line'>                    <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">module</span> <span class="o">=</span> <span class="n">AnsibleModule</span><span class="p">(</span>
</span><span class='line'>        <span class="n">argument_spec</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>            <span class="n">dest_host</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;str&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">src_host</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;str&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">scenario</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;dict&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">ip2host</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;dict&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">path</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;list&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">scenario_name</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;str&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">comparator</span> <span class="o">=</span> <span class="n">ResultCompare</span><span class="p">(</span><span class="n">module</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rc</span><span class="p">,</span> <span class="n">error</span> <span class="o">=</span> <span class="n">comparator</span><span class="o">.</span><span class="n">compare</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="n">fail_json</span><span class="p">(</span><span class="n">msg</span><span class="o">=</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="n">exit_json</span><span class="p">(</span><span class="n">changed</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">ansible.module_utils.basic</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>TDD in action</h2>

<p>So let&rsquo;s finally see the whole thing action. First let&rsquo;s modify a <a href="http://networkop.github.io/blog/2015/06/17/dev-env-setup/">4-router topology</a> so that traffic from R1 to R4 is routed via R2 and R3 (a simple <code>delay 9999</code> on Ethernet0/1 will do). Now let&rsquo;s run the first scenario and verify that no errors are displayed.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>Scenario 1 successful </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>
</span><span class='line'>~/tdd_ansible# ansible-playbook cisco_tdd.yml
</span><span class='line'>Enter scenario number <span class="o">[</span>1<span class="o">]</span>:
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>Run traceroute commands<span class="o">]</span> ************************************************
</span><span class='line'>...
</span><span class='line'>PLAY RECAP ********************************************************************
</span><span class='line'>R1                         : <span class="nv">ok</span><span class="o">=</span><span class="m">4</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R2                         : <span class="nv">ok</span><span class="o">=</span><span class="m">4</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R3                         : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R4                         : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>Nothing much really, which is good, that means all scenarios were verified successfully. Now let&rsquo;s see how it fails. The easiest way is to run the tests from a second scenario, the one that assumes that the link between R1 and R2 failed and all the traffic is routed via R4.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>Scenario 2 failed </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/tdd_ansible# ansible-playbook cisco_tdd.yml
</span><span class='line'>Enter scenario number <span class="o">[</span>1<span class="o">]</span>: 2
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>Run traceroute commands<span class="o">]</span> ************************************************
</span><span class='line'>...
</span><span class='line'>TASK: <span class="o">[</span>verify traceroutes against pre-defined scenarios<span class="o">]</span> **********************
</span><span class='line'>skipping: <span class="o">[</span>R2<span class="o">]</span>
</span><span class='line'>skipping: <span class="o">[</span>R4<span class="o">]</span>
</span><span class='line'>failed: <span class="o">[</span>R1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;R4&#39;</span>, <span class="s1">&#39;R3&#39;</span><span class="o">]})</span> <span class="o">=</span>&gt; <span class="o">{</span><span class="s2">&quot;failed&quot;</span>: <span class="nb">true</span>, <span class="s2">&quot;item&quot;</span>: <span class="o">{</span><span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;R2&quot;</span>, <span class="s2">&quot;value&quot;</span>: <span class="o">[</span><span class="s2">&quot;R4&quot;</span>, <span class="s2">&quot;R3&quot;</span><span class="o">]}}</span>
</span><span class='line'>msg: Failed scenario Testing of Backup Link.
</span><span class='line'>Traceroute from R1 to R2 has not traversed <span class="o">[</span><span class="s1">&#39;R4&#39;</span>, <span class="s1">&#39;R3&#39;</span><span class="o">]</span>
</span><span class='line'> Actual path taken: R1 -&gt; R2
</span><span class='line'>
</span><span class='line'>failed: <span class="o">[</span>R3<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R1&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;R4&#39;</span><span class="o">]})</span> <span class="o">=</span>&gt; <span class="o">{</span><span class="s2">&quot;failed&quot;</span>: <span class="nb">true</span>, <span class="s2">&quot;item&quot;</span>: <span class="o">{</span><span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;R1&quot;</span>, <span class="s2">&quot;value&quot;</span>: <span class="o">[</span><span class="s2">&quot;R4&quot;</span><span class="o">]}}</span>
</span><span class='line'>msg: Failed scenario Testing of Backup Link.
</span><span class='line'>Traceroute from R3 to R1 has not traversed <span class="o">[</span><span class="s1">&#39;R4&#39;</span><span class="o">]</span>
</span><span class='line'> Actual path taken: R3 -&gt; R2 -&gt; R1
</span><span class='line'>
</span><span class='line'>failed: <span class="o">[</span>R1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R3&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="o">[</span><span class="s1">&#39;R4&#39;</span><span class="o">]})</span> <span class="o">=</span>&gt; <span class="o">{</span><span class="s2">&quot;failed&quot;</span>: <span class="nb">true</span>, <span class="s2">&quot;item&quot;</span>: <span class="o">{</span><span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;R3&quot;</span>, <span class="s2">&quot;value&quot;</span>: <span class="o">[</span><span class="s2">&quot;R4&quot;</span><span class="o">]}}</span>
</span><span class='line'>msg: Failed scenario Testing of Backup Link.
</span><span class='line'>Traceroute from R1 to R3 has not traversed <span class="o">[</span><span class="s1">&#39;R4&#39;</span><span class="o">]</span>
</span><span class='line'> Actual path taken: R1 -&gt; R2 -&gt; R3
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>PLAY RECAP ********************************************************************
</span><span class='line'>           to retry, use: --limit @/root/cisco_tdd.retry
</span><span class='line'>
</span><span class='line'>R1                         : <span class="nv">ok</span><span class="o">=</span><span class="m">3</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>1
</span><span class='line'>R2                         : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R3                         : <span class="nv">ok</span><span class="o">=</span><span class="m">3</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>1
</span><span class='line'>R4                         : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>Here all 3 test steps within a scenario failed. Ansible displayed error messages passed down by our module, specifying the expected and the actual path.<br/>
Now if we simply shutdown Ethernet0/0 of R1 to simulate a link failure and re-run the same scenario all tests will succeed again.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>Scenario 2 successful </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/tdd_ansible# ansible-playbook cisco_tdd.yml
</span><span class='line'>Enter scenario number <span class="o">[</span>1<span class="o">]</span>: 2
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>Run traceroute commands<span class="o">]</span> ************************************************
</span><span class='line'>...
</span><span class='line'>PLAY RECAP ********************************************************************
</span><span class='line'>R1                         : <span class="nv">ok</span><span class="o">=</span><span class="m">4</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R2                         : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R3                         : <span class="nv">ok</span><span class="o">=</span><span class="m">4</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R4                         : <span class="nv">ok</span><span class="o">=</span><span class="m">2</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>So there it is, a working network TDD framework in action. I still haven&rsquo;t covered a lot of corner cases (e.g. when traceroute times out) and deployment scenarios (device with VRFs) but it should still work for a lot of scenarios and can be easily extended to cover those corner cases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IP Address Information Collection With Custom Ansible Modules]]></title>
    <link href="http://networkop.github.io/blog/2015/07/03/parser-modules/"/>
    <updated>2015-07-03T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/07/03/parser-modules</id>
    <content type="html"><![CDATA[<p>Ansible has a very neat feature called &ldquo;fact gathering&rdquo;, which collects useful information from hosts prior to executing any of the tasks and makes this information available for use within those tasks. Unfortunately, this also relies on Python being available on the remote machine which doesn&rsquo;t work for Cisco IOS. In this post I&rsquo;ll show how to write a simple module which will collect IP address information from remote devices and store it in global variable for future use. I&rsquo;ll also show how to write a module which will convert our human-readable TDD scenarios into YAML structures. As always, full code repository is available on <a href="https://github.com/networkop/simple-cisco-tdd">Github</a></p>

<!--more-->


<h2>Cisco IOS IP fact gathering</h2>

<p>In order to recognise that a traceroute has traversed a certain device, without relying on DNS, we need to populate a local database mapping IP addresses to their respective devices. The resulting database (or YAML dictionary) needs to be stored in a file so that it can be read and used again by Ansible tasks doing the traceroute verification. In order to make it happen, we need to answer the following questions:</p>

<ul>
<li>How to get IP address information from each device?</li>
</ul>


<blockquote><p>The most straight-forward way is to capture the result of running something like <code>show ip interface brief</code> and parse the output. The assumption is that all devices are living in a non-overlapping IP address space (however it is possible to modify the examples to be vrf-aware).</p></blockquote>

<ul>
<li>Where to store the information?</li>
</ul>


<blockquote><p>Ideally, we would need a hash-like data structure (e.g. python dictionary) which will return a hostname when given a certain IP address. This data structure needs to be available to all hosts, however most of the variables in Ansible are host-specific. The only way to simulate a global variable in Ansible is to store all data in <code>group_vars/all.yml</code> file which is exactly what our module will do.</p></blockquote>

<ul>
<li>How will multiple processes write into a single file at the same time?</li>
</ul>


<blockquote><p>That&rsquo;s where Ansible&rsquo;s concurrency feature bites back. This is a well known computer science problem and the solution to this is to use <code>mutex</code>, however that&rsquo;s beyond what Ansible can do. In order to overcome that, I&rsquo;ll make Ansible do the tasks sequentially, which will dramatically slow things down for bigger environments. However, this task only needs to be run once, to collect the data, while all the other tasks can be run in parallel, in separate playbooks.</p></blockquote>

<h2>Developing Ansible playbook</h2>

<p>Our Ansible playbook will need to accomplish the following tasks:</p>

<ol>
<li>Capture the output <code>show ip interface brief</code> command</li>
<li>Parse the output capture in the previous step</li>
<li>Save the output in a <code>group_vars/all.yml</code> file</li>
</ol>


<p>All these tasks will need to be run sequentially on every host from <code>cisco-devices</code> group. To get the output from a Cisco device we&rsquo;ll use the <code>raw</code> module again. The other two tasks don&rsquo;t require connection to remote device and will be run on a localhost by the virtue of a <code>delegate_to: 127.0.0.1</code> option.</p>

<figure class='code'><figcaption><span>~/tdd_ansible/cisco-ip-collect.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Collect IP address data</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco-devices</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">remote_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco</span>
</span><span class='line'>  <span class="l-Scalar-Plain">serial</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">capture show ip interface brief</span>
</span><span class='line'>      <span class="l-Scalar-Plain">raw</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">show ip interface brief | exclude unassigned</span>
</span><span class='line'>      <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">siib_text</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">parse the output of &quot;show ip interface brief&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">cisco_ip_intf_facts_collect</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">output_text=&quot;{{ siib_text.stdout }}&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">delegate_to</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">127.0.0.1</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">combine ip address facts and save as a global variable</span>
</span><span class='line'>      <span class="l-Scalar-Plain">cisco_ip_intf_facts_combine</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">ipTable=&quot;{{ IPs }}&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">hostname=&quot;{{ inventory_hostname }}&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">delegate_to</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">127.0.0.1</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">collect</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Writing a custom Ansible module</h2>

<p>Ansible has an <a href="http://docs.ansible.com/developing_modules.html">official guide</a> on module development. A typical module will contain a header with license information along with module documentation and usage examples, a <code>main()</code> function processing the arguments passed to this module from Ansible and, of course, the actual code that implements module&rsquo;s logic. For the sake of brevity I will omit the header and some of the less important details in the code.</p>

<h2>Ansible module to parse command output</h2>

<p>This ansible module needs to extract IP address and, optionally, interface name from the output of <code>show ip interface brief</code> and store it in a python dictionary. The right way to examine the module code is from <code>main()</code> function. This function will contain a <code>module</code> variable (instance of AnsibleModule) which specifies all the arguments expected by this module and their type (the type will be converted to the appropriate python type). Text parser is implemented with a <code>SIIBparse</code> class whose only public method <code>parse()</code> will traverse the text line by line looking for interfaces with Line Protocol in <code>up</code> state, extract IP address (1st column), interface name (2nd column) and store the result in a python dictionary with IP address as the key and interface name as it&rsquo;s value.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>~/tdd_ansible/library/cisco_ip_intf_facts_collect.py </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SIIBparse</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">module</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">output_text</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;output_text&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ip2intf</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">output_text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">row</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">row</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;up&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">ipAddress</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                <span class="n">intfName</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">ip2intf</span><span class="p">[</span><span class="n">ipAddress</span><span class="p">]</span> <span class="o">=</span> <span class="n">intfName</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&quot;IPs&quot;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">ip2intf</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">rc</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ip2intf</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">rc</span><span class="p">,</span> <span class="n">result</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">module</span> <span class="o">=</span> <span class="n">AnsibleModule</span><span class="p">(</span>
</span><span class='line'>        <span class="n">argument_spec</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>            <span class="n">output_text</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;str&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">siib</span> <span class="o">=</span> <span class="n">SIIBparse</span><span class="p">(</span><span class="n">module</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rc</span><span class="p">,</span> <span class="n">result</span> <span class="o">=</span> <span class="n">siib</span><span class="o">.</span><span class="n">parse</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="n">fail_json</span><span class="p">(</span><span class="n">msg</span><span class="o">=</span><span class="s">&quot;Failed to parse. Incorrect input.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="n">exit_json</span><span class="p">(</span><span class="n">changed</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">ansible_facts</span><span class="o">=</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># import module snippets</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">ansible.module_utils.basic</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>If information passed to the module in the argument was invalid, the module must fail with a meaningful message passed inside a <code>fail_json</code> method call. When parsing is complete, our module exits and the resulting data structure is passed back to Ansible variables with <code>ansible_facts</code> argument. Now all hosts can access it through variable called <code>IPs</code>.</p>

<h2>Ansible module to save IP address information</h2>

<p>The task of this module is to get all the information collected inside each hosts' <code>IPs</code> variables, combine it with devices' hostnames and save it in the <code>group_vars/all.yml</code> file. This module makes use of <a href="http://pyyaml.org/wiki/PyYAMLDocumentation">Python&rsquo;s yaml library</a>. Built-in class <code>FactUpdater</code> can read(), update() the contents and write() the global variable file defined in a <code>FILENAME</code> variable.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>~/tdd_ansible/library/cisco_ip_intf_facts_combine.py </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">yaml</span>
</span><span class='line'><span class="n">FILENAME</span><span class="o">=</span><span class="s">&quot;group_vars/all.yml&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FactUpdater</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">module</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ip2intf</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;ipTable&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;hostname&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;ip2host&#39;</span><span class="p">:{}}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">FILENAME</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fileObj</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">fileObj</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># in case there is no file - create it</span>
</span><span class='line'>            <span class="nb">open</span><span class="p">(</span><span class="n">FILENAME</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">FILENAME</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fileObj</span><span class="p">:</span>
</span><span class='line'>            <span class="n">yaml</span><span class="o">.</span><span class="n">safe_dump</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">file_content</span><span class="p">,</span> <span class="n">fileObj</span><span class="p">,</span> <span class="n">explicit_start</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">allow_unicode</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="s">&#39;ip2host&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span><span class="p">[</span><span class="s">&#39;ip2host&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">ip</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ip2intf</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span><span class="p">[</span><span class="s">&#39;ip2host&#39;</span><span class="p">][</span><span class="n">ip</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">hostname</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">ip2intf</span><span class="p">[</span><span class="n">ip</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">module</span> <span class="o">=</span> <span class="n">AnsibleModule</span><span class="p">(</span>
</span><span class='line'>        <span class="n">argument_spec</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>            <span class="n">ipTable</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;dict&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">hostname</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;str&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="n">factUpdater</span> <span class="o">=</span> <span class="n">FactUpdater</span><span class="p">(</span><span class="n">module</span><span class="p">)</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">factUpdater</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>        <span class="n">factUpdater</span><span class="o">.</span><span class="n">update</span><span class="p">()</span>
</span><span class='line'>        <span class="n">factUpdater</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="n">fail_json</span><span class="p">(</span><span class="n">msg</span><span class="o">=</span><span class="s">&quot;Unexpected error: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">module</span><span class="o">.</span><span class="n">exit_json</span><span class="p">(</span><span class="n">changed</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># import module snippets</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">ansible.module_utils.basic</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This module only performs actions on local file and does not provide any output back to Ansible.</p>

<h2>Read and parse TDD scenarios</h2>

<p>Finally, since we&rsquo;re modifying Ansible global variable file, it would make sense to also update it with testing scenarios information. Technically, this steps doesn&rsquo;t need to be done in Ansible and could be done simply using Python or Bash scripts, but I&rsquo;ll still show it here to demonstrate two additional Ansible features. The first one is <code>local_action: module_name</code> which is a shorthand for specifying <code>module</code> with <code>delegate_to</code> option (see above). Second feature is <code>tags</code>, it allows to specify which play to run in playbook containing many of them. In our case one file <code>cisco-ip-collect.yml</code> will have two plays defined and will run both of them by default unless <code>--tag=scenario</code> or <code>--tag=collect</code> specifies the exact play.</p>

<figure class='code'><figcaption><span>~/tdd_ansible/cisco-ip-collect.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Parse and save scenarios</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">parse scenario file and save it in group_vars/all.yml</span>
</span><span class='line'>      <span class="l-Scalar-Plain">local_action</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco_scenarios_convert</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">scenario</span>
</span></code></pre></td></tr></table></div></figure>


<p>This play has a single task which runs a single custom module. Before we proceed to the module let&rsquo;s see how a typical testing scenario file looks like.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>~/tdd_ansible/scenarios/all.txt </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>1. Testing of Primary Link
</span><span class='line'>1.1 From R1 to R3 via R2
</span><span class='line'>1.2 From R1 to R4 via R2, R3
</span><span class='line'>2. Testing of Backup Link
</span><span class='line'>2.1 From R1 to R3 via R4
</span><span class='line'>2.2 From R1 to R2 via R4,R3
</span></code></pre></td></tr></table></div></figure>


<p>The file should be stored in a <code>scenarios/</code> directory and should have a name <code>all.txt</code>. This file contains a list of scenarios, each with its own name, and a list of test steps that need to be performed to validate a particular scenario. The parser for this file is a custom Python module which opens and reads the contents of <code>group_vars/all.yml</code> file, parses the scenarios file with the help of some ugly-looking regular expressions, and, finally, updates and saves the contents of Ansible group variable back to file.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>~/tdd_ansible/library/cisco_scenarios_convert.py </h3></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">yaml</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="n">SCENARIO_FILE</span> <span class="o">=</span> <span class="s">&quot;scenarios/all.txt&quot;</span>
</span><span class='line'><span class="n">GROUP_VAR_FILE</span> <span class="o">=</span> <span class="s">&quot;group_vars/all.yml&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ScenarioParser</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">rc</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">storage</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>       <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">GROUP_VAR_FILE</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fileObj</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">fileObj</span><span class="p">)</span>
</span><span class='line'>       <span class="k">except</span><span class="p">:</span>
</span><span class='line'>           <span class="nb">open</span><span class="p">(</span><span class="n">GROUP_VAR_FILE</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">scenario_number</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">scenario_step</span>   <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">scenario_name</span>   <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>        <span class="n">name_pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;^(\d+)\.?\s+(.*)&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">step_pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;.*[Ff][Rr][Oo][Mm]\s+([\d\w]+)\s+[Tt][Oo]\s+([\d\w]+)\s+[Vv][Ii][Aa]\s+([\d\w]+,*\s*[\d\w]+)*&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">SCENARIO_FILE</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fileObj</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fileObj</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;#&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">name_match</span> <span class="o">=</span> <span class="n">name_pattern</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">step_match</span> <span class="o">=</span> <span class="n">step_pattern</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">name_match</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">scenario_number</span> <span class="o">=</span> <span class="n">name_match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">scenario_name</span>   <span class="o">=</span> <span class="n">name_match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">scenario_steps</span>  <span class="o">=</span> <span class="p">[</span><span class="n">scenario_name</span><span class="p">,</span> <span class="p">{}]</span>
</span><span class='line'>                        <span class="k">if</span> <span class="ow">not</span> <span class="n">scenario_number</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">storage</span><span class="p">:</span>
</span><span class='line'>                            <span class="bp">self</span><span class="o">.</span><span class="n">storage</span><span class="p">[</span><span class="n">scenario_number</span><span class="p">]</span> <span class="o">=</span> <span class="n">scenario_steps</span>
</span><span class='line'>                        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                            <span class="n">scenario_steps</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">storage</span><span class="p">[</span><span class="n">scenario_number</span><span class="p">]</span>
</span><span class='line'>                    <span class="k">elif</span> <span class="n">step_match</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">from_device</span> <span class="o">=</span> <span class="n">step_match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">to_device</span> <span class="o">=</span> <span class="n">step_match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">via</span> <span class="o">=</span> <span class="n">step_match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">via_devices</span> <span class="o">=</span> <span class="p">[</span><span class="n">device_name</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">device_name</span> <span class="ow">in</span> <span class="n">via</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)]</span>
</span><span class='line'>                        <span class="k">if</span> <span class="ow">not</span> <span class="n">scenario_number</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">scenario_name</span><span class="p">:</span>
</span><span class='line'>                            <span class="k">if</span> <span class="ow">not</span> <span class="n">from_device</span> <span class="ow">in</span> <span class="n">scenario_steps</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>                                <span class="n">scenario_steps</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">from_device</span><span class="p">]</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>                            <span class="n">scenario_steps</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">from_device</span><span class="p">][</span><span class="n">to_device</span><span class="p">]</span> <span class="o">=</span> <span class="n">via_devices</span>
</span><span class='line'>                    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">rc</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>       <span class="bp">self</span><span class="o">.</span><span class="n">file_content</span><span class="p">[</span><span class="s">&#39;scenarios&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">storage</span>
</span><span class='line'>       <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>           <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">GROUP_VAR_FILE</span><span class="p">,</span> <span class="s">&#39;w+&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fileObj</span><span class="p">:</span>
</span><span class='line'>               <span class="n">yaml</span><span class="o">.</span><span class="n">safe_dump</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">file_content</span><span class="p">,</span> <span class="n">fileObj</span><span class="p">,</span> <span class="n">explicit_start</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">allow_unicode</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">module</span> <span class="o">=</span> <span class="n">AnsibleModule</span><span class="p">(</span><span class="n">argument_spec</span><span class="o">=</span><span class="nb">dict</span><span class="p">())</span>
</span><span class='line'>    <span class="n">parser</span> <span class="o">=</span> <span class="n">ScenarioParser</span><span class="p">()</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">parser</span><span class="o">.</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="n">fail_json</span><span class="p">(</span><span class="n">msg</span><span class="o">=</span><span class="s">&quot;Failed to parse. Incorrect input.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">module</span><span class="o">.</span><span class="n">exit_json</span><span class="p">(</span><span class="n">changed</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">ansible.module_utils.basic</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The biggest portion of code is the read() method of the parser which does the following:</p>

<ul>
<li>scans text file line by line ignoring lines starting with <code>#</code> and whose length is not enough to contain either a scenario name or scenario step</li>
<li>matches each line against pre-compiled regular expressions for scenario name or for scenario step (<a href="https://regex101.com/">a very helpful tool for regex testing</a>)</li>
<li>attempts to save the data in a Python dictionary whose keys are scenario numbers and whose values is a list consisting of a scenario name (1st element) and a dictionary with scenario steps (2nd element)</li>
</ul>


<p>The end result of running both ip address collection and scenarios conversion plays is Ansible group variable file that looks like this:</p>

<figure class='code'><figcaption><span>~/tdd_ansible/library/group_vars/all.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">ip2host</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="l-Scalar-Plain">10.0.0.1</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R1</span><span class="p-Indicator">,</span> <span class="nv">Loopback0</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">10.0.0.2</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R2</span><span class="p-Indicator">,</span> <span class="nv">Loopback0</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">10.0.0.3</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R3</span><span class="p-Indicator">,</span> <span class="nv">Loopback0</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">10.0.0.4</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R4</span><span class="p-Indicator">,</span> <span class="nv">Loopback0</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">12.12.12.1</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R1</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/0</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">12.12.12.2</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R2</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/0</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">14.14.14.1</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R1</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/1</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">14.14.14.4</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R4</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/1</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">192.168.247.25</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R1</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/2</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">23.23.23.2</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R3</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/0</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">34.34.34.3</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R3</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/1</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="l-Scalar-Plain">34.34.34.4</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R4</span><span class="p-Indicator">,</span> <span class="nv">Ethernet0/0</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="l-Scalar-Plain">scenarios</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="s">&#39;1&#39;</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Testing of Primary Link</span>
</span><span class='line'>   <span class="p-Indicator">-</span>  <span class="l-Scalar-Plain">R1</span><span class="p-Indicator">:</span>
</span><span class='line'>         <span class="l-Scalar-Plain">R2</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R2</span><span class="p-Indicator">]</span>
</span><span class='line'>         <span class="l-Scalar-Plain">R3</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R2</span><span class="p-Indicator">]</span>
</span><span class='line'>         <span class="l-Scalar-Plain">R4</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R2</span><span class="p-Indicator">,</span> <span class="nv">R3</span><span class="p-Indicator">]</span>
</span><span class='line'>      <span class="l-Scalar-Plain">R2</span><span class="p-Indicator">:</span>
</span><span class='line'>         <span class="l-Scalar-Plain">R4</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R3</span><span class="p-Indicator">]</span>
</span><span class='line'>   <span class="s">&#39;2&#39;</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Testing of Backup Link</span>
</span><span class='line'>   <span class="p-Indicator">-</span>  <span class="l-Scalar-Plain">R1</span><span class="p-Indicator">:</span>
</span><span class='line'>         <span class="l-Scalar-Plain">R2</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R4</span><span class="p-Indicator">,</span> <span class="nv">R3</span><span class="p-Indicator">]</span>
</span><span class='line'>         <span class="l-Scalar-Plain">R3</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R4</span><span class="p-Indicator">]</span>
</span><span class='line'>      <span class="l-Scalar-Plain">R3</span><span class="p-Indicator">:</span>
</span><span class='line'>         <span class="l-Scalar-Plain">R1</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">R4</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>The next post, final in a series, will show how to write an Ansible play to validate TDD scenarios and produce a meaningful error message in case it fails.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Ansible for Cisco IOS]]></title>
    <link href="http://networkop.github.io/blog/2015/06/24/ansible-intro/"/>
    <updated>2015-06-24T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/06/24/ansible-intro</id>
    <content type="html"><![CDATA[<p>Ansible is well-known for it&rsquo;s low entry threshold. All what&rsquo;s required to get started is just one inventory file. However Cisco IOS devices require special considerations.
Passwordless SSH RSA-based authentication is still a novelty and in most cases users are authenticated based on their passwords. Another problem is the lack of Python execution
environment on IOS devices, which seriously limits the choice of Ansible modules that can be used. In this post I will show how to setup Ansible
environment to control Cisco IOS devices</p>

<!--more-->


<h2>Ansible overview</h2>

<p>There&rsquo;s been a lot written about what Ansible is and what it was built to accomplish. I will just provide a brief summary of its features focusing on what we&rsquo;re gonna be using it for, leaving an in-depth explanation to the official <a href="http://docs.ansible.com/">Ansible documentation</a>.</p>

<ul>
<li>What is it?</li>
</ul>


<blockquote><p>Ansible is an IT automation and orchestration framework</p></blockquote>

<ul>
<li>What was it built to accomplish?</li>
</ul>


<blockquote><p>Ansible was designed to automate routine tasks like server/application deployment and configuration</p></blockquote>

<ul>
<li>How does it work?</li>
</ul>


<blockquote><p>It connects to several hosts at the same time and executes small programs called &ldquo;modules&rdquo; in the order specified in a file called &ldquo;playbook&rdquo;</p></blockquote>

<p>To build what we&rsquo;ve set out to accomplish I&rsquo;m gonna be using the latter feature. I am not gonna be using Ansible for system provisioning or service orchestration. Instead, I will be exploiting Ansible&rsquo;s ability to run multiple parallel connections to remote hosts, execute commands on them and return their result. Due to that, I will diverge from some of the <a href="https://docs.ansible.com/playbooks_best_practices.html">Ansible&rsquo;s best practices</a> of splitting functions into roles and I will use one flat playbook file segregating different functions with tags.</p>

<h2>Ansible configuration file</h2>

<p>Ansible configuration file <code>ansible.cfg</code> contains <a href="http://docs.ansible.com/intro_configuration.html">application-wide settings</a> like default timeouts, port numbers and other flags. The default Ansible configuration file is located in <code>/etc/ansible/</code> directory. However, instead of overwriting the defaults it is possible to create a configuration file in a local directory with only the settings that need to be overridden. To better work with Cisco devices the following settings will need to be modified:</p>

<ul>
<li>Default SSH library (transport) needs to be set to <code>paramiko</code> which is more stable than its alternative, OpenSSH, when working with Cisco IOS.</li>
<li>For a small project it is easier to maintain a local copy of inventory file which is configured with <code>hostfile</code> setting.</li>
<li>Strict SSH key checking is a MUST in every production environment, however, for development environment an exception can be made.</li>
<li>Default SSH timeout is decreased to 5 seconds reflecting a small size of the testing environment.</li>
</ul>


<figure class='code'><figcaption><span>~/tdd_ansible/ansible.cfg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>defaults<span class="o">]</span>
</span><span class='line'><span class="nv">transport</span><span class="o">=</span>paramiko
</span><span class='line'><span class="nv">hostfile</span> <span class="o">=</span> ./myhosts
</span><span class='line'><span class="nv">host_key_checking</span><span class="o">=</span>False
</span><span class='line'><span class="nv">timeout</span> <span class="o">=</span> 5
</span></code></pre></td></tr></table></div></figure>


<h2>Inventory file</h2>

<p>Inventory contains the list of hosts to be managed by Ansible. Hosts are normally combined into groups (<code>cisco-devices</code> in our case) and Ansible performs actions on all hosts in the group in parallel.</p>

<figure class='code'><figcaption><span>~/tdd_ansible/myhosts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>cisco-devices<span class="o">]</span>
</span><span class='line'>R1
</span><span class='line'>R2
</span><span class='line'>R3
</span><span class='line'>R4
</span></code></pre></td></tr></table></div></figure>


<p>It is considered a <a href="https://docs.ansible.com/playbooks_best_practices.html#group-and-host-variables">best practice</a> to keep all variables in separate folders and files. We need to define additional host variables to let Ansible know which IP address to use to connect to a remote device. I will also add SSH password to a host variable file which is a VERY bad practice, however this will prevent me from typing password every time I run a playbook. If I ever did this in production, I&rsquo;d add host variables directory to <code>.gitignore</code> file so that it doesn&rsquo;t get uploaded to Github. Host variables files must follow YAML formatting, must be stored in a <code>./host_vars</code> directory and must match the name of the host they are being assigned to.</p>

<figure class='code'><figcaption><span>~/tdd_ansible/host_vars/R1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">ansible_ssh_host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">10.0.0.1</span>
</span><span class='line'><span class="l-Scalar-Plain">ansible_ssh_pass</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similar files need to be created for R2, R3 and R4.</p>

<h2>Run a test traceroute commands</h2>

<p>Now it is time to finally see Ansible in action. Let&rsquo;s first see if we can run a standalone traceroute command. I will manually define SSH username with <code>-u</code> flag and use a module called <code>raw</code> passing traceroute command as an argument with <code>-a</code> option.</p>

<figure class='code'><figcaption><span>Ad-hoc traceroute command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ansible cisco-devices -u cisco -m raw -a <span class="s2">&quot;traceroute 10.0.0.4 source Loopback0 probe 1 numeric&quot;</span>
</span><span class='line'>SSH password:
</span><span class='line'>R1 <span class="p">|</span> success <span class="p">|</span> <span class="nv">rc</span><span class="o">=</span><span class="m">0</span> &gt;&gt;
</span><span class='line'>
</span><span class='line'>Type escape sequence to abort.
</span><span class='line'>Tracing the route to 10.0.0.4
</span><span class='line'>VRF info: <span class="o">(</span>vrf in name/id, vrf out name/id<span class="o">)</span>
</span><span class='line'>  <span class="m">1</span> 14.14.14.4 <span class="m">0</span> msec *  <span class="m">0</span> msec
</span><span class='line'>
</span><span class='line'>R2 <span class="p">|</span> success <span class="p">|</span> <span class="nv">rc</span><span class="o">=</span><span class="m">0</span> &gt;&gt;
</span><span class='line'>
</span><span class='line'>Type escape sequence to abort.
</span><span class='line'>Tracing the route to 10.0.0.4
</span><span class='line'>VRF info: <span class="o">(</span>vrf in name/id, vrf out name/id<span class="o">)</span>
</span><span class='line'>  <span class="m">1</span> 12.12.12.1 <span class="m">0</span> msec <span class="m">0</span> msec <span class="m">0</span> msec
</span><span class='line'>  <span class="m">2</span>  *  *
</span><span class='line'>    14.14.14.4 <span class="m">0</span> msec
</span><span class='line'>
</span><span class='line'>R3 <span class="p">|</span> success <span class="p">|</span> <span class="nv">rc</span><span class="o">=</span><span class="m">0</span> &gt;&gt;
</span><span class='line'>
</span><span class='line'>Type escape sequence to abort.
</span><span class='line'>Tracing the route to 10.0.0.4
</span><span class='line'>VRF info: <span class="o">(</span>vrf in name/id, vrf out name/id<span class="o">)</span>
</span><span class='line'>  <span class="m">1</span> 34.34.34.4 <span class="m">0</span> msec <span class="m">0</span> msec *
</span><span class='line'>
</span><span class='line'>R4 <span class="p">|</span> success <span class="p">|</span> <span class="nv">rc</span><span class="o">=</span><span class="m">0</span> &gt;&gt;
</span><span class='line'>
</span><span class='line'>Type escape sequence to abort.
</span><span class='line'>Tracing the route to 10.0.0.4
</span><span class='line'>VRF info: <span class="o">(</span>vrf in name/id, vrf out name/id<span class="o">)</span>
</span><span class='line'>  <span class="m">1</span> 10.0.0.4 <span class="m">0</span> msec <span class="m">0</span> msec *
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Ansible ad-hoc commands are a good way to quickly test something out and learn how things work. Next step would be to create a playbook file which will contain several of those commands in a more structured way. Playbooks use YAML syntax and follow strict formatting rules. At the top of the file there&rsquo;s a name of the play along with the target hosts group. Following that are a list of tasks, each of which calls its own module and passes arguments to it. In this example playbook does the following:</p>

<ol>
<li>Defines a <code>loopbacks</code> variable which stores in a hash a list of devices along with their loopback IP addresses.</li>
<li>Uses <code>raw</code> module to run traceroute commands. This is the only module that doesn&rsquo;t require Python to be installed on a target machine.</li>
<li>For each host in <code>cisco-devices</code> group runs traceroute to every other hosts' loopback IP</li>
<li>Stores the result in a <code>trace_result</code> variable</li>
</ol>


<figure class='code'><figcaption><span>~/tdd_ansible/cisco-trace-run.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Run traceroute commands</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco-devices</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">remote_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cisco</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">loopbacks</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span>
</span><span class='line'>    <span class="s">&quot;R1&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;10.0.0.1&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>    <span class="s">&quot;R2&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;10.0.0.2&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>    <span class="s">&quot;R3&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;10.0.0.3&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>    <span class="s">&quot;R4&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;10.0.0.4&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>    <span class="p-Indicator">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">run traceroute to every other host</span>
</span><span class='line'>      <span class="l-Scalar-Plain">raw</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">traceroute {{ item.value }} source Loopback0 probe 1 numeric</span>
</span><span class='line'>      <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">item.key != inventory_hostname</span>
</span><span class='line'>      <span class="l-Scalar-Plain">with_dict</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">loopbacks</span>
</span><span class='line'>      <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">trace_result</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#    - name: Debug registered variables</span>
</span><span class='line'><span class="c1">#      debug: var=trace_result</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this Playbook I use several useful Ansible features:</p>

<ul>
<li><a href="https://docs.ansible.com/playbooks_variables.html#variables-defined-in-a-playbook">Variables defined in playbooks</a></li>
<li><a href="https://docs.ansible.com/playbooks_loops.html#looping-over-hashes">Looping over hashes</a></li>
<li><a href="https://docs.ansible.com/playbooks_conditionals.html">Conditionals</a></li>
<li><a href="https://docs.ansible.com/playbooks_variables.html#registered-variables">Registered variables</a></li>
</ul>


<p>The end result of this task is that traceroute is run 12 times - one time from each of the hosts to each other host except for when source and destination are equal.</p>

<figure class='code'><figcaption><span>Running the playbook</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ansible-playbook cisco-trace-run.yml
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>Run traceroute commands<span class="o">]</span> ************************************************
</span><span class='line'>
</span><span class='line'>TASK: <span class="o">[</span>run traceroute to every other host<span class="o">]</span> ************************************
</span><span class='line'>skipping: <span class="o">[</span>R4<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R4&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.4&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R4&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.4&#39;</span><span class="o">})</span>
</span><span class='line'>skipping: <span class="o">[</span>R1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R1&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.1&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R3<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R4&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.4&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R4<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R1&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.1&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.2&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R3<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R1&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.1&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R1<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R3&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.3&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R3<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.2&#39;</span><span class="o">})</span>
</span><span class='line'>skipping: <span class="o">[</span>R3<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R3&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.3&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R4&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.4&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R1&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.1&#39;</span><span class="o">})</span>
</span><span class='line'>skipping: <span class="o">[</span>R2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.2&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R4<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R2&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.2&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R2<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R3&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.3&#39;</span><span class="o">})</span>
</span><span class='line'>ok: <span class="o">[</span>R4<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">(</span><span class="nv">item</span><span class="o">={</span><span class="s1">&#39;key&#39;</span>: <span class="s1">&#39;R3&#39;</span>, <span class="s1">&#39;value&#39;</span>: <span class="s1">&#39;10.0.0.3&#39;</span><span class="o">})</span>
</span><span class='line'>
</span><span class='line'>PLAY RECAP ********************************************************************
</span><span class='line'>R1                         : <span class="nv">ok</span><span class="o">=</span><span class="m">1</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R2                         : <span class="nv">ok</span><span class="o">=</span><span class="m">1</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R3                         : <span class="nv">ok</span><span class="o">=</span><span class="m">1</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>R4                         : <span class="nv">ok</span><span class="o">=</span><span class="m">1</span>    <span class="nv">changed</span><span class="o">=</span><span class="m">0</span>    <span class="nv">unreachable</span><span class="o">=</span><span class="m">0</span>    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>The above shows that all 12 tasks were completed successfully, meaning the command was executed and result was stored in a registered variable. To view the actual output of <code>traceroute</code> commands uncomment the two debug lines at the end of the playbook and rerun it.</p>

<hr />

<p>Now that the goal of running commands on multiple devices in parallel is achieved, the next step would be to decide how to make use of the received output. In the next posts I will attempt to tackle the following problems:</p>

<ul>
<li>Parse textual output of traceroute command and extract transit IP addresses.</li>
<li>Find a way to convert these transit IP addresses into hostnames without relying on DNS.</li>
<li>Verify TDD scenarios against traceroute outputs and produce an intelligible result of this verification.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows-Linux File Synchronisation]]></title>
    <link href="http://networkop.github.io/blog/2015/06/22/dev-file-sync/"/>
    <updated>2015-06-22T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/06/22/dev-file-sync</id>
    <content type="html"><![CDATA[<p>My development environment usually consists of a host machine running Windows and a development Linux &ldquo;headless&rdquo; virtual machine. I create and edit
files in a <a href="https://notepad-plus-plus.org/">Notepad++</a> text editor and then transfer them over to the Linux VM. Until recently I&rsquo;ve been using a hypervisor-enabled &ldquo;shared&rdquo; folder. However, Windows file system emulators in Linux do not support symbolic links
and therefore breaks a lot of applications that rely on them. This prompted me to start looking for a new way to sync my files. That&rsquo;s how I came across this new amazing
file syncing app called <a href="https://syncthing.net/">Syncthing</a>. Why is it amazing?</p>

<ul>
<li>It uses peer-to-peer architecture. User traffic is not uploaded to a centralised server and is transferred directly between peers.</li>
<li>It is open-source. It doesn&rsquo;t use any proprietary syncing protocols like BTSync.</li>
<li>As the result of open-source nature it has big community support with clients, wrappers and extension available for any major platform.</li>
<li>It is secure. All transfers are TLS-encrypted.</li>
<li>It&rsquo;s simple to use. Windows version installs like any other Windows app, Linux version, like any other Linux app, will take a little tinkering.</li>
<li>It&rsquo;s written in Golang, an extremely popular language amongst professional programmers and surely these guys can&rsquo;t be mistaken.</li>
</ul>


<!--more-->


<h2>Windows installation</h2>

<p>Windows installation is extremely easy. I use a package called <a href="https://github.com/canton7/SyncTrayzor/releases">SyncTrayzor</a> which contains the application itself, serves as a tray utility wrapper and also implements &ldquo;inotify&rdquo; which allows for file on-change synchronisation (BGP ip next-hop tracking anyone?)</p>

<h2>Ubuntu installation</h2>

<p>Ubuntu package installation is an easy 4-step process:</p>

<figure class='code'><figcaption><span>1.Syncthing Ubuntu installation</span><a href='http://apt.syncthing.net/'>Instructions</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Add the release PGP keys:</span>
</span><span class='line'><span class="nv">$ </span>curl -s https://syncthing.net/release-key.txt <span class="p">|</span> sudo apt-key add -
</span><span class='line'>
</span><span class='line'><span class="c"># Add the &quot;release&quot; channel to your APT sources:</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>deb http://apt.syncthing.net/ Syncthing release <span class="p">|</span> sudo tee /etc/apt/sources.list.d/syncthing-release.list
</span><span class='line'>
</span><span class='line'><span class="c"># Update and install syncthing:</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install syncthing
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>2.Inotify installation</span><a href='https://github.com/syncthing/syncthing-inotify/releases'>Release</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Choose the latest release for your platform</span>
</span><span class='line'><span class="nv">$ </span>wget https://github.com/syncthing/syncthing-inotify/releases/download/v0.6.5/syncthing-inotify-linux-amd64-v0.6.5.tar.gz
</span><span class='line'>
</span><span class='line'><span class="c"># Unpack and copy inotify to the same directory as the main app</span>
</span><span class='line'><span class="nv">$ </span>tar xvf syncthing-inotify-linux-amd64-v0.6.5.tar.gz
</span><span class='line'><span class="nv">$ </span>which syncthing
</span><span class='line'>/usr/bin/syncthing
</span><span class='line'><span class="nv">$ </span>mv syncthing-inotify /usr/bin/
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>3. Configure upstart script to control Syncthing</span><a href='https://egustafson.github.io/syncthing-ubuntu.html'>Upstart setup</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Create a file for main service</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;start on starting network-services</span>
</span><span class='line'><span class="s2">stop on stopping network-services</span>
</span><span class='line'><span class="s2">env STNORESTART=yes</span>
</span><span class='line'><span class="s2">respawn</span>
</span><span class='line'><span class="s2">env HOME=/root</span>
</span><span class='line'><span class="s2">exec /usr/bin/syncthing&quot;</span> &gt;&gt; /etc/init/syncthing.conf
</span><span class='line'>
</span><span class='line'><span class="c"># Do the same for inotify</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;start on starting syncthing</span>
</span><span class='line'><span class="s2">stop on stopping syncthing</span>
</span><span class='line'><span class="s2">env STNORESTART=yes</span>
</span><span class='line'><span class="s2">respawn</span>
</span><span class='line'><span class="s2">env HOME=/root</span>
</span><span class='line'><span class="s2">exec /usr/bin/syncthing-inotify&quot;</span> &gt;&gt; /etc/init/syncthing-inotify.conf
</span><span class='line'>
</span><span class='line'><span class="c"># start both services </span>
</span><span class='line'><span class="nv">$ </span>service syncthing start <span class="o">&amp;&amp;</span> service syncthing-inotify start
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>4. Update Syncthing configuration file </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Update the default Sync directory to match your dev environment</span>
</span><span class='line'><span class="c"># using the correct device IDs</span>
</span><span class='line'><span class="nv">$ </span>head -n <span class="m">10</span> ~/.config/syncthing/config.xml
</span><span class='line'>&lt;configuration <span class="nv">version</span><span class="o">=</span><span class="s2">&quot;10&quot;</span>&gt;
</span><span class='line'>    &lt;folder <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;ansible-blog&quot;</span> <span class="nv">path</span><span class="o">=</span><span class="s2">&quot;/root/tdd_ansible&quot;</span> <span class="nv">ro</span><span class="o">=</span><span class="s2">&quot;false&quot;</span> <span class="nv">rescanIntervalS</span><span class="o">=</span><span class="s2">&quot;60&quot;</span> <span class="nv">ignorePerms</span><span class="o">=</span><span class="s2">&quot;false&quot;</span> <span class="nv">autoNormalize</span><span class="o">=</span><span class="s2">&quot;false&quot;</span>&gt;
</span><span class='line'>        &lt;device <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;MY-DEVICE-ID&quot;</span>&gt;&lt;/device&gt;
</span><span class='line'>        &lt;device <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;PEER-DEVICE-ID&quot;</span>&gt;&lt;/device&gt;
</span><span class='line'>        &lt;versioning&gt;&lt;/versioning&gt;
</span><span class='line'>        &lt;copiers&gt;0&lt;/copiers&gt;
</span><span class='line'>        &lt;pullers&gt;0&lt;/pullers&gt;
</span><span class='line'>        &lt;hashers&gt;0&lt;/hashers&gt;
</span><span class='line'>        &lt;order&gt;random&lt;/order&gt;
</span><span class='line'>    &lt;/folder&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># Add peer device&#39;s ID to the same file</span>
</span><span class='line'><span class="nv">$ </span>cat ~/.config/syncthing/config.xml
</span><span class='line'>...
</span><span class='line'>    &lt;device <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;PEER-DEVICE-ID&quot;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;NETOP-DESKTOP&quot;</span> <span class="nv">compression</span><span class="o">=</span><span class="s2">&quot;metadata&quot;</span> <span class="nv">introducer</span><span class="o">=</span><span class="s2">&quot;false&quot;</span>&gt;
</span><span class='line'>        &lt;address&gt;dynamic&lt;/address&gt;
</span><span class='line'>    &lt;/device&gt;
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="c"># restart both syncthing services</span>
</span><span class='line'><span class="nv">$ </span>service syncthing restart <span class="o">&amp;&amp;</span> service syncthing-inotify restart
</span></code></pre></td></tr></table></div></figure>


<p>Finally, Windows service can be configured similarly via Syncthing Tray. End result is that files are replicated between the two folders with a delay of just a few seconds</p>

<figure class='code'><figcaption><span>Verification</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>touch /root/tdd_ansible/testfile
</span><span class='line'><span class="nv">$ </span>tail -n <span class="m">3</span> /var/log/upstart/syncthing*
</span><span class='line'><span class="o">==</span>&gt; /var/log/upstart/syncthing-inotify.log &lt;<span class="o">==</span>
</span><span class='line'><span class="o">[</span>OK<span class="o">]</span> 01:45:04 Watching ansible-blog: /root/tdd_ansible
</span><span class='line'><span class="o">[</span>OK<span class="o">]</span> 01:45:04 Syncthing is indexing change in ansible-blog: <span class="o">[</span>.stfolder<span class="o">]</span>
</span><span class='line'><span class="o">[</span>OK<span class="o">]</span> 01:46:16 Syncthing is indexing change in ansible-blog: <span class="o">[</span>testfile<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">==</span>&gt; /var/log/upstart/syncthing.log &lt;<span class="o">==</span>
</span><span class='line'><span class="o">[</span>TLARX<span class="o">]</span> 01:41:25 INFO: Established secure connection to DEVICE-ID at 192.168.X.Y:22000-192.168.X.Z:53007
</span><span class='line'><span class="o">[</span>TLARX<span class="o">]</span> 01:41:25 INFO: Device DEVICE-ID client is <span class="s2">&quot;syncthing v0.11.10&quot;</span>
</span><span class='line'><span class="o">[</span>TLARX<span class="o">]</span> 01:41:25 INFO: Device DEVICE-ID name is <span class="s2">&quot;NETOP-DESKTOP&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>How can you not love open-source after that?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Development Environment Setup]]></title>
    <link href="http://networkop.github.io/blog/2015/06/17/dev-env-setup/"/>
    <updated>2015-06-17T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/06/17/dev-env-setup</id>
    <content type="html"><![CDATA[<p>Before we proceed with TDD framework build it is important to have the development environment setup. In our case it will consist of two major components:</p>

<ul>
<li>Network Simulation Environment</li>
<li>Ansible Development Environment</li>
</ul>


<p>To simplify things I will run both of these environments on the same Virtual Machine. For network simulation I will use <a href="http://www.unetlab.com/">UnetLab</a>, a wonderful product developed by Andrea Dainese. Currently, UnetLab is distributed as an OVA package and is available for free download on <a href="http://www.unetlab.com/download/">the website</a>. To simulate network devices I will run <abbr title="IOS on Unix">IOU</abbr> which will be interconnected to form a simple network. Finally, I will show how to setup development environment with Ansible, git and Python.</p>

<!--more-->


<h2>UnetLab setup</h2>

<p>UnetLab is a network simulation environment very similar to GNS3. The biggest advantage for me, personally, is that it runs as a single entity and doesn&rsquo;t require a separate front-end like GNS3. That being said, the only requirement for this project is for the test network to have remote connectivity to a machine running Ansible, so having UnetLab specifically is not required and any network simulator would do, including a real (non-virtual) lab. One of the side effects of choosing UnetLab is that all development will have to be done on Ubuntu which is the OS pre-installed in the OVA.<br/>
Here are the steps required to get the network environment setup:</p>

<ol>
<li><a href="http://www.unetlab.com/download/">Download</a> and import OVA file into the hypervisor of your choice.</li>
<li>Download and <a href="http://www.unetlab.com/2014/11/adding-cisco-iouiol-images/">import</a> Cisco L3 IOU file.</li>
<li>Create a simple 4-device network (<a href="http://www.unetlab.com/2014/11/create-the-first-lab/">example</a>) and <a href="http://www.unetlab.com/2014/11/using-cloud-devices/">connect it to the network of host machine</a>.</li>
<li><a href="http://www.unetlab.com/2015/03/url-telnet-ssh-vnc-integration-on-windows/">Configure</a> your favourite terminal program to work with UnetLab&rsquo;s web interface</li>
</ol>


<p>This is the topology I will be using for testing:
<img class="center" src="http://networkop.github.io/images/lab-topo.png" title="'Test Topology'" ></p>

<p>Each device will have a Loopback interface in <code>10.0.0.0/24</code> subnet which I will statically point to <code>interface Eth0/2</code> of R1 on the host machine. Here&rsquo;s the example of R1&rsquo;s configuration:</p>

<figure class='code'><figcaption><span>Sample Router Configuration - R1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>! Configure hostname, domain and RSA key to enable SSH
</span><span class='line'>hostname R1
</span><span class='line'>ip domain name tdd.lab
</span><span class='line'>crypto key generate rsa modulus 1024
</span><span class='line'>! Point AAA to local database
</span><span class='line'>aaa new-model
</span><span class='line'>aaa authentication login default local
</span><span class='line'>aaa authorization exec default local
</span><span class='line'>username cisco privilege 15 secret cisco
</span><span class='line'>! Enable remote ssh connections
</span><span class='line'>line vty 0 4
</span><span class='line'> transport input ssh
</span><span class='line'>! Configure interfaces
</span><span class='line'>interface Loopback0
</span><span class='line'> ip address 10.0.0.1 255.255.255.255
</span><span class='line'>!
</span><span class='line'>interface Ethernet0/0
</span><span class='line'> ip address 12.12.12.1 255.255.255.0
</span><span class='line'>!
</span><span class='line'>interface Ethernet0/1
</span><span class='line'> ip address 14.14.14.1 255.255.255.0
</span><span class='line'>!
</span><span class='line'>interface Ethernet0/2
</span><span class='line'> description connection to host machine
</span><span class='line'> ip address 192.168.247.25 255.255.255.0
</span><span class='line'>! Enable dynamic routing
</span><span class='line'>router eigrp 100
</span><span class='line'> network 0.0.0.0
</span><span class='line'>!
</span><span class='line'>end
</span><span class='line'>write
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>All other devices will have similar configuration with the end goal of having connectivity between any pair of Loopback interfaces.</p>

<p>In order to to have connectivity to devices from a host machine we need to add a static route for <code>10.0.0.0/24</code> network:</p>

<figure class='code'><figcaption><span>Adding a static route to test topology</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>route add -net 10.0.0.0 netmask 255.255.255.0 gw 192.168.247.25
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>At this point host machine should be able to ping each one of those Loopbacks:</p>

<figure class='code'><figcaption><span>Testing connectivity to test devices</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="k">for</span> i in <span class="o">{</span>1..4<span class="o">}</span><span class="p">;</span> <span class="k">do</span> ping -c <span class="m">1</span> 10.0.0.<span class="nv">$i</span><span class="p">;</span> <span class="k">done</span> <span class="p">|</span> grep packets
</span><span class='line'><span class="m">1</span> packets transmitted, <span class="m">1</span> received, 0% packet loss, <span class="nb">time </span>0ms
</span><span class='line'><span class="m">1</span> packets transmitted, <span class="m">1</span> received, 0% packet loss, <span class="nb">time </span>0ms
</span><span class='line'><span class="m">1</span> packets transmitted, <span class="m">1</span> received, 0% packet loss, <span class="nb">time </span>0ms
</span><span class='line'><span class="m">1</span> packets transmitted, <span class="m">1</span> received, 0% packet loss, <span class="nb">time </span>0ms
</span></code></pre></td></tr></table></div></figure>


<h2>Dev environment setup</h2>

<p>Ansible is one of the most popular automation and orchestration tools in IT industry. Part of its popularity is due to the &ldquo;clientless&rdquo; architecture where
the only requirement to a managed system is to have ssh access and Python execution environment. The latter pretty much rules out the biggest part of common
networking infrastructure. However it is still possible to use Ansible in a &ldquo;raw&rdquo; mode and write modules of our own. That&rsquo;s exactly what we&rsquo;re gonna do in this exercise.
Due to the fact that Ansible is written in Python, it has better support for modules written in the same language, therefore all modules will be written in Python.<br/>
One important tool every developer uses is version control. It allows to track changes made to the code and enables collaboration between multiple
people working on the same project. For beginners it always makes sense to stick to the most popular tools, that&rsquo;s why I&rsquo;ll be using git for version control and store all my code on Github.</p>

<p>This is what&rsquo;s needed to setup the development environment:</p>

<figure class='code'><figcaption><span>1. Install Python and git packages</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get update <span class="o">&amp;&amp;</span> sudo apt-get install python git-core
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>2. Initialise global git settings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config --global user.name <span class="s2">&quot;Network-oriented programming&quot;</span>
</span><span class='line'><span class="nv">$ </span>git config --global user.email <span class="s2">&quot;networkop@example.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>3. Install Ansible</span><a href='http://docs.ansible.com/intro_installation.html'>Ansible Installation</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install software-properties-common
</span><span class='line'><span class="nv">$ </span>sudo apt-add-repository ppa:ansible/ansible
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install ansible
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>4. Test Ansible connectivity to our network topology</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo <span class="nb">echo</span> <span class="s2">&quot;R1 ansible_ssh_host=10.0.0.1&quot;</span> &gt;&gt; /etc/ansible/hosts
</span><span class='line'><span class="nv">$ </span><span class="nb">printf</span> <span class="s2">&quot;[defaults]\nhost_key_checking=False\n&quot;</span> &gt;&gt; ansible.cfg
</span><span class='line'><span class="nv">$ </span>ansible R1 -u cisco --ask-pass -m <span class="s2">&quot;raw&quot;</span> -a <span class="s2">&quot;show version | include IOS&quot;</span>
</span><span class='line'>SSH password:
</span><span class='line'>R3 <span class="p">|</span> success <span class="p">|</span> <span class="nv">rc</span><span class="o">=</span><span class="m">0</span> &gt;&gt;
</span><span class='line'>Cisco IOS Software, Linux Software <span class="o">(</span>I86BI_LINUX-ADVENTERPRISEK9-M<span class="o">)</span>, Version 15.4<span class="o">(</span>1<span class="o">)</span>T, DEVELOPMENT TEST SOFTWARE
</span><span class='line'>Connection to 10.0.0.1 closed by remote host.
</span></code></pre></td></tr></table></div></figure>


<p>The above script first populates Ansible <code>inventory</code> file with an ip address of R1, then disables ssh key checking,
 and finally runs an <code>ad-hoc</code> command <code>show version | include IOS</code> which should prompt for a password and return a result of command execution on R1.
 I will explain about inventory and configuration files in a bit more detail in the next post. At this stage all what&rsquo;s required is a meaningful response from a Cisco router.</p>

<p><figure class='code'><figcaption><span>
5. Create a free Github account and setup a new repository
</span><a href='https://github.com/join'>Join Github</a></figcaption><div class="highlight">
</figure>
For my blog I will be using <code>networkop</code> as a Github username and <code>simple-cisco-tdd</code> as a repository name.
Once respository is created, Github will provide instructions to setup repository on a local machine which will be done in the next step.</p>

<p><figure class='code'><figcaption><span>6. Setup a project directory and initialise git</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir ~/tdd_ansible <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ~/tdd_ansible
</span><span class='line'><span class="nv">$ </span>eacho <span class="s2">&quot;simple-cisco-tdd&quot;</span> &gt;&gt; README.md
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>git add README.md
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;first commit&quot;</span>
</span><span class='line'><span class="nv">$ </span>git remote add origin <a href="https://github.com/networkop/simple-cisco-tdd.git">https://github.com/networkop/simple-cisco-tdd.git</a>
</span><span class='line'><span class="nv">$ </span>git push -u origin master
</span><span class='line'>Username <span class="k">for</span> <a href="https://github.com:">https://github.com:</a> networkop
</span><span class='line'>Password <span class="k">for</span> <a href="https://networkop@github.com:">https://networkop@github.com:</a>
</span><span class='line'>Counting objects: 3, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>3/3<span class="o">)</span>, <span class="m">206</span> bytes <span class="p">|</span> <span class="m">0</span> bytes/s, <span class="k">done</span>.
</span><span class='line'>Total <span class="m">3</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>To <a href="https://github.com/networkop/simple-cisco-tdd.git">https://github.com/networkop/simple-cisco-tdd.git</a>
</span><span class='line'> * <span class="o">[</span>new branch<span class="o">]</span>      master -&gt; master
</span><span class='line'>Branch master <span class="nb">set </span>up to track remote branch master from origin.
</span></code></pre></td></tr></table></div></figure></p>

<p>The above result indicates that <code>README.md</code> file has been pushed to Github successfully. Needless to say that all pushed local files can be also viewed from Github&rsquo;s web page.</p>

<hr />

<p>This completes the initial environment setup. I highly recommend at this stage, hypervisor permitting, to take a snapshot of a current state of a virtual machine to avoid having to rebuild it every time something goes pear-shaped.
In the next post I will show how to setup Ansible to work with Cisco devices.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Simple Network TDD Framework]]></title>
    <link href="http://networkop.github.io/blog/2015/06/15/simple-tdd-framework/"/>
    <updated>2015-06-15T00:00:00-07:00</updated>
    <id>http://networkop.github.io/blog/2015/06/15/simple-tdd-framework</id>
    <content type="html"><![CDATA[<p>In the following series of posts I will show how to build a simple Test-Driven Development framework
for Cisco devices. This framework will allow a network engineer to define traffic patterns in a human-readable format and automatically check if those assumption hold. It will be built as a series of <a href="http://docs.ansible.com/list_of_files_modules.html">Ansible</a> <em>modules</em> and <em>playbooks</em>. The idea is to show an example of how programming can be used by network engineers even now, before all devices acquire their own APIs as well as introduce some well-known programming paradigms and best practices to network engineers thereby making a small step towards networking nirvana a.k.a. <abbr title="Software-Defined Network">SDN</abbr>. The reader is assumed to have only a basic networking, linux and python programming skills.</p>

<!--more-->


<h2>Before we begin (optional section)</h2>

<p>Before we go on, I&rsquo;d like to put a little disclaimer about terms being used in this post. <abbr title="Test-Driven Development">TDD</abbr>, and its counterpart <abbr title="Behaviour-Driven Development">BDD</abbr>,
are well-known and accepted practices in development world. Both rely on the assumption that tests will be written
before the code and will <em>drive</em> code development. This seemingly unnatural approach became extremely popular with the advent of <a href="http://agilemanifesto.org/">Agile</a> and is still being widely used, specifically in web development. What I will be developing will look more like a BDD rather than TDD, since it will be testing overall system behaviour rather than small self-contained portions of configuration. However, I still prefer to use the term TDD, firstly, because it&rsquo;s easier to understand for people from a non-dev background, secondly, because it&rsquo;s very hard/impossible to test small portions of network configuration (like routing protocol configuration), and lastly, since my tests will rely heavily on traceroutes, TDD may as well stand for Traceroute-Driven Development.</p>

<h2>How will it work?</h2>

<p>Traffic flow patterns, a.k.a. traffic paths is one bit of information that even higher-level management is able to comprehend. With a nice network diagram it is easy to show how low-latency traffic from Network_A will flow to Network_B through private VPN link on Router_X, while an internet-bound traffic will traverse a low-cost, high-latency Internet link on Router_Y. The TDD framework will use the same idea but in a text format</p>

<figure class='code'><figcaption><span>TDD scenario file example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>1. Testing of Primary Link
</span><span class='line'>  1. From Router1 to Router2 via Router4, Router5
</span><span class='line'>  2. From Router2 to Router1 via Router5, Router4
</span><span class='line'>2. Testing of Backup Link
</span><span class='line'>  1. From Router4 to Router1 via Router3
</span><span class='line'>  2. From Router4 to Router2 via Router7
</span></code></pre></td></tr></table></div></figure>


<p>This format can be understood by both network engineers and their clients and can be used as a basis for network acceptance and verification testing. At the same time it follows a strictly defined format which can be parsed, processed and actioned by a program. I&rsquo;ll show how to write an Ansible module that parses this text, runs a traceroute and checks if the test was successful.<br/>
These tests can also be used during regression testing of the network each time network configuration changes. This kind of verification offers a much more reliable result compared to visual examination of traceroute results and routing tables.</p>

<h2>Step-by-step procedure</h2>

<p>This is how I see the whole development process now (before I started). Some section may get added/removed in the process. I&rsquo;ll try to write at least one post a week aiming to complete the series in under one month.</p>

<ol>
<li><a href="http://networkop.github.io/blog/2015/06/17/dev-env-setup/">Development environment setup</a></li>
<li><a href="http://networkop.github.io/blog/2015/06/24/ansible-intro/">Getting started with Ansible for Cisco IOS</a></li>
<li><a href="http://networkop.github.io/blog/2015/07/03/parser-modules/">Developing Ansible library to gather facts from Cisco devices</a></li>
<li><a href="http://networkop.github.io/blog/2015/07/10/test-verification/">Developing Ansible library to verify test scenarios</a></li>
</ol>


<p>A <a href="http://networkop.github.io/blog/2015/07/17/tdd-quickstart/">quickstart guide</a> for those interested to see the final product in action.</p>
]]></content>
  </entry>
  
</feed>
